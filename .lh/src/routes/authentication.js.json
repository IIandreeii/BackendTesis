{
    "sourceFile": "src/routes/authentication.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1731015160541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731987915327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,29 +55,40 @@\n router.post('/signin', async (req, res, next) => {\n     passport.authenticate('local.signin', async (err, user, info) => {\n         try {\n             if (err) {\n+                await recordAudit('login', null, null, { message: 'Error en autenticación', error: err.message });\n                 return next(err);\n             }\n             if (!user) {\n-                // Verifica si el error es debido a un email incorrecto o una contraseña incorrecta\n+                const auditDetails = { message: 'Autenticación fallida' };\n                 if (info && info.message === 'Usuario no encontrado') {\n+                    auditDetails.message = 'Usuario no encontrado';\n+                    await recordAudit('login', null, null, auditDetails);\n                     return res.status(401).json({ message: 'Usuario no encontrado' });\n                 }\n                 if (info && info.message === 'Contraseña incorrecta') {\n+                    auditDetails.message = 'Contraseña incorrecta';\n+                    await recordAudit('login', null, null, auditDetails);\n                     return res.status(401).json({ message: 'Contraseña incorrecta' });\n                 }\n+                await recordAudit('login', null, null, auditDetails);\n                 return res.status(401).json({ message: 'Autenticación fallida' });\n             }\n             req.login(user, { session: false }, async (error) => {\n-                if (error) return next(error);\n+                if (error) {\n+                    await recordAudit('login', null, user._id, { message: 'Error en autenticación', error: error.message });\n+                    return next(error);\n+                }\n                 \n                 const body = { _id: user._id, email: user.email, role: user.role };\n                 const token = jwt.sign({ user: body }, 'top_secret');\n                 \n+                await recordAudit('login', null, user._id, { message: 'Inicio de sesión exitoso' });\n                 return res.json({ token });\n             });\n         } catch (error) {\n+            await recordAudit('login', null, null, { message: 'Error en autenticación', error: error.message });\n             return next(error);\n         }\n     })(req, res, next);\n });\n"
                },
                {
                    "date": 1731987920702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import express from 'express'\n+const router = express.Router();\n+import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n+import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n+import passport from 'passport';\n+import jwt from 'jsonwebtoken';\n+import { URLSearchParams } from 'url';\n+import axios from 'axios';\n+import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n+\n+\n+\n+\n+\n+router.post('/signup', (req, res, next) => {\n+    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n+        if (err) {\n+            return next(err);\n+        }\n+        if (!user) {\n+            return res.status(400).json({ message: info.message });\n+        }\n+        res.json({\n+            message: 'Signup successful',\n+            user: user\n+        });\n+    })(req, res, next);\n+});\n+\n+\n+router.post('/:id/update', async(req, res, next) => {\n+    try {\n+        const updates = req.body;\n+        console.log(updates);\n+        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n+        if (!charity) {\n+            return res.status(404).send(\"ONG no encontrada\");\n+        }\n+        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n+        \n+    } catch (error) {\n+        return res.status(404).send(\"ONG no encontrada\");\n+    }\n+});\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+router.post('/signin', async (req, res, next) => {\n+    passport.authenticate('local.signin', async (err, user, info) => {\n+        try {\n+            if (err) {\n+                return next(err);\n+            }\n+            if (!user) {\n+                // Verifica si el error es debido a un email incorrecto o una contraseña incorrecta\n+                if (info && info.message === 'Usuario no encontrado') {\n+                    return res.status(401).json({ message: 'Usuario no encontrado' });\n+                }\n+                if (info && info.message === 'Contraseña incorrecta') {\n+                    return res.status(401).json({ message: 'Contraseña incorrecta' });\n+                }\n+                return res.status(401).json({ message: 'Autenticación fallida' });\n+            }\n+            req.login(user, { session: false }, async (error) => {\n+                if (error) return next(error);\n+                \n+                const body = { _id: user._id, email: user.email, role: user.role };\n+                const token = jwt.sign({ user: body }, 'top_secret');\n+                \n+                return res.json({ token });\n+            });\n+        } catch (error) {\n+            return next(error);\n+        }\n+    })(req, res, next);\n+});\n+\n+\n+// Asegúrate de ajustar la ruta según tu estructura de proyecto\n+\n+router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n+    try {\n+        const userId = req.user._id;\n+        let user = await User.findById(userId);\n+\n+        if (user) {\n+            res.json({\n+                message: 'You made it to the secure route',\n+                user: {\n+                    id: user._id,\n+                    email: user.email,\n+                    dni: user.dni,\n+                    apellido: user.apellido,\n+                    nombre: user.nombre,\n+                    role: user.role\n+                },\n+                token: req.query.secret_token\n+            });\n+        } else {\n+            let charity = await Charity.findById(userId);\n+            if (charity) {\n+                res.json({\n+                    message: 'You made it to the secure route',\n+                    charity: {\n+                        id: charity._id,\n+                        nombre: charity.nombre,\n+                        descripcion: charity.descripcion,\n+                        email: charity.email,\n+                        direccion: charity.direccion,\n+                        telefono: charity.telefono,\n+                        userType: charity.userType,\n+                        accessToken: charity.accessToken\n+                    },\n+                    token: req.query.secret_token\n+                });\n+            } else {\n+                res.status(404).json({ message: 'User or Charity not found' });\n+            }\n+        }\n+    } catch (error) {\n+        next(error);\n+    }\n+});\n+\n+\n+// Ruta para cerrar sesión\n+\n+// Ruta para cerrar sesión\n+router.post('/logout', (req, res) => {\n+    const token = req.query.secret_token;\n+    if (!token) {\n+        return res.status(400).json({ message: 'Token no proporcionado' });\n+    }\n+    try {\n+        revokeToken(token);\n+        res.json({ message: 'Sesión cerrada exitosamente' });\n+    } catch (err) {\n+        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n+    }\n+});\n+\n+\n+\n+//apartado de mercado pago\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731988021416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import jwt from 'jsonwebtoken';\n import { URLSearchParams } from 'url';\n import axios from 'axios';\n import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n+import recordAudit from '../lib/recordAudit.js';\n \n \n \n \n"
                },
                {
                    "date": 1731988354450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import express from 'express'\n+const router = express.Router();\n+import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n+import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n+import passport from 'passport';\n+import jwt from 'jsonwebtoken';\n+import { URLSearchParams } from 'url';\n+import axios from 'axios';\n+import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n+import recordAudit from '../lib/recordAudit.js';\n+\n+\n+\n+\n+\n+router.post('/signup', (req, res, next) => {\n+    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n+        if (err) {\n+            return next(err);\n+        }\n+        if (!user) {\n+            return res.status(400).json({ message: info.message });\n+        }\n+        res.json({\n+            message: 'Signup successful',\n+            user: user\n+        });\n+    })(req, res, next);\n+});\n+\n+\n+router.post('/:id/update', async(req, res, next) => {\n+    try {\n+        const updates = req.body;\n+        console.log(updates);\n+        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n+        if (!charity) {\n+            return res.status(404).send(\"ONG no encontrada\");\n+        }\n+        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n+        \n+    } catch (error) {\n+        return res.status(404).send(\"ONG no encontrada\");\n+    }\n+});\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+// Asegúrate de ajustar la ruta según tu estructura de proyecto\n+\n+router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n+    try {\n+        const userId = req.user._id;\n+        let user = await User.findById(userId);\n+\n+        if (user) {\n+            res.json({\n+                message: 'You made it to the secure route',\n+                user: {\n+                    id: user._id,\n+                    email: user.email,\n+                    dni: user.dni,\n+                    apellido: user.apellido,\n+                    nombre: user.nombre,\n+                    role: user.role\n+                },\n+                token: req.query.secret_token\n+            });\n+        } else {\n+            let charity = await Charity.findById(userId);\n+            if (charity) {\n+                res.json({\n+                    message: 'You made it to the secure route',\n+                    charity: {\n+                        id: charity._id,\n+                        nombre: charity.nombre,\n+                        descripcion: charity.descripcion,\n+                        email: charity.email,\n+                        direccion: charity.direccion,\n+                        telefono: charity.telefono,\n+                        userType: charity.userType,\n+                        accessToken: charity.accessToken\n+                    },\n+                    token: req.query.secret_token\n+                });\n+            } else {\n+                res.status(404).json({ message: 'User or Charity not found' });\n+            }\n+        }\n+    } catch (error) {\n+        next(error);\n+    }\n+});\n+\n+\n+// Ruta para cerrar sesión\n+\n+// Ruta para cerrar sesión\n+router.post('/logout', (req, res) => {\n+    const token = req.query.secret_token;\n+    if (!token) {\n+        return res.status(400).json({ message: 'Token no proporcionado' });\n+    }\n+    try {\n+        revokeToken(token);\n+        res.json({ message: 'Sesión cerrada exitosamente' });\n+    } catch (err) {\n+        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n+    }\n+});\n+\n+\n+\n+//apartado de mercado pago\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731988466970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,14 @@\n                 \n                 const body = { _id: user._id, email: user.email, role: user.role };\n                 const token = jwt.sign({ user: body }, 'top_secret');\n                 \n-                await recordAudit('login', null, user._id, { message: 'Inicio de sesión exitoso' });\n+                // Verificar si el ID pertenece a un usuario o a una organización benéfica\n+                const charity = await Charity.findById(user._id);\n+                const userId = charity ? null : user._id;\n+                const charityId = charity ? user._id : null;\n+\n+                await recordAudit('login', charityId, null, userId, { message: 'Inicio de sesión exitoso' });\n                 return res.json({ token });\n             });\n         } catch (error) {\n             await recordAudit('login', null, null, { message: 'Error en autenticación', error: error.message });\n"
                },
                {
                    "date": 1731988516235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+import express from 'express'\n+const router = express.Router();\n+import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n+import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n+import passport from 'passport';\n+import jwt from 'jsonwebtoken';\n+import { URLSearchParams } from 'url';\n+import axios from 'axios';\n+import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n+import recordAudit from '../lib/recordAudit.js';\n+\n+\n+\n+\n+\n+router.post('/signup', (req, res, next) => {\n+    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n+        if (err) {\n+            return next(err);\n+        }\n+        if (!user) {\n+            return res.status(400).json({ message: info.message });\n+        }\n+        res.json({\n+            message: 'Signup successful',\n+            user: user\n+        });\n+    })(req, res, next);\n+});\n+\n+\n+router.post('/:id/update', async(req, res, next) => {\n+    try {\n+        const updates = req.body;\n+        console.log(updates);\n+        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n+        if (!charity) {\n+            return res.status(404).send(\"ONG no encontrada\");\n+        }\n+        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n+        \n+    } catch (error) {\n+        return res.status(404).send(\"ONG no encontrada\");\n+    }\n+});\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+// Asegúrate de ajustar la ruta según tu estructura de proyecto\n+\n+router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n+    try {\n+        const userId = req.user._id;\n+        let user = await User.findById(userId);\n+\n+        if (user) {\n+            res.json({\n+                message: 'You made it to the secure route',\n+                user: {\n+                    id: user._id,\n+                    email: user.email,\n+                    dni: user.dni,\n+                    apellido: user.apellido,\n+                    nombre: user.nombre,\n+                    role: user.role\n+                },\n+                token: req.query.secret_token\n+            });\n+        } else {\n+            let charity = await Charity.findById(userId);\n+            if (charity) {\n+                res.json({\n+                    message: 'You made it to the secure route',\n+                    charity: {\n+                        id: charity._id,\n+                        nombre: charity.nombre,\n+                        descripcion: charity.descripcion,\n+                        email: charity.email,\n+                        direccion: charity.direccion,\n+                        telefono: charity.telefono,\n+                        userType: charity.userType,\n+                        accessToken: charity.accessToken\n+                    },\n+                    token: req.query.secret_token\n+                });\n+            } else {\n+                res.status(404).json({ message: 'User or Charity not found' });\n+            }\n+        }\n+    } catch (error) {\n+        next(error);\n+    }\n+});\n+\n+\n+// Ruta para cerrar sesión\n+\n+// Ruta para cerrar sesión\n+router.post('/logout', (req, res) => {\n+    const token = req.query.secret_token;\n+    if (!token) {\n+        return res.status(400).json({ message: 'Token no proporcionado' });\n+    }\n+    try {\n+        revokeToken(token);\n+        res.json({ message: 'Sesión cerrada exitosamente' });\n+    } catch (err) {\n+        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n+    }\n+});\n+\n+\n+\n+//apartado de mercado pago\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731988604986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,29 +47,29 @@\n router.post('/signin', async (req, res, next) => {\n     passport.authenticate('local.signin', async (err, user, info) => {\n         try {\n             if (err) {\n-                await recordAudit('login', null, null, { message: 'Error en autenticación', error: err.message });\n+                await recordAudit('login', null, null, null, { message: 'Error en autenticación', error: err.message });\n                 return next(err);\n             }\n             if (!user) {\n                 const auditDetails = { message: 'Autenticación fallida' };\n                 if (info && info.message === 'Usuario no encontrado') {\n                     auditDetails.message = 'Usuario no encontrado';\n-                    await recordAudit('login', null, null, auditDetails);\n+                    await recordAudit('login', null, null, null, auditDetails);\n                     return res.status(401).json({ message: 'Usuario no encontrado' });\n                 }\n                 if (info && info.message === 'Contraseña incorrecta') {\n                     auditDetails.message = 'Contraseña incorrecta';\n-                    await recordAudit('login', null, null, auditDetails);\n+                    await recordAudit('login', null, null, null, auditDetails);\n                     return res.status(401).json({ message: 'Contraseña incorrecta' });\n                 }\n-                await recordAudit('login', null, null, auditDetails);\n+                await recordAudit('login', null, null, null, auditDetails);\n                 return res.status(401).json({ message: 'Autenticación fallida' });\n             }\n             req.login(user, { session: false }, async (error) => {\n                 if (error) {\n-                    await recordAudit('login', null, user._id, { message: 'Error en autenticación', error: error.message });\n+                    await recordAudit('login', null, null, user._id, { message: 'Error en autenticación', error: error.message });\n                     return next(error);\n                 }\n                 \n                 const body = { _id: user._id, email: user.email, role: user.role };\n@@ -83,9 +83,9 @@\n                 await recordAudit('login', charityId, null, userId, { message: 'Inicio de sesión exitoso' });\n                 return res.json({ token });\n             });\n         } catch (error) {\n-            await recordAudit('login', null, null, { message: 'Error en autenticación', error: error.message });\n+            await recordAudit('login', null, null, null, { message: 'Error en autenticación', error: error.message });\n             return next(error);\n         }\n     })(req, res, next);\n });\n"
                },
                {
                    "date": 1732005660052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import express from 'express'\n+const router = express.Router();\n+import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n+import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n+import passport from 'passport';\n+import jwt from 'jsonwebtoken';\n+import { URLSearchParams } from 'url';\n+import axios from 'axios';\n+import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n+import recordAudit from '../lib/recordAudit.js';\n+\n+\n+\n+\n+\n+router.post('/signup', (req, res, next) => {\n+    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n+        if (err) {\n+            return next(err);\n+        }\n+        if (!user) {\n+            return res.status(400).json({ message: info.message });\n+        }\n+        res.json({\n+            message: 'Signup successful',\n+            user: user\n+        });\n+    })(req, res, next);\n+});\n+\n+\n+router.post('/:id/update', async(req, res, next) => {\n+    try {\n+        const updates = req.body;\n+        console.log(updates);\n+        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n+        if (!charity) {\n+            return res.status(404).send(\"ONG no encontrada\");\n+        }\n+        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n+        \n+    } catch (error) {\n+        return res.status(404).send(\"ONG no encontrada\");\n+    }\n+});\n+\n+router.post('/signin', async (req, res, next) => {\n+    passport.authenticate('local.signin', async (err, user, info) => {\n+        try {\n+            if (err) {\n+                await recordAudit('login', null, null, null, { message: 'Error en autenticación', error: err.message });\n+                return next(err);\n+            }\n+            if (!user) {\n+                const auditDetails = { message: 'Autenticación fallida' };\n+                if (info && info.message === 'Usuario no encontrado') {\n+                    auditDetails.message = 'Usuario no encontrado';\n+                    await recordAudit('login', null, null, null, auditDetails);\n+                    return res.status(401).json({ message: 'Usuario no encontrado' });\n+                }\n+                if (info && info.message === 'Contraseña incorrecta') {\n+                    auditDetails.message = 'Contraseña incorrecta';\n+                    await recordAudit('login', null, null, null, auditDetails);\n+                    return res.status(401).json({ message: 'Contraseña incorrecta' });\n+                }\n+                await recordAudit('login', null, null, null, auditDetails);\n+                return res.status(401).json({ message: 'Autenticación fallida' });\n+            }\n+            req.login(user, { session: false }, async (error) => {\n+                if (error) {\n+                    await recordAudit('login', null, null, user._id, { message: 'Error en autenticación', error: error.message });\n+                    return next(error);\n+                }\n+                \n+                const body = { _id: user._id, email: user.email, role: user.role };\n+                const token = jwt.sign({ user: body }, 'top_secret');\n+                \n+                // Verificar si el ID pertenece a un usuario o a una organización benéfica\n+                const charity = await Charity.findById(user._id);\n+                const userId = charity ? null : user._id;\n+                const charityId = charity ? user._id : null;\n+\n+                await recordAudit('login', charityId, null, userId, { message: 'Inicio de sesión exitoso' });\n+                return res.json({ token });\n+            });\n+        } catch (error) {\n+            await recordAudit('login', null, null, null, { message: 'Error en autenticación', error: error.message });\n+            return next(error);\n+        }\n+    })(req, res, next);\n+});\n+\n+\n+\n+\n+\n+\n+\n+// Asegúrate de ajustar la ruta según tu estructura de proyecto\n+\n+router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n+    try {\n+        const userId = req.user._id;\n+        let user = await User.findById(userId);\n+\n+        if (user) {\n+            res.json({\n+                message: 'You made it to the secure route',\n+                user: {\n+                    id: user._id,\n+                    email: user.email,\n+                    dni: user.dni,\n+                    apellido: user.apellido,\n+                    nombre: user.nombre,\n+                    role: user.role\n+                    us\n+                },\n+                token: req.query.secret_token\n+            });\n+        } else {\n+            let charity = await Charity.findById(userId);\n+            if (charity) {\n+                res.json({\n+                    message: 'You made it to the secure route',\n+                    charity: {\n+                        id: charity._id,\n+                        nombre: charity.nombre,\n+                        descripcion: charity.descripcion,\n+                        email: charity.email,\n+                        direccion: charity.direccion,\n+                        telefono: charity.telefono,\n+                        userType: charity.userType,\n+                        accessToken: charity.accessToken\n+                    },\n+                    token: req.query.secret_token\n+                });\n+            } else {\n+                res.status(404).json({ message: 'User or Charity not found' });\n+            }\n+        }\n+    } catch (error) {\n+        next(error);\n+    }\n+});\n+\n+\n+// Ruta para cerrar sesión\n+\n+// Ruta para cerrar sesión\n+router.post('/logout', (req, res) => {\n+    const token = req.query.secret_token;\n+    if (!token) {\n+        return res.status(400).json({ message: 'Token no proporcionado' });\n+    }\n+    try {\n+        revokeToken(token);\n+        res.json({ message: 'Sesión cerrada exitosamente' });\n+    } catch (err) {\n+        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n+    }\n+});\n+\n+\n+\n+//apartado de mercado pago\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732171001922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n \n router.post('/:id/update', async(req, res, next) => {\n     try {\n         const updates = req.body;\n-        console.log(updates);\n         const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n         if (!charity) {\n             return res.status(404).send(\"ONG no encontrada\");\n         }\n@@ -111,10 +110,10 @@\n                     email: user.email,\n                     dni: user.dni,\n                     apellido: user.apellido,\n                     nombre: user.nombre,\n-                    role: user.role\n-                    us\n+                    role: user.role,\n+                    userType: user.userType,\n                 },\n                 token: req.query.secret_token\n             });\n         } else {\n@@ -164,580 +163,5 @@\n \n //apartado de mercado pago\n \n \n-export default router;\n-import express from 'express'\n-const router = express.Router();\n-import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n-import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n-import passport from 'passport';\n-import jwt from 'jsonwebtoken';\n-import { URLSearchParams } from 'url';\n-import axios from 'axios';\n-import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n-import recordAudit from '../lib/recordAudit.js';\n-\n-\n-\n-\n-\n-router.post('/signup', (req, res, next) => {\n-    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n-        if (err) {\n-            return next(err);\n-        }\n-        if (!user) {\n-            return res.status(400).json({ message: info.message });\n-        }\n-        res.json({\n-            message: 'Signup successful',\n-            user: user\n-        });\n-    })(req, res, next);\n-});\n-\n-\n-router.post('/:id/update', async(req, res, next) => {\n-    try {\n-        const updates = req.body;\n-        console.log(updates);\n-        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n-        if (!charity) {\n-            return res.status(404).send(\"ONG no encontrada\");\n-        }\n-        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n-        \n-    } catch (error) {\n-        return res.status(404).send(\"ONG no encontrada\");\n-    }\n-});\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-// Asegúrate de ajustar la ruta según tu estructura de proyecto\n-\n-router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n-    try {\n-        const userId = req.user._id;\n-        let user = await User.findById(userId);\n-\n-        if (user) {\n-            res.json({\n-                message: 'You made it to the secure route',\n-                user: {\n-                    id: user._id,\n-                    email: user.email,\n-                    dni: user.dni,\n-                    apellido: user.apellido,\n-                    nombre: user.nombre,\n-                    role: user.role\n-                },\n-                token: req.query.secret_token\n-            });\n-        } else {\n-            let charity = await Charity.findById(userId);\n-            if (charity) {\n-                res.json({\n-                    message: 'You made it to the secure route',\n-                    charity: {\n-                        id: charity._id,\n-                        nombre: charity.nombre,\n-                        descripcion: charity.descripcion,\n-                        email: charity.email,\n-                        direccion: charity.direccion,\n-                        telefono: charity.telefono,\n-                        userType: charity.userType,\n-                        accessToken: charity.accessToken\n-                    },\n-                    token: req.query.secret_token\n-                });\n-            } else {\n-                res.status(404).json({ message: 'User or Charity not found' });\n-            }\n-        }\n-    } catch (error) {\n-        next(error);\n-    }\n-});\n-\n-\n-// Ruta para cerrar sesión\n-\n-// Ruta para cerrar sesión\n-router.post('/logout', (req, res) => {\n-    const token = req.query.secret_token;\n-    if (!token) {\n-        return res.status(400).json({ message: 'Token no proporcionado' });\n-    }\n-    try {\n-        revokeToken(token);\n-        res.json({ message: 'Sesión cerrada exitosamente' });\n-    } catch (err) {\n-        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n-    }\n-});\n-\n-\n-\n-//apartado de mercado pago\n-\n-\n-export default router;\n-import express from 'express'\n-const router = express.Router();\n-import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n-import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n-import passport from 'passport';\n-import jwt from 'jsonwebtoken';\n-import { URLSearchParams } from 'url';\n-import axios from 'axios';\n-import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n-import recordAudit from '../lib/recordAudit.js';\n-\n-\n-\n-\n-\n-router.post('/signup', (req, res, next) => {\n-    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n-        if (err) {\n-            return next(err);\n-        }\n-        if (!user) {\n-            return res.status(400).json({ message: info.message });\n-        }\n-        res.json({\n-            message: 'Signup successful',\n-            user: user\n-        });\n-    })(req, res, next);\n-});\n-\n-\n-router.post('/:id/update', async(req, res, next) => {\n-    try {\n-        const updates = req.body;\n-        console.log(updates);\n-        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n-        if (!charity) {\n-            return res.status(404).send(\"ONG no encontrada\");\n-        }\n-        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n-        \n-    } catch (error) {\n-        return res.status(404).send(\"ONG no encontrada\");\n-    }\n-});\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-// Asegúrate de ajustar la ruta según tu estructura de proyecto\n-\n-router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n-    try {\n-        const userId = req.user._id;\n-        let user = await User.findById(userId);\n-\n-        if (user) {\n-            res.json({\n-                message: 'You made it to the secure route',\n-                user: {\n-                    id: user._id,\n-                    email: user.email,\n-                    dni: user.dni,\n-                    apellido: user.apellido,\n-                    nombre: user.nombre,\n-                    role: user.role\n-                },\n-                token: req.query.secret_token\n-            });\n-        } else {\n-            let charity = await Charity.findById(userId);\n-            if (charity) {\n-                res.json({\n-                    message: 'You made it to the secure route',\n-                    charity: {\n-                        id: charity._id,\n-                        nombre: charity.nombre,\n-                        descripcion: charity.descripcion,\n-                        email: charity.email,\n-                        direccion: charity.direccion,\n-                        telefono: charity.telefono,\n-                        userType: charity.userType,\n-                        accessToken: charity.accessToken\n-                    },\n-                    token: req.query.secret_token\n-                });\n-            } else {\n-                res.status(404).json({ message: 'User or Charity not found' });\n-            }\n-        }\n-    } catch (error) {\n-        next(error);\n-    }\n-});\n-\n-\n-// Ruta para cerrar sesión\n-\n-// Ruta para cerrar sesión\n-router.post('/logout', (req, res) => {\n-    const token = req.query.secret_token;\n-    if (!token) {\n-        return res.status(400).json({ message: 'Token no proporcionado' });\n-    }\n-    try {\n-        revokeToken(token);\n-        res.json({ message: 'Sesión cerrada exitosamente' });\n-    } catch (err) {\n-        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n-    }\n-});\n-\n-\n-\n-//apartado de mercado pago\n-\n-\n-export default router;\n-import express from 'express'\n-const router = express.Router();\n-import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n-import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n-import passport from 'passport';\n-import jwt from 'jsonwebtoken';\n-import { URLSearchParams } from 'url';\n-import axios from 'axios';\n-import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n-import recordAudit from '../lib/recordAudit.js';\n-\n-\n-\n-\n-\n-router.post('/signup', (req, res, next) => {\n-    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n-        if (err) {\n-            return next(err);\n-        }\n-        if (!user) {\n-            return res.status(400).json({ message: info.message });\n-        }\n-        res.json({\n-            message: 'Signup successful',\n-            user: user\n-        });\n-    })(req, res, next);\n-});\n-\n-\n-router.post('/:id/update', async(req, res, next) => {\n-    try {\n-        const updates = req.body;\n-        console.log(updates);\n-        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n-        if (!charity) {\n-            return res.status(404).send(\"ONG no encontrada\");\n-        }\n-        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n-        \n-    } catch (error) {\n-        return res.status(404).send(\"ONG no encontrada\");\n-    }\n-});\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-router.post('/signin', async (req, res, next) => {\n-    passport.authenticate('local.signin', async (err, user, info) => {\n-        try {\n-            if (err) {\n-                return next(err);\n-            }\n-            if (!user) {\n-                // Verifica si el error es debido a un email incorrecto o una contraseña incorrecta\n-                if (info && info.message === 'Usuario no encontrado') {\n-                    return res.status(401).json({ message: 'Usuario no encontrado' });\n-                }\n-                if (info && info.message === 'Contraseña incorrecta') {\n-                    return res.status(401).json({ message: 'Contraseña incorrecta' });\n-                }\n-                return res.status(401).json({ message: 'Autenticación fallida' });\n-            }\n-            req.login(user, { session: false }, async (error) => {\n-                if (error) return next(error);\n-                \n-                const body = { _id: user._id, email: user.email, role: user.role };\n-                const token = jwt.sign({ user: body }, 'top_secret');\n-                \n-                return res.json({ token });\n-            });\n-        } catch (error) {\n-            return next(error);\n-        }\n-    })(req, res, next);\n-});\n-\n-\n-// Asegúrate de ajustar la ruta según tu estructura de proyecto\n-\n-router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n-    try {\n-        const userId = req.user._id;\n-        let user = await User.findById(userId);\n-\n-        if (user) {\n-            res.json({\n-                message: 'You made it to the secure route',\n-                user: {\n-                    id: user._id,\n-                    email: user.email,\n-                    dni: user.dni,\n-                    apellido: user.apellido,\n-                    nombre: user.nombre,\n-                    role: user.role\n-                },\n-                token: req.query.secret_token\n-            });\n-        } else {\n-            let charity = await Charity.findById(userId);\n-            if (charity) {\n-                res.json({\n-                    message: 'You made it to the secure route',\n-                    charity: {\n-                        id: charity._id,\n-                        nombre: charity.nombre,\n-                        descripcion: charity.descripcion,\n-                        email: charity.email,\n-                        direccion: charity.direccion,\n-                        telefono: charity.telefono,\n-                        userType: charity.userType,\n-                        accessToken: charity.accessToken\n-                    },\n-                    token: req.query.secret_token\n-                });\n-            } else {\n-                res.status(404).json({ message: 'User or Charity not found' });\n-            }\n-        }\n-    } catch (error) {\n-        next(error);\n-    }\n-});\n-\n-\n-// Ruta para cerrar sesión\n-\n-// Ruta para cerrar sesión\n-router.post('/logout', (req, res) => {\n-    const token = req.query.secret_token;\n-    if (!token) {\n-        return res.status(400).json({ message: 'Token no proporcionado' });\n-    }\n-    try {\n-        revokeToken(token);\n-        res.json({ message: 'Sesión cerrada exitosamente' });\n-    } catch (err) {\n-        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n-    }\n-});\n-\n-\n-\n-//apartado de mercado pago\n-\n-\n-export default router;\n-import express from 'express'\n-const router = express.Router();\n-import User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\n-import Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\n-import passport from 'passport';\n-import jwt from 'jsonwebtoken';\n-import { URLSearchParams } from 'url';\n-import axios from 'axios';\n-import { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n-\n-\n-\n-\n-\n-router.post('/signup', (req, res, next) => {\n-    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n-        if (err) {\n-            return next(err);\n-        }\n-        if (!user) {\n-            return res.status(400).json({ message: info.message });\n-        }\n-        res.json({\n-            message: 'Signup successful',\n-            user: user\n-        });\n-    })(req, res, next);\n-});\n-\n-\n-router.post('/:id/update', async(req, res, next) => {\n-    try {\n-        const updates = req.body;\n-        console.log(updates);\n-        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n-        if (!charity) {\n-            return res.status(404).send(\"ONG no encontrada\");\n-        }\n-        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n-        \n-    } catch (error) {\n-        return res.status(404).send(\"ONG no encontrada\");\n-    }\n-});\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-router.post('/signin', async (req, res, next) => {\n-    passport.authenticate('local.signin', async (err, user, info) => {\n-        try {\n-            if (err) {\n-                await recordAudit('login', null, null, null, { message: 'Error en autenticación', error: err.message });\n-                return next(err);\n-            }\n-            if (!user) {\n-                const auditDetails = { message: 'Autenticación fallida' };\n-                if (info && info.message === 'Usuario no encontrado') {\n-                    auditDetails.message = 'Usuario no encontrado';\n-                    await recordAudit('login', null, null, null, auditDetails);\n-                    return res.status(401).json({ message: 'Usuario no encontrado' });\n-                }\n-                if (info && info.message === 'Contraseña incorrecta') {\n-                    auditDetails.message = 'Contraseña incorrecta';\n-                    await recordAudit('login', null, null, null, auditDetails);\n-                    return res.status(401).json({ message: 'Contraseña incorrecta' });\n-                }\n-                await recordAudit('login', null, null, null, auditDetails);\n-                return res.status(401).json({ message: 'Autenticación fallida' });\n-            }\n-            req.login(user, { session: false }, async (error) => {\n-                if (error) {\n-                    await recordAudit('login', null, null, user._id, { message: 'Error en autenticación', error: error.message });\n-                    return next(error);\n-                }\n-                \n-                const body = { _id: user._id, email: user.email, role: user.role };\n-                const token = jwt.sign({ user: body }, 'top_secret');\n-                \n-                // Verificar si el ID pertenece a un usuario o a una organización benéfica\n-                const charity = await Charity.findById(user._id);\n-                const userId = charity ? null : user._id;\n-                const charityId = charity ? user._id : null;\n-\n-                await recordAudit('login', charityId, null, userId, { message: 'Inicio de sesión exitoso' });\n-                return res.json({ token });\n-            });\n-        } catch (error) {\n-            await recordAudit('login', null, null, null, { message: 'Error en autenticación', error: error.message });\n-            return next(error);\n-        }\n-    })(req, res, next);\n-});\n-\n-\n-// Asegúrate de ajustar la ruta según tu estructura de proyecto\n-\n-router.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n-    try {\n-        const userId = req.user._id;\n-        let user = await User.findById(userId);\n-\n-        if (user) {\n-            res.json({\n-                message: 'You made it to the secure route',\n-                user: {\n-                    id: user._id,\n-                    email: user.email,\n-                    dni: user.dni,\n-                    apellido: user.apellido,\n-                    nombre: user.nombre,\n-                    role: user.role\n-                },\n-                token: req.query.secret_token\n-            });\n-        } else {\n-            let charity = await Charity.findById(userId);\n-            if (charity) {\n-                res.json({\n-                    message: 'You made it to the secure route',\n-                    charity: {\n-                        id: charity._id,\n-                        nombre: charity.nombre,\n-                        descripcion: charity.descripcion,\n-                        email: charity.email,\n-                        direccion: charity.direccion,\n-                        telefono: charity.telefono,\n-                        userType: charity.userType,\n-                        accessToken: charity.accessToken\n-                    },\n-                    token: req.query.secret_token\n-                });\n-            } else {\n-                res.status(404).json({ message: 'User or Charity not found' });\n-            }\n-        }\n-    } catch (error) {\n-        next(error);\n-    }\n-});\n-\n-\n-// Ruta para cerrar sesión\n-\n-// Ruta para cerrar sesión\n-router.post('/logout', (req, res) => {\n-    const token = req.query.secret_token;\n-    if (!token) {\n-        return res.status(400).json({ message: 'Token no proporcionado' });\n-    }\n-    try {\n-        revokeToken(token);\n-        res.json({ message: 'Sesión cerrada exitosamente' });\n-    } catch (err) {\n-        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n-    }\n-});\n-\n-\n-\n-//apartado de mercado pago\n-\n-\n export default router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731015160541,
            "name": "Commit-0",
            "content": "import express from 'express'\nconst router = express.Router();\nimport User from '../models/user.js'; // Asegúrate de que la ruta sea correcta\nimport Charity from '../models/charity.js'; // Asegúrate de que la ruta sea correcta\nimport passport from 'passport';\nimport jwt from 'jsonwebtoken';\nimport { URLSearchParams } from 'url';\nimport axios from 'axios';\nimport { revokeToken, checkRevokedToken } from '../lib/revokedTokens.js';\n\n\n\n\n\nrouter.post('/signup', (req, res, next) => {\n    passport.authenticate('local.signup', { session: false }, (err, user, info) => {\n        if (err) {\n            return next(err);\n        }\n        if (!user) {\n            return res.status(400).json({ message: info.message });\n        }\n        res.json({\n            message: 'Signup successful',\n            user: user\n        });\n    })(req, res, next);\n});\n\n\nrouter.post('/:id/update', async(req, res, next) => {\n    try {\n        const updates = req.body;\n        console.log(updates);\n        const charity = await Charity.findByIdAndUpdate(req.params.id, updates, { new: true });\n        if (!charity) {\n            return res.status(404).send(\"ONG no encontrada\");\n        }\n        res.status(200).send(\"Perfil actualizado con exito, \" + charity);\n        \n    } catch (error) {\n        return res.status(404).send(\"ONG no encontrada\");\n    }\n});\n\n\n\n\n\n\n\n\n\n\nrouter.post('/signin', async (req, res, next) => {\n    passport.authenticate('local.signin', async (err, user, info) => {\n        try {\n            if (err) {\n                return next(err);\n            }\n            if (!user) {\n                // Verifica si el error es debido a un email incorrecto o una contraseña incorrecta\n                if (info && info.message === 'Usuario no encontrado') {\n                    return res.status(401).json({ message: 'Usuario no encontrado' });\n                }\n                if (info && info.message === 'Contraseña incorrecta') {\n                    return res.status(401).json({ message: 'Contraseña incorrecta' });\n                }\n                return res.status(401).json({ message: 'Autenticación fallida' });\n            }\n            req.login(user, { session: false }, async (error) => {\n                if (error) return next(error);\n                \n                const body = { _id: user._id, email: user.email, role: user.role };\n                const token = jwt.sign({ user: body }, 'top_secret');\n                \n                return res.json({ token });\n            });\n        } catch (error) {\n            return next(error);\n        }\n    })(req, res, next);\n});\n\n\n// Asegúrate de ajustar la ruta según tu estructura de proyecto\n\nrouter.get('/profile', passport.authenticate('jwt', { session: false }), async (req, res, next) => {\n    try {\n        const userId = req.user._id;\n        let user = await User.findById(userId);\n\n        if (user) {\n            res.json({\n                message: 'You made it to the secure route',\n                user: {\n                    id: user._id,\n                    email: user.email,\n                    dni: user.dni,\n                    apellido: user.apellido,\n                    nombre: user.nombre,\n                    role: user.role\n                },\n                token: req.query.secret_token\n            });\n        } else {\n            let charity = await Charity.findById(userId);\n            if (charity) {\n                res.json({\n                    message: 'You made it to the secure route',\n                    charity: {\n                        id: charity._id,\n                        nombre: charity.nombre,\n                        descripcion: charity.descripcion,\n                        email: charity.email,\n                        direccion: charity.direccion,\n                        telefono: charity.telefono,\n                        userType: charity.userType,\n                        accessToken: charity.accessToken\n                    },\n                    token: req.query.secret_token\n                });\n            } else {\n                res.status(404).json({ message: 'User or Charity not found' });\n            }\n        }\n    } catch (error) {\n        next(error);\n    }\n});\n\n\n// Ruta para cerrar sesión\n\n// Ruta para cerrar sesión\nrouter.post('/logout', (req, res) => {\n    const token = req.query.secret_token;\n    if (!token) {\n        return res.status(400).json({ message: 'Token no proporcionado' });\n    }\n    try {\n        revokeToken(token);\n        res.json({ message: 'Sesión cerrada exitosamente' });\n    } catch (err) {\n        res.status(500).json({ message: `Error al cerrar sesión: ${err.message}` });\n    }\n});\n\n\n\n//apartado de mercado pago\n\n\nexport default router;"
        }
    ]
}