{
    "sourceFile": "src/routes/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1731379414163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731379429167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import express from 'express'\n+const router = express.Router();\n+\n+\n+router.get('/',(req, res)=>{\n+    res.send('<h1>Esto es la pagina principal </h1>')\n+});\n+\n+\n+\n+import Message from '../models/message.js';\n+\n+\n+\n+router.get('/messages', async (req, res) => {\n+  const { receiverId, senderId } = req.query;\n+  try {\n+    const messages = await Message.find({\n+      $or: [\n+        { senderId, receiverId },\n+        { senderId: receiverId, receiverId: senderId }\n+      ]\n+    }).sort({ createdAt: 1 });\n+    res.json(messages);\n+  } catch (error) {\n+    res.status(500).json({ error: 'Error fetching messages' });\n+  }\n+});\n+\n+export default router;\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731379434650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,18 +29,4 @@\n \n export default router;\n \n \n-export default router;\n-import express from 'express'\n-const router = express.Router();\n-\n-\n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n-});\n-\n-\n-\n-\n-\n-export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731379439745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n \n import Message from '../models/message.js';\n \n \n-\n router.get('/messages', async (req, res) => {\n   const { receiverId, senderId } = req.query;\n   try {\n     const messages = await Message.find({\n"
                },
                {
                    "date": 1731381735863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n \n \n import Message from '../models/message.js';\n \n-\n router.get('/messages', async (req, res) => {\n   const { receiverId, senderId } = req.query;\n   try {\n     const messages = await Message.find({\n"
                },
                {
                    "date": 1731381741718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,12 @@\n import express from 'express'\n const router = express.Router();\n+import Message from '../models/message.js';\n \n-\n router.get('/',(req, res)=>{\n     res.send('<h1>Esto es la pagina principal </h1>')\n });\n \n-\n-\n-import Message from '../models/message.js';\n-\n router.get('/messages', async (req, res) => {\n   const { receiverId, senderId } = req.query;\n   try {\n     const messages = await Message.find({\n"
                },
                {
                    "date": 1731381869572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,34 @@\n     res.status(500).json({ error: 'Error fetching messages' });\n   }\n });\n \n+router.get('/chats', async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'name avatar')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: otherParticipant.name,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: 0, // Aquí puedes implementar la lógica para contar los mensajes no leídos\n+          isActive: true, // Aquí puedes implementar la lógica para determinar si el usuario está activo\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n export default router;\n \n \n"
                },
                {
                    "date": 1731382069166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n router.get('/chats', async (req, res) => {\n     const userId = req.query.userId;\n     try {\n       const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'name avatar')\n+        .populate('participants', 'name avatar isActive')\n         .populate('lastMessage')\n         .sort({ updatedAt: -1 });\n   \n       const chatPreviews = chats.map(chat => {\n@@ -36,10 +36,10 @@\n           name: otherParticipant.name,\n           avatar: otherParticipant.avatar,\n           lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n           time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: 0, // Aquí puedes implementar la lógica para contar los mensajes no leídos\n-          isActive: true, // Aquí puedes implementar la lógica para determinar si el usuario está activo\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n         };\n       });\n   \n       res.json(chatPreviews);\n"
                },
                {
                    "date": 1731382205527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,49 +5,71 @@\n router.get('/',(req, res)=>{\n     res.send('<h1>Esto es la pagina principal </h1>')\n });\n \n-router.get('/messages', async (req, res) => {\n-  const { receiverId, senderId } = req.query;\n-  try {\n-    const messages = await Message.find({\n-      $or: [\n-        { senderId, receiverId },\n-        { senderId: receiverId, receiverId: senderId }\n-      ]\n-    }).sort({ createdAt: 1 });\n-    res.json(messages);\n-  } catch (error) {\n-    res.status(500).json({ error: 'Error fetching messages' });\n-  }\n+import mongoose from 'mongoose';\n+import bcrypt from 'bcrypt';\n+\n+const { Schema } = mongoose;\n+\n+const UserSchema = new Schema({\n+  nombre: {\n+    type: String,\n+    required: true\n+  },\n+  apellido: {\n+    type: String,\n+    required: true\n+  },\n+  dni: {\n+    type: String,\n+    required: true,\n+    unique: true\n+  },\n+  email: {\n+    type: String,\n+    required: true,\n+    unique: true\n+  },\n+  password: {\n+    type: String,\n+    required: true\n+  },\n+  userType: { type: String, required: true}\n+}, {\n+  timestamps: true\n });\n \n-router.get('/chats', async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'name avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: otherParticipant.name,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n-      });\n-  \n-      res.json(chatPreviews);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n-    }\n-  });\n+UserSchema.pre(\"save\", async function(next) {\n \n+const hash = await bcrypt.hash(this.password, 10);\n+this.password = hash;\n+next();\n+});\n+\n+\n+UserSchema.methods.isValidPassword = async function(password) {\n+    const user = this;\n+    const compare = await bcrypt.compare(password, user.password);\n+    return compare;\n+};\n+\n+export default mongoose.model(\"User\", UserSchema);\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n export default router;\n \n \n"
                },
                {
                    "date": 1731382227225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import express from 'express'\n+const router = express.Router();\n+import Message from '../models/message.js';\n+\n+router.get('/',(req, res)=>{\n+    res.send('<h1>Esto es la pagina principal </h1>')\n+});\n+\n+router.get('/messages', async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+      const messages = await Message.find({\n+        $or: [\n+          { senderId, receiverId },\n+          { senderId: receiverId, receiverId: senderId }\n+        ]\n+      }).sort({ createdAt: 1 });\n+      res.json(messages);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching messages' });\n+    }\n+  });\n+  \n+  router.get('/chats', async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre apellido avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n+export default router;\n+\n+\n"
                },
                {
                    "date": 1731384502386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+import express from 'express'\n+const router = express.Router();\n+import Message from '../models/message.js';\n+\n+router.get('/',(req, res)=>{\n+    res.send('<h1>Esto es la pagina principal </h1>')\n+});\n+\n+\n+\n+\n+router.get('/messages', async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+      const messages = await Message.find({\n+        $or: [\n+          { senderId, receiverId },\n+          { senderId: receiverId, receiverId: senderId }\n+        ]\n+      }).sort({ createdAt: 1 });\n+      res.json(messages);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching messages' });\n+    }\n+  });\n+  \n+  router.get('/chats', async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre apellido avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n+export default router;\n+\n+\n"
                },
                {
                    "date": 1731384511713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,132 +53,4 @@\n \n export default router;\n \n \n-import express from 'express'\n-const router = express.Router();\n-import Message from '../models/message.js';\n-\n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n-});\n-\n-router.get('/messages', async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-      const messages = await Message.find({\n-        $or: [\n-          { senderId, receiverId },\n-          { senderId: receiverId, receiverId: senderId }\n-        ]\n-      }).sort({ createdAt: 1 });\n-      res.json(messages);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching messages' });\n-    }\n-  });\n-  \n-  router.get('/chats', async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'nombre apellido avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n-      });\n-  \n-      res.json(chatPreviews);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n-    }\n-  });\n-\n-export default router;\n-\n-\n-import express from 'express'\n-const router = express.Router();\n-import Message from '../models/message.js';\n-\n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n-});\n-\n-import mongoose from 'mongoose';\n-import bcrypt from 'bcrypt';\n-\n-const { Schema } = mongoose;\n-\n-const UserSchema = new Schema({\n-  nombre: {\n-    type: String,\n-    required: true\n-  },\n-  apellido: {\n-    type: String,\n-    required: true\n-  },\n-  dni: {\n-    type: String,\n-    required: true,\n-    unique: true\n-  },\n-  email: {\n-    type: String,\n-    required: true,\n-    unique: true\n-  },\n-  password: {\n-    type: String,\n-    required: true\n-  },\n-  userType: { type: String, required: true}\n-}, {\n-  timestamps: true\n-});\n-\n-UserSchema.pre(\"save\", async function(next) {\n-\n-const hash = await bcrypt.hash(this.password, 10);\n-this.password = hash;\n-next();\n-});\n-\n-\n-UserSchema.methods.isValidPassword = async function(password) {\n-    const user = this;\n-    const compare = await bcrypt.compare(password, user.password);\n-    return compare;\n-};\n-\n-export default mongoose.model(\"User\", UserSchema);\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-export default router;\n-\n-\n"
                },
                {
                    "date": 1731384527111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import express from 'express'\n+const router = express.Router();\n+import Message from '../models/message.js';\n+\n+router.get('/',(req, res)=>{\n+    res.send('<h1>Esto es la pagina principal </h1>')\n+});\n+\n+\n+\n+\n+router.get('/messages', async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+      const messages = await Message.find({\n+        $or: [\n+          { senderId, receiverId },\n+          { senderId: receiverId, receiverId: senderId }\n+        ]\n+      }).sort({ createdAt: 1 });\n+      res.json(messages);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching messages' });\n+    }\n+  });\n+  \n+  router.get('/chats', async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre apellido avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n+\n+\n+\n+\n+  \n+\n+export default router;\n+\n+\n"
                },
                {
                    "date": 1731384666607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import express from 'express'\n+const router = express.Router();\n+import Message from '../models/message.js';\n+\n+router.get('/',(req, res)=>{\n+    res.send('<h1>Esto es la pagina principal </h1>')\n+});\n+\n+\n+\n+\n+router.get('/messages', async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+      const messages = await Message.find({\n+        $or: [\n+          { senderId, receiverId },\n+          { senderId: receiverId, receiverId: senderId }\n+        ]\n+      }).sort({ createdAt: 1 });\n+      res.json(messages);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching messages' });\n+    }\n+  });\n+  \n+  router.get('/chats', async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre apellido avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n+\n+  router.post('/chats', async (req, res) => {\n+    const { userId, receiverId } = req.body;\n+    try {\n+      // Verifica si ya existe un chat entre estos dos usuarios\n+      let chat = await Chat.findOne({\n+        participants: { $all: [userId, receiverId] }\n+      });\n+  \n+      if (!chat) {\n+        // Si no existe, crea un nuevo chat\n+        chat = new Chat({\n+          participants: [userId, receiverId],\n+          lastMessage: null,\n+          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n+        });\n+        await chat.save();\n+      }\n+  \n+      res.status(201).json(chat);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error creating or fetching chat' });\n+    }\n+  });\n+  \n+\n+\n+\n+\n+export default router;\n+\n+\n"
                },
                {
                    "date": 1731384973553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,32 +51,10 @@\n     }\n   });\n \n \n-  router.post('/chats', async (req, res) => {\n-    const { userId, receiverId } = req.body;\n-    try {\n-      // Verifica si ya existe un chat entre estos dos usuarios\n-      let chat = await Chat.findOne({\n-        participants: { $all: [userId, receiverId] }\n-      });\n+\n   \n-      if (!chat) {\n-        // Si no existe, crea un nuevo chat\n-        chat = new Chat({\n-          participants: [userId, receiverId],\n-          lastMessage: null,\n-          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n-        });\n-        await chat.save();\n-      }\n-  \n-      res.status(201).json(chat);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error creating or fetching chat' });\n-    }\n-  });\n-  \n \n \n \n \n"
                },
                {
                    "date": 1731384983554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+import express from 'express'\n+const router = express.Router();\n+import Message from '../models/message.js';\n+\n+router.get('/',(req, res)=>{\n+    res.send('<h1>Esto es la pagina principal </h1>')\n+});\n+\n+\n+\n+\n+router.get('/messages', async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+      const messages = await Message.find({\n+        $or: [\n+          { senderId, receiverId },\n+          { senderId: receiverId, receiverId: senderId }\n+        ]\n+      }).sort({ createdAt: 1 });\n+      res.json(messages);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching messages' });\n+    }\n+  });\n+  \n+  router.get('/chats', async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre apellido avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n+\n+\n+  router.post('/chats', async (req, res) => {\n+    const { userId, receiverId } = req.body;\n+    try {\n+      // Verifica si ya existe un chat entre estos dos usuarios\n+      let chat = await Chat.findOne({\n+        participants: { $all: [userId, receiverId] }\n+      });\n+  \n+      if (!chat) {\n+        // Si no existe, crea un nuevo chat\n+        chat = new Chat({\n+          participants: [userId, receiverId],\n+          lastMessage: null,\n+          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n+        });\n+        await chat.save();\n+      }\n+  \n+      res.status(201).json(chat);\n+    } catch (error) {\n+      console.error('Error creating or fetching chat:', error);\n+      res.status(500).json({ error: 'Error creating or fetching chat' });\n+    }\n+  });\n+\n+\n+\n+\n+export default router;\n+\n+\n"
                },
                {
                    "date": 1731384993634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,267 +1,81 @@\n-import express from 'express'\n+import express from \"express\";\n const router = express.Router();\n-import Message from '../models/message.js';\n+import Message from \"../models/message.js\";\n \n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n+router.get(\"/\", (req, res) => {\n+  res.send(\"<h1>Esto es la pagina principal </h1>\");\n });\n \n-\n-\n-\n-router.get('/messages', async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-      const messages = await Message.find({\n-        $or: [\n-          { senderId, receiverId },\n-          { senderId: receiverId, receiverId: senderId }\n-        ]\n-      }).sort({ createdAt: 1 });\n-      res.json(messages);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching messages' });\n-    }\n-  });\n-  \n-  router.get('/chats', async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'nombre apellido avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n-      });\n-  \n-      res.json(chatPreviews);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n-    }\n-  });\n-\n-\n-\n-  router.post('/chats', async (req, res) => {\n-    const { userId, receiverId } = req.body;\n-    try {\n-      // Verifica si ya existe un chat entre estos dos usuarios\n-      let chat = await Chat.findOne({\n-        participants: { $all: [userId, receiverId] }\n-      });\n-  \n-      if (!chat) {\n-        // Si no existe, crea un nuevo chat\n-        chat = new Chat({\n-          participants: [userId, receiverId],\n-          lastMessage: null,\n-          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n-        });\n-        await chat.save();\n-      }\n-  \n-      res.status(201).json(chat);\n-    } catch (error) {\n-      console.error('Error creating or fetching chat:', error);\n-      res.status(500).json({ error: 'Error creating or fetching chat' });\n-    }\n-  });\n-\n-\n-\n-\n-export default router;\n-\n-\n-import express from 'express'\n-const router = express.Router();\n-import Message from '../models/message.js';\n-\n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n+router.get(\"/messages\", async (req, res) => {\n+  const { receiverId, senderId } = req.query;\n+  try {\n+    const messages = await Message.find({\n+      $or: [\n+        { senderId, receiverId },\n+        { senderId: receiverId, receiverId: senderId },\n+      ],\n+    }).sort({ createdAt: 1 });\n+    res.json(messages);\n+  } catch (error) {\n+    res.status(500).json({ error: \"Error fetching messages\" });\n+  }\n });\n \n+router.get(\"/chats\", async (req, res) => {\n+  const userId = req.query.userId;\n+  try {\n+    const chats = await Chat.find({ participants: userId })\n+      .populate(\"participants\", \"nombre apellido avatar isActive\")\n+      .populate(\"lastMessage\")\n+      .sort({ updatedAt: -1 });\n \n+    const chatPreviews = chats.map((chat) => {\n+      const otherParticipant = chat.participants.find(\n+        (participant) => participant._id.toString() !== userId\n+      );\n+      return {\n+        id: chat._id,\n+        name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+        avatar: otherParticipant.avatar,\n+        lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n+        time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+        unread: chat.unreadMessages.get(userId) || 0,\n+        isActive: otherParticipant.isActive,\n+      };\n+    });\n \n-\n-router.get('/messages', async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-      const messages = await Message.find({\n-        $or: [\n-          { senderId, receiverId },\n-          { senderId: receiverId, receiverId: senderId }\n-        ]\n-      }).sort({ createdAt: 1 });\n-      res.json(messages);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching messages' });\n-    }\n-  });\n-  \n-  router.get('/chats', async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'nombre apellido avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n-      });\n-  \n-      res.json(chatPreviews);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n-    }\n-  });\n-\n-\n-\n-  \n-\n-\n-\n-\n-export default router;\n-\n-\n-import express from 'express'\n-const router = express.Router();\n-import Message from '../models/message.js';\n-\n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n+    res.json(chatPreviews);\n+  } catch (error) {\n+    res.status(500).json({ error: \"Error fetching chats\" });\n+  }\n });\n \n+router.post(\"/chats\", async (req, res) => {\n+  const { userId, receiverId } = req.body;\n+  try {\n+    // Verifica si ya existe un chat entre estos dos usuarios\n+    let chat = await Chat.findOne({\n+      participants: { $all: [userId, receiverId] },\n+    });\n \n-\n-\n-router.get('/messages', async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-      const messages = await Message.find({\n-        $or: [\n-          { senderId, receiverId },\n-          { senderId: receiverId, receiverId: senderId }\n-        ]\n-      }).sort({ createdAt: 1 });\n-      res.json(messages);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching messages' });\n-    }\n-  });\n-  \n-  router.get('/chats', async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'nombre apellido avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n+    if (!chat) {\n+      // Si no existe, crea un nuevo chat\n+      chat = new Chat({\n+        participants: [userId, receiverId],\n+        lastMessage: null,\n+        unreadMessages: new Map([\n+          [userId, 0],\n+          [receiverId, 0],\n+        ]),\n       });\n-  \n-      res.json(chatPreviews);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n+      await chat.save();\n     }\n-  });\n \n-\n-\n-\n-\n-  \n-\n-export default router;\n-\n-\n-import express from 'express'\n-const router = express.Router();\n-import Message from '../models/message.js';\n-\n-router.get('/',(req, res)=>{\n-    res.send('<h1>Esto es la pagina principal </h1>')\n+    res.status(201).json(chat);\n+  } catch (error) {\n+    console.error(\"Error creating or fetching chat:\", error);\n+    res.status(500).json({ error: \"Error creating or fetching chat\" });\n+  }\n });\n \n-\n-\n-\n-router.get('/messages', async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-      const messages = await Message.find({\n-        $or: [\n-          { senderId, receiverId },\n-          { senderId: receiverId, receiverId: senderId }\n-        ]\n-      }).sort({ createdAt: 1 });\n-      res.json(messages);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching messages' });\n-    }\n-  });\n-  \n-  router.get('/chats', async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'nombre apellido avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n-      });\n-  \n-      res.json(chatPreviews);\n-    } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n-    }\n-  });\n-\n export default router;\n-\n-\n"
                },
                {
                    "date": 1731385005164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,80 +2,80 @@\n const router = express.Router();\n import Message from \"../models/message.js\";\n \n router.get(\"/\", (req, res) => {\n-  res.send(\"<h1>Esto es la pagina principal </h1>\");\n+    res.send(\"<h1>Esto es la pagina principal </h1>\");\n });\n \n router.get(\"/messages\", async (req, res) => {\n-  const { receiverId, senderId } = req.query;\n-  try {\n-    const messages = await Message.find({\n-      $or: [\n-        { senderId, receiverId },\n-        { senderId: receiverId, receiverId: senderId },\n-      ],\n-    }).sort({ createdAt: 1 });\n-    res.json(messages);\n-  } catch (error) {\n-    res.status(500).json({ error: \"Error fetching messages\" });\n-  }\n+    const { receiverId, senderId } = req.query;\n+    try {\n+        const messages = await Message.find({\n+            $or: [\n+                { senderId, receiverId },\n+                { senderId: receiverId, receiverId: senderId },\n+            ],\n+        }).sort({ createdAt: 1 });\n+        res.json(messages);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching messages\" });\n+    }\n });\n \n router.get(\"/chats\", async (req, res) => {\n-  const userId = req.query.userId;\n-  try {\n-    const chats = await Chat.find({ participants: userId })\n-      .populate(\"participants\", \"nombre apellido avatar isActive\")\n-      .populate(\"lastMessage\")\n-      .sort({ updatedAt: -1 });\n+    const userId = req.query.userId;\n+    try {\n+        const chats = await Chat.find({ participants: userId })\n+            .populate(\"participants\", \"nombre apellido avatar isActive\")\n+            .populate(\"lastMessage\")\n+            .sort({ updatedAt: -1 });\n \n-    const chatPreviews = chats.map((chat) => {\n-      const otherParticipant = chat.participants.find(\n-        (participant) => participant._id.toString() !== userId\n-      );\n-      return {\n-        id: chat._id,\n-        name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-        avatar: otherParticipant.avatar,\n-        lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n-        time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-        unread: chat.unreadMessages.get(userId) || 0,\n-        isActive: otherParticipant.isActive,\n-      };\n-    });\n+        const chatPreviews = chats.map((chat) => {\n+            const otherParticipant = chat.participants.find(\n+                (participant) => participant._id.toString() !== userId\n+            );\n+            return {\n+                id: chat._id,\n+                name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+                avatar: otherParticipant.avatar,\n+                lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n+                time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+                unread: chat.unreadMessages.get(userId) || 0,\n+                isActive: otherParticipant.isActive,\n+            };\n+        });\n \n-    res.json(chatPreviews);\n-  } catch (error) {\n-    res.status(500).json({ error: \"Error fetching chats\" });\n-  }\n+        res.json(chatPreviews);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching chats\" });\n+    }\n });\n \n router.post(\"/chats\", async (req, res) => {\n-  const { userId, receiverId } = req.body;\n-  try {\n-    // Verifica si ya existe un chat entre estos dos usuarios\n-    let chat = await Chat.findOne({\n-      participants: { $all: [userId, receiverId] },\n-    });\n+    const { userId, receiverId } = req.body;\n+    try {\n+        // Verifica si ya existe un chat entre estos dos usuarios\n+        let chat = await Chat.findOne({\n+            participants: { $all: [userId, receiverId] },\n+        });\n \n-    if (!chat) {\n-      // Si no existe, crea un nuevo chat\n-      chat = new Chat({\n-        participants: [userId, receiverId],\n-        lastMessage: null,\n-        unreadMessages: new Map([\n-          [userId, 0],\n-          [receiverId, 0],\n-        ]),\n-      });\n-      await chat.save();\n+        if (!chat) {\n+            // Si no existe, crea un nuevo chat\n+            chat = new Chat({\n+                participants: [userId, receiverId],\n+                lastMessage: null,\n+                unreadMessages: new Map([\n+                    [userId, 0],\n+                    [receiverId, 0],\n+                ]),\n+            });\n+            await chat.save();\n+        }\n+\n+        res.status(201).json(chat);\n+    } catch (error) {\n+        console.error(\"Error creating or fetching chat:\", error);\n+        res.status(500).json({ error: \"Error creating or fetching chat\" });\n     }\n-\n-    res.status(201).json(chat);\n-  } catch (error) {\n-    console.error(\"Error creating or fetching chat:\", error);\n-    res.status(500).json({ error: \"Error creating or fetching chat\" });\n-  }\n });\n \n export default router;\n"
                },
                {
                    "date": 1731385092135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n-\n+import Chat from \"../models/chat.js\";\n router.get(\"/\", (req, res) => {\n     res.send(\"<h1>Esto es la pagina principal </h1>\");\n });\n \n"
                },
                {
                    "date": 1731385101210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n import Chat from \"../models/chat.js\";\n+\n+\n+\n+\n router.get(\"/\", (req, res) => {\n     res.send(\"<h1>Esto es la pagina principal </h1>\");\n });\n \n"
                },
                {
                    "date": 1731385126581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import express from \"express\";\n+const router = express.Router();\n+import Message from \"../models/message.js\";\n+import Chat from \"../models\";\n+\n+\n+\n+\n+router.get(\"/\", (req, res) => {\n+    res.send(\"<h1>Esto es la pagina principal </h1>\");\n+});\n+\n+router.get(\"/messages\", async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+        const messages = await Message.find({\n+            $or: [\n+                { senderId, receiverId },\n+                { senderId: receiverId, receiverId: senderId },\n+            ],\n+        }).sort({ createdAt: 1 });\n+        res.json(messages);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching messages\" });\n+    }\n+});\n+\n+router.get(\"/chats\", async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+        const chats = await Chat.find({ participants: userId })\n+            .populate(\"participants\", \"nombre apellido avatar isActive\")\n+            .populate(\"lastMessage\")\n+            .sort({ updatedAt: -1 });\n+\n+        const chatPreviews = chats.map((chat) => {\n+            const otherParticipant = chat.participants.find(\n+                (participant) => participant._id.toString() !== userId\n+            );\n+            return {\n+                id: chat._id,\n+                name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+                avatar: otherParticipant.avatar,\n+                lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n+                time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+                unread: chat.unreadMessages.get(userId) || 0,\n+                isActive: otherParticipant.isActive,\n+            };\n+        });\n+\n+        res.json(chatPreviews);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching chats\" });\n+    }\n+});\n+\n+router.post(\"/chats\", async (req, res) => {\n+    const { userId, receiverId } = req.body;\n+    try {\n+        // Verifica si ya existe un chat entre estos dos usuarios\n+        let chat = await Chat.findOne({\n+            participants: { $all: [userId, receiverId] },\n+        });\n+\n+        if (!chat) {\n+            // Si no existe, crea un nuevo chat\n+            chat = new Chat({\n+                participants: [userId, receiverId],\n+                lastMessage: null,\n+                unreadMessages: new Map([\n+                    [userId, 0],\n+                    [receiverId, 0],\n+                ]),\n+            });\n+            await chat.save();\n+        }\n+\n+        res.status(201).json(chat);\n+    } catch (error) {\n+        console.error(\"Error creating or fetching chat:\", error);\n+        res.status(500).json({ error: \"Error creating or fetching chat\" });\n+    }\n+});\n+\n+export default router;\n"
                },
                {
                    "date": 1731385136161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n-import Chat from \"../models\";\n+import chat from \"../models/chats.js\";\n \n \n \n \n@@ -82,89 +82,4 @@\n     }\n });\n \n export default router;\n-import express from \"express\";\n-const router = express.Router();\n-import Message from \"../models/message.js\";\n-import Chat from \"../models/chat.js\";\n-\n-\n-\n-\n-router.get(\"/\", (req, res) => {\n-    res.send(\"<h1>Esto es la pagina principal </h1>\");\n-});\n-\n-router.get(\"/messages\", async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-        const messages = await Message.find({\n-            $or: [\n-                { senderId, receiverId },\n-                { senderId: receiverId, receiverId: senderId },\n-            ],\n-        }).sort({ createdAt: 1 });\n-        res.json(messages);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error fetching messages\" });\n-    }\n-});\n-\n-router.get(\"/chats\", async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-        const chats = await Chat.find({ participants: userId })\n-            .populate(\"participants\", \"nombre apellido avatar isActive\")\n-            .populate(\"lastMessage\")\n-            .sort({ updatedAt: -1 });\n-\n-        const chatPreviews = chats.map((chat) => {\n-            const otherParticipant = chat.participants.find(\n-                (participant) => participant._id.toString() !== userId\n-            );\n-            return {\n-                id: chat._id,\n-                name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-                avatar: otherParticipant.avatar,\n-                lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n-                time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-                unread: chat.unreadMessages.get(userId) || 0,\n-                isActive: otherParticipant.isActive,\n-            };\n-        });\n-\n-        res.json(chatPreviews);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error fetching chats\" });\n-    }\n-});\n-\n-router.post(\"/chats\", async (req, res) => {\n-    const { userId, receiverId } = req.body;\n-    try {\n-        // Verifica si ya existe un chat entre estos dos usuarios\n-        let chat = await Chat.findOne({\n-            participants: { $all: [userId, receiverId] },\n-        });\n-\n-        if (!chat) {\n-            // Si no existe, crea un nuevo chat\n-            chat = new Chat({\n-                participants: [userId, receiverId],\n-                lastMessage: null,\n-                unreadMessages: new Map([\n-                    [userId, 0],\n-                    [receiverId, 0],\n-                ]),\n-            });\n-            await chat.save();\n-        }\n-\n-        res.status(201).json(chat);\n-    } catch (error) {\n-        console.error(\"Error creating or fetching chat:\", error);\n-        res.status(500).json({ error: \"Error creating or fetching chat\" });\n-    }\n-});\n-\n-export default router;\n"
                },
                {
                    "date": 1731385165418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n-import chat from \"../models/chats.js\";\n+import Chat from \"../models/chats.js\";\n \n \n \n \n"
                },
                {
                    "date": 1731385215234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,10 @@\n+// FILE: src/routes/index.js\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n-import Chat from \"../models/chats.js\";\n+import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n \n-\n-\n-\n router.get(\"/\", (req, res) => {\n     res.send(\"<h1>Esto es la pagina principal </h1>\");\n });\n \n@@ -81,5 +79,5 @@\n         res.status(500).json({ error: \"Error creating or fetching chat\" });\n     }\n });\n \n-export default router;\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731385676980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,326 @@\n+// FILE: src/routes/index.js\n+import express from \"express\";\n+const router = express.Router();\n+import Message from \"../models/message.js\";\n+import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n+\n+router.get(\"/\", (req, res) => {\n+    res.send(\"<h1>Esto es la pagina principal </h1>\");\n+});\n+\n+router.get(\"/messages\", async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+        const messages = await Message.find({\n+            $or: [\n+                { senderId, receiverId },\n+                { senderId: receiverId, receiverId: senderId },\n+            ],\n+        }).sort({ createdAt: 1 });\n+        res.json(messages);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching messages\" });\n+    }\n+});\n+\n+router.get(\"/chats\", async (req, res) => {\n+    const userId = req.query.userId;\n+    try {\n+        const chats = await Chat.find({ participants: userId })\n+            .populate(\"participants\", \"nombre apellido avatar isActive\")\n+            .populate(\"lastMessage\")\n+            .sort({ updatedAt: -1 });\n+\n+        const chatPreviews = chats.map((chat) => {\n+            const otherParticipant = chat.participants.find(\n+                (participant) => participant._id.toString() !== userId\n+            );\n+            return {\n+                id: chat._id,\n+                name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n+                avatar: otherParticipant.avatar,\n+                lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n+                time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+                unread: chat.unreadMessages.get(userId) || 0,\n+                isActive: otherParticipant.isActive,\n+            };\n+        });\n+\n+        res.json(chatPreviews);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching chats\" });\n+    }\n+});\n+\n+'use client'\n+\n+import React, { useState, useEffect } from 'react'\n+import dynamic from 'next/dynamic'\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n+import io from 'socket.io-client'\n+\n+const socket = io('http://localhost:3001')\n+\n+const FbMessengerImproved = ({ user, receiverId }) => {\n+  const [activeChat, setActiveChat] = useState(null)\n+  const [message, setMessage] = useState('')\n+  const [messages, setMessages] = useState([])\n+  const [chatPreviews, setChatPreviews] = useState([])\n+  const [showChatList, setShowChatList] = useState(true)\n+\n+  useEffect(() => {\n+    if (!user) return\n+\n+    // Fetch initial chat previews\n+    const fetchChatPreviews = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n+          method: 'GET',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          }\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setChatPreviews(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchChatPreviews()\n+  }, [user])\n+\n+  useEffect(() => {\n+    if (!user || !receiverId) return\n+\n+    // Crear un nuevo chat si se proporciona un receiverId\n+    const createChat = async () => {\n+      try {\n+        const res = await fetch('http://localhost:3001/chats', {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json'\n+          },\n+          body: JSON.stringify({ userId: user.id, receiverId })\n+        })\n+        if (!res.ok) {\n+          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n+        }\n+        const newChat = await res.json()\n+        setActiveChat(newChat)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    createChat()\n+  }, [receiverId, user])\n+\n+  useEffect(() => {\n+    if (!user || !activeChat) return\n+\n+    // Unirse a la sala específica del usuario\n+    socket.emit('joinRoom', activeChat.id)\n+\n+    // Fetch initial messages for the active chat\n+    const fetchMessages = async () => {\n+      try {\n+        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n+        if (!res.ok) {\n+          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n+        }\n+        const data = await res.json()\n+        setMessages(data)\n+      } catch (error) {\n+        console.error('Error:', error)\n+      }\n+    }\n+\n+    fetchMessages()\n+\n+    // Escuchar mensajes recibidos\n+    const handleReceiveMessage = (message) => {\n+      setMessages((prevMessages) => [...prevMessages, message])\n+    }\n+    socket.on('receiveMessage', handleReceiveMessage)\n+\n+    // Limpiar el evento cuando el componente se desmonta\n+    return () => {\n+      socket.emit('leaveRoom', activeChat.id)\n+      socket.off('receiveMessage', handleReceiveMessage)\n+    }\n+  }, [activeChat, user])\n+\n+  const handleSend = () => {\n+    if (message.trim()) {\n+      const newMessage = {\n+        senderId: user.id,\n+        receiverId: activeChat.id,\n+        text: message,\n+      }\n+      socket.emit('sendMessage', newMessage)\n+      setMessages([...messages, newMessage])\n+      setMessage('')\n+    }\n+  }\n+\n+  const toggleChatList = () => {\n+    setShowChatList(!showChatList)\n+  }\n+\n+  return (\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\n+      {/* Lista de chats */}\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9]\">\n+          <div className=\"flex justify-between items-center mb-4\">\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n+            <div className=\"flex space-x-2\">\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <MoreHorizontal size={20} />\n+                <span className=\"sr-only\">Más opciones</span>\n+              </button>\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+                <Edit size={20} />\n+                <span className=\"sr-only\">Nuevo mensaje</span>\n+              </button>\n+            </div>\n+          </div>\n+          <div className=\"relative\">\n+            <input\n+              type=\"text\"\n+              placeholder=\"Buscar en Messenger\"\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n+            />\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto\">\n+          {chatPreviews.map((chat) => (\n+            <div\n+              key={chat.id}\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n+              }`}\n+              onClick={() => {\n+                setActiveChat(chat)\n+                if (window.innerWidth < 768) {\n+                  setShowChatList(false)\n+                }\n+              }}\n+            >\n+              <div className=\"relative mr-3\">\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n+                {chat.isActive && (\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n+                )}\n+              </div>\n+              <div className=\"flex-1 min-w-0\">\n+                <div className=\"flex justify-between items-baseline\">\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n+                </div>\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n+              </div>\n+              {chat.unread > 0 && (\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n+                  {chat.unread}\n+                </div>\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+      </div>\n+\n+      {/* Ventana de chat activa */}\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n+          <div className=\"flex items-center\">\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n+              <ArrowLeft size={20} />\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\n+            </button>\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n+            <div>\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n+            </div>\n+          </div>\n+          <div className=\"flex space-x-2\">\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Phone size={20} />\n+              <span className=\"sr-only\">Llamada de voz</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Video size={20} />\n+              <span className=\"sr-only\">Videollamada</span>\n+            </button>\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n+              <Settings size={20} />\n+              <span className=\"sr-only\">Configuración</span>\n+            </button>\n+          </div>\n+        </div>\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n+          {messages.map((msg, index) => (\n+            <div\n+              key={index}\n+              className={`max-w-[70%] p-3 rounded-lg ${\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n+              }`}\n+            >\n+              <p className=\"text-[#042637]\">{msg.text}</p>\n+            </div>\n+          ))}\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n+        </div>\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+              <Smile size={20} />\n+              <span className=\"sr-only\">Emojis</span>\n+            </button>\n+            <input\n+              type=\"text\"\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder=\"Aa\"\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n+            />\n+            <div className=\"flex space-x-2 mr-2\">\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Paperclip size={20} />\n+                <span className=\"sr-only\">Adjuntar archivo</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <Image size={20} />\n+                <span className=\"sr-only\">Adjuntar imagen</span>\n+              </button>\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n+                <ThumbsUp size={20} />\n+                <span className=\"sr-only\">Me gusta</span>\n+              </button>\n+            </div>\n+            <button\n+              className={`p-2 rounded-full transition-colors ${\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n+              }`}\n+              onClick={handleSend}\n+              disabled={!message.trim()}\n+            >\n+              <Send size={20} />\n+              <span className=\"sr-only\">Enviar mensaje</span>\n+            </button>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731385720249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,388 +22,32 @@\n         res.status(500).json({ error: \"Error fetching messages\" });\n     }\n });\n \n-router.get(\"/chats\", async (req, res) => {\n-    const userId = req.query.userId;\n+router.post('/chats', async (req, res) => {\n+    const { userId, receiverId } = req.body;\n     try {\n-        const chats = await Chat.find({ participants: userId })\n-            .populate(\"participants\", \"nombre apellido avatar isActive\")\n-            .populate(\"lastMessage\")\n-            .sort({ updatedAt: -1 });\n-\n-        const chatPreviews = chats.map((chat) => {\n-            const otherParticipant = chat.participants.find(\n-                (participant) => participant._id.toString() !== userId\n-            );\n-            return {\n-                id: chat._id,\n-                name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-                avatar: otherParticipant.avatar,\n-                lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n-                time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-                unread: chat.unreadMessages.get(userId) || 0,\n-                isActive: otherParticipant.isActive,\n-            };\n+      // Verifica si ya existe un chat entre estos dos usuarios\n+      let chat = await Chat.findOne({\n+        participants: { $all: [userId, receiverId] }\n+      });\n+  \n+      if (!chat) {\n+        // Si no existe, crea un nuevo chat\n+        chat = new Chat({\n+          participants: [userId, receiverId],\n+          lastMessage: null,\n+          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n         });\n-\n-        res.json(chatPreviews);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error fetching chats\" });\n-    }\n-});\n-\n-'use client'\n-\n-import React, { useState, useEffect } from 'react'\n-import dynamic from 'next/dynamic'\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\n-import io from 'socket.io-client'\n-\n-const socket = io('http://localhost:3001')\n-\n-const FbMessengerImproved = ({ user, receiverId }) => {\n-  const [activeChat, setActiveChat] = useState(null)\n-  const [message, setMessage] = useState('')\n-  const [messages, setMessages] = useState([])\n-  const [chatPreviews, setChatPreviews] = useState([])\n-  const [showChatList, setShowChatList] = useState(true)\n-\n-  useEffect(() => {\n-    if (!user) return\n-\n-    // Fetch initial chat previews\n-    const fetchChatPreviews = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          }\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setChatPreviews(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n+        await chat.save();\n       }\n-    }\n-\n-    fetchChatPreviews()\n-  }, [user])\n-\n-  useEffect(() => {\n-    if (!user || !receiverId) return\n-\n-    // Crear un nuevo chat si se proporciona un receiverId\n-    const createChat = async () => {\n-      try {\n-        const res = await fetch('http://localhost:3001/chats', {\n-          method: 'POST',\n-          headers: {\n-            'Content-Type': 'application/json'\n-          },\n-          body: JSON.stringify({ userId: user.id, receiverId })\n-        })\n-        if (!res.ok) {\n-          throw new Error(`Error creating chat: ${res.status} ${res.statusText}`)\n-        }\n-        const newChat = await res.json()\n-        setActiveChat(newChat)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    createChat()\n-  }, [receiverId, user])\n-\n-  useEffect(() => {\n-    if (!user || !activeChat) return\n-\n-    // Unirse a la sala específica del usuario\n-    socket.emit('joinRoom', activeChat.id)\n-\n-    // Fetch initial messages for the active chat\n-    const fetchMessages = async () => {\n-      try {\n-        const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\n-        if (!res.ok) {\n-          throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\n-        }\n-        const data = await res.json()\n-        setMessages(data)\n-      } catch (error) {\n-        console.error('Error:', error)\n-      }\n-    }\n-\n-    fetchMessages()\n-\n-    // Escuchar mensajes recibidos\n-    const handleReceiveMessage = (message) => {\n-      setMessages((prevMessages) => [...prevMessages, message])\n-    }\n-    socket.on('receiveMessage', handleReceiveMessage)\n-\n-    // Limpiar el evento cuando el componente se desmonta\n-    return () => {\n-      socket.emit('leaveRoom', activeChat.id)\n-      socket.off('receiveMessage', handleReceiveMessage)\n-    }\n-  }, [activeChat, user])\n-\n-  const handleSend = () => {\n-    if (message.trim()) {\n-      const newMessage = {\n-        senderId: user.id,\n-        receiverId: activeChat.id,\n-        text: message,\n-      }\n-      socket.emit('sendMessage', newMessage)\n-      setMessages([...messages, newMessage])\n-      setMessage('')\n-    }\n-  }\n-\n-  const toggleChatList = () => {\n-    setShowChatList(!showChatList)\n-  }\n-\n-  return (\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\n-      {/* Lista de chats */}\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9]\">\n-          <div className=\"flex justify-between items-center mb-4\">\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\n-            <div className=\"flex space-x-2\">\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <MoreHorizontal size={20} />\n-                <span className=\"sr-only\">Más opciones</span>\n-              </button>\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-                <Edit size={20} />\n-                <span className=\"sr-only\">Nuevo mensaje</span>\n-              </button>\n-            </div>\n-          </div>\n-          <div className=\"relative\">\n-            <input\n-              type=\"text\"\n-              placeholder=\"Buscar en Messenger\"\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\n-            />\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto\">\n-          {chatPreviews.map((chat) => (\n-            <div\n-              key={chat.id}\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\n-              }`}\n-              onClick={() => {\n-                setActiveChat(chat)\n-                if (window.innerWidth < 768) {\n-                  setShowChatList(false)\n-                }\n-              }}\n-            >\n-              <div className=\"relative mr-3\">\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\n-                {chat.isActive && (\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\n-                )}\n-              </div>\n-              <div className=\"flex-1 min-w-0\">\n-                <div className=\"flex justify-between items-baseline\">\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\n-                </div>\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\n-              </div>\n-              {chat.unread > 0 && (\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\n-                  {chat.unread}\n-                </div>\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-      </div>\n-\n-      {/* Ventana de chat activa */}\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\n-          <div className=\"flex items-center\">\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\n-              <ArrowLeft size={20} />\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\n-            </button>\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\n-            <div>\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\n-            </div>\n-          </div>\n-          <div className=\"flex space-x-2\">\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Phone size={20} />\n-              <span className=\"sr-only\">Llamada de voz</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Video size={20} />\n-              <span className=\"sr-only\">Videollamada</span>\n-            </button>\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\n-              <Settings size={20} />\n-              <span className=\"sr-only\">Configuración</span>\n-            </button>\n-          </div>\n-        </div>\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\n-          {messages.map((msg, index) => (\n-            <div\n-              key={index}\n-              className={`max-w-[70%] p-3 rounded-lg ${\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\n-              }`}\n-            >\n-              <p className=\"text-[#042637]\">{msg.text}</p>\n-            </div>\n-          ))}\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\n-        </div>\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-              <Smile size={20} />\n-              <span className=\"sr-only\">Emojis</span>\n-            </button>\n-            <input\n-              type=\"text\"\n-              value={message}\n-              onChange={(e) => setMessage(e.target.value)}\n-              placeholder=\"Aa\"\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\n-            />\n-            <div className=\"flex space-x-2 mr-2\">\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Paperclip size={20} />\n-                <span className=\"sr-only\">Adjuntar archivo</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <Image size={20} />\n-                <span className=\"sr-only\">Adjuntar imagen</span>\n-              </button>\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\n-                <ThumbsUp size={20} />\n-                <span className=\"sr-only\">Me gusta</span>\n-              </button>\n-            </div>\n-            <button\n-              className={`p-2 rounded-full transition-colors ${\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\n-              }`}\n-              onClick={handleSend}\n-              disabled={!message.trim()}\n-            >\n-              <Send size={20} />\n-              <span className=\"sr-only\">Enviar mensaje</span>\n-            </button>\n-          </div>\n-        </div>\n-      </div>\n-    </div>\n-  )\n-}\n-\n-export default dynamic(() => Promise.resolve(FbMessengerImproved), { ssr: false });\n-\n-export default router;\n-// FILE: src/routes/index.js\n-import express from \"express\";\n-const router = express.Router();\n-import Message from \"../models/message.js\";\n-import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n-\n-router.get(\"/\", (req, res) => {\n-    res.send(\"<h1>Esto es la pagina principal </h1>\");\n-});\n-\n-router.get(\"/messages\", async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-        const messages = await Message.find({\n-            $or: [\n-                { senderId, receiverId },\n-                { senderId: receiverId, receiverId: senderId },\n-            ],\n-        }).sort({ createdAt: 1 });\n-        res.json(messages);\n+  \n+      res.status(201).json(chat);\n     } catch (error) {\n-        res.status(500).json({ error: \"Error fetching messages\" });\n+      console.error('Error creating or fetching chat:', error);\n+      res.status(500).json({ error: 'Error creating or fetching chat' });\n     }\n-});\n+  });\n \n-router.get(\"/chats\", async (req, res) => {\n-    const userId = req.query.userId;\n-    try {\n-        const chats = await Chat.find({ participants: userId })\n-            .populate(\"participants\", \"nombre apellido avatar isActive\")\n-            .populate(\"lastMessage\")\n-            .sort({ updatedAt: -1 });\n \n-        const chatPreviews = chats.map((chat) => {\n-            const otherParticipant = chat.participants.find(\n-                (participant) => participant._id.toString() !== userId\n-            );\n-            return {\n-                id: chat._id,\n-                name: `${otherParticipant.nombre} ${otherParticipant.apellido}`,\n-                avatar: otherParticipant.avatar,\n-                lastMessage: chat.lastMessage ? chat.lastMessage.text : \"\",\n-                time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-                unread: chat.unreadMessages.get(userId) || 0,\n-                isActive: otherParticipant.isActive,\n-            };\n-        });\n \n-        res.json(chatPreviews);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error fetching chats\" });\n-    }\n-});\n-\n-router.post(\"/chats\", async (req, res) => {\n-    const { userId, receiverId } = req.body;\n-    try {\n-        // Verifica si ya existe un chat entre estos dos usuarios\n-        let chat = await Chat.findOne({\n-            participants: { $all: [userId, receiverId] },\n-        });\n-\n-        if (!chat) {\n-            // Si no existe, crea un nuevo chat\n-            chat = new Chat({\n-                participants: [userId, receiverId],\n-                lastMessage: null,\n-                unreadMessages: new Map([\n-                    [userId, 0],\n-                    [receiverId, 0],\n-                ]),\n-            });\n-            await chat.save();\n-        }\n-\n-        res.status(201).json(chat);\n-    } catch (error) {\n-        console.error(\"Error creating or fetching chat:\", error);\n-        res.status(500).json({ error: \"Error creating or fetching chat\" });\n-    }\n-});\n-\n export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731386360252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,34 @@\n     } catch (error) {\n         res.status(500).json({ error: \"Error fetching messages\" });\n     }\n });\n+router.get('/chats', async (req, res) => {\n+    const { userId } = req.query;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n \n router.post('/chats', async (req, res) => {\n     const { userId, receiverId } = req.body;\n     try {\n"
                },
                {
                    "date": 1731388123403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,17 @@\n // FILE: src/routes/index.js\n+\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n \n+// Ruta principal\n router.get(\"/\", (req, res) => {\n-    res.send(\"<h1>Esto es la pagina principal </h1>\");\n+    res.send(\"<h1>Esto es la pagina principal</h1>\");\n });\n \n+// Ruta para obtener los mensajes entre dos usuarios\n router.get(\"/messages\", async (req, res) => {\n     const { receiverId, senderId } = req.query;\n     try {\n         const messages = await Message.find({\n@@ -21,59 +24,52 @@\n     } catch (error) {\n         res.status(500).json({ error: \"Error fetching messages\" });\n     }\n });\n+\n+// Ruta para obtener los chats de un usuario\n router.get('/chats', async (req, res) => {\n     const { userId } = req.query;\n     try {\n-      const chats = await Chat.find({ participants: userId })\n-        .populate('participants', 'nombre avatar isActive')\n-        .populate('lastMessage')\n-        .sort({ updatedAt: -1 });\n-  \n-      const chatPreviews = chats.map(chat => {\n-        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-        return {\n-          id: chat._id,\n-          name: `${otherParticipant.nombre}`,\n-          avatar: otherParticipant.avatar,\n-          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n-          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n-          unread: chat.unreadMessages.get(userId) || 0,\n-          isActive: otherParticipant.isActive,\n-        };\n-      });\n-  \n-      res.json(chatPreviews);\n+        const chats = await Chat.find({ participants: userId })\n+            .populate('participants', 'nombre avatar isActive')\n+            .populate('lastMessage')\n+            .sort({ updatedAt: -1 });\n+\n+        const chatPreviews = chats.map(chat => {\n+            const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+            const lastMessage = chat.lastMessage ? chat.lastMessage.text : \"No messages yet\";\n+            const time = chat.lastMessage ? chat.lastMessage.createdAt : null;\n+\n+            return {\n+                id: chat._id,\n+                name: otherParticipant.nombre,\n+                avatar: otherParticipant.avatar,\n+                isActive: otherParticipant.isActive,\n+                lastMessage,\n+                time: time ? new Date(time).toLocaleTimeString() : '',\n+                unread: chat.unreadCount || 0,\n+            };\n+        });\n+\n+        res.json(chatPreviews);\n     } catch (error) {\n-      res.status(500).json({ error: 'Error fetching chats' });\n+        res.status(500).json({ error: \"Error fetching chats\" });\n     }\n-  });\n+});\n \n-router.post('/chats', async (req, res) => {\n+// Ruta para crear un nuevo chat\n\\ No newline at end of file\n+router.post(\"/chats\", async (req, res) => {\n     const { userId, receiverId } = req.body;\n     try {\n-      // Verifica si ya existe un chat entre estos dos usuarios\n-      let chat = await Chat.findOne({\n-        participants: { $all: [userId, receiverId] }\n-      });\n-  \n-      if (!chat) {\n-        // Si no existe, crea un nuevo chat\n-        chat = new Chat({\n-          participants: [userId, receiverId],\n-          lastMessage: null,\n-          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n+        const newChat = new Chat({\n+            participants: [userId, receiverId],\n         });\n-        await chat.save();\n-      }\n-  \n-      res.status(201).json(chat);\n+\n+        await newChat.save();\n+        res.status(201).json(newChat);\n     } catch (error) {\n-      console.error('Error creating or fetching chat:', error);\n-      res.status(500).json({ error: 'Error creating or fetching chat' });\n+        res.status(500).json({ error: \"Error creating chat\" });\n     }\n-  });\n+});\n \n-\n-\n-export default router;\n+export default router;\n"
                },
                {
                    "date": 1731389330353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +0,0 @@\n-// FILE: src/routes/index.js\n-\n-import express from \"express\";\n-const router = express.Router();\n-import Message from \"../models/message.js\";\n-import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n-\n-// Ruta principal\n-router.get(\"/\", (req, res) => {\n-    res.send(\"<h1>Esto es la pagina principal</h1>\");\n-});\n-\n-// Ruta para obtener los mensajes entre dos usuarios\n-router.get(\"/messages\", async (req, res) => {\n-    const { receiverId, senderId } = req.query;\n-    try {\n-        const messages = await Message.find({\n-            $or: [\n-                { senderId, receiverId },\n-                { senderId: receiverId, receiverId: senderId },\n-            ],\n-        }).sort({ createdAt: 1 });\n-        res.json(messages);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error fetching messages\" });\n-    }\n-});\n-\n-// Ruta para obtener los chats de un usuario\n-router.get('/chats', async (req, res) => {\n-    const { userId } = req.query;\n-    try {\n-        const chats = await Chat.find({ participants: userId })\n-            .populate('participants', 'nombre avatar isActive')\n-            .populate('lastMessage')\n-            .sort({ updatedAt: -1 });\n-\n-        const chatPreviews = chats.map(chat => {\n-            const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-            const lastMessage = chat.lastMessage ? chat.lastMessage.text : \"No messages yet\";\n-            const time = chat.lastMessage ? chat.lastMessage.createdAt : null;\n-\n-            return {\n-                id: chat._id,\n-                name: otherParticipant.nombre,\n-                avatar: otherParticipant.avatar,\n-                isActive: otherParticipant.isActive,\n-                lastMessage,\n-                time: time ? new Date(time).toLocaleTimeString() : '',\n-                unread: chat.unreadCount || 0,\n-            };\n-        });\n-\n-        res.json(chatPreviews);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error fetching chats\" });\n-    }\n-});\n-\n-// Ruta para crear un nuevo chat\n-router.post(\"/chats\", async (req, res) => {\n-    const { userId, receiverId } = req.body;\n-    try {\n-        const newChat = new Chat({\n-            participants: [userId, receiverId],\n-        });\n-\n-        await newChat.save();\n-        res.status(201).json(newChat);\n-    } catch (error) {\n-        res.status(500).json({ error: \"Error creating chat\" });\n-    }\n-});\n-\n-export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731389576303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,14 @@\n // FILE: src/routes/index.js\n-\n import express from \"express\";\n const router = express.Router();\n import Message from \"../models/message.js\";\n import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n \n-// Ruta principal\n router.get(\"/\", (req, res) => {\n-    res.send(\"<h1>Esto es la pagina principal</h1>\");\n+    res.send(\"<h1>Esto es la pagina principal </h1>\");\n });\n \n-// Ruta para obtener los mensajes entre dos usuarios\n router.get(\"/messages\", async (req, res) => {\n     const { receiverId, senderId } = req.query;\n     try {\n         const messages = await Message.find({\n@@ -24,52 +21,59 @@\n     } catch (error) {\n         res.status(500).json({ error: \"Error fetching messages\" });\n     }\n });\n-\n-// Ruta para obtener los chats de un usuario\n router.get('/chats', async (req, res) => {\n     const { userId } = req.query;\n     try {\n-        const chats = await Chat.find({ participants: userId })\n-            .populate('participants', 'nombre avatar isActive')\n-            .populate('lastMessage')\n-            .sort({ updatedAt: -1 });\n-\n-        const chatPreviews = chats.map(chat => {\n-            const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n-            const lastMessage = chat.lastMessage ? chat.lastMessage.text : \"No messages yet\";\n-            const time = chat.lastMessage ? chat.lastMessage.createdAt : null;\n-\n-            return {\n-                id: chat._id,\n-                name: otherParticipant.nombre,\n-                avatar: otherParticipant.avatar,\n-                isActive: otherParticipant.isActive,\n-                lastMessage,\n-                time: time ? new Date(time).toLocaleTimeString() : '',\n-                unread: chat.unreadCount || 0,\n-            };\n-        });\n-\n-        res.json(chatPreviews);\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n     } catch (error) {\n-        res.status(500).json({ error: \"Error fetching chats\" });\n+      res.status(500).json({ error: 'Error fetching chats' });\n     }\n-});\n+  });\n \n-// Ruta para crear un nuevo chat\n-router.post(\"/chats\", async (req, res) => {\n+router.post('/chats', async (req, res) => {\n     const { userId, receiverId } = req.body;\n     try {\n-        const newChat = new Chat({\n-            participants: [userId, receiverId],\n+      // Verifica si ya existe un chat entre estos dos usuarios\n+      let chat = await Chat.findOne({\n+        participants: { $all: [userId, receiverId] }\n+      });\n+  \n+      if (!chat) {\n+        // Si no existe, crea un nuevo chat\n+        chat = new Chat({\n+          participants: [userId, receiverId],\n+          lastMessage: null,\n+          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n         });\n-\n-        await newChat.save();\n-        res.status(201).json(newChat);\n+        await chat.save();\n+      }\n+  \n+      res.status(201).json(chat);\n     } catch (error) {\n-        res.status(500).json({ error: \"Error creating chat\" });\n+      console.error('Error creating or fetching chat:', error);\n+      res.status(500).json({ error: 'Error creating or fetching chat' });\n     }\n-});\n+  });\n \n-export default router;\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731389686813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+// FILE: src/routes/index.js\n+import express from \"express\";\n+const router = express.Router();\n+import Message from \"../models/message.js\";\n+import Chat from \"../models/chats.js\"; // Asegúrate de que esta ruta sea correcta\n+\n+router.get(\"/\", (req, res) => {\n+    res.send(\"<h1>Esto es la pagina principal </h1>\");\n+});\n+\n+router.get(\"/messages\", async (req, res) => {\n+    const { receiverId, senderId } = req.query;\n+    try {\n+        const messages = await Message.find({\n+            $or: [\n+                { senderId, receiverId },\n+                { senderId: receiverId, receiverId: senderId },\n+            ],\n+        }).sort({ createdAt: 1 });\n+        res.json(messages);\n+    } catch (error) {\n+        res.status(500).json({ error: \"Error fetching messages\" });\n+    }\n+});\n+router.get('/chats', async (req, res) => {\n+    const { userId } = req.query;\n+    try {\n+      const chats = await Chat.find({ participants: userId })\n+        .populate('participants', 'nombre avatar isActive')\n+        .populate('lastMessage')\n+        .sort({ updatedAt: -1 });\n+  \n+      const chatPreviews = chats.map(chat => {\n+        const otherParticipant = chat.participants.find(participant => participant._id.toString() !== userId);\n+        return {\n+          id: chat._id,\n+          name: `${otherParticipant.nombre}`,\n+          avatar: otherParticipant.avatar,\n+          lastMessage: chat.lastMessage ? chat.lastMessage.text : '',\n+          time: chat.lastMessage ? chat.lastMessage.createdAt : chat.updatedAt,\n+          unread: chat.unreadMessages.get(userId) || 0,\n+          isActive: otherParticipant.isActive,\n+        };\n+      });\n+  \n+      res.json(chatPreviews);\n+    } catch (error) {\n+      res.status(500).json({ error: 'Error fetching chats' });\n+    }\n+  });\n+\n+router.post('/chats', async (req, res) => {\n+    const { userId, receiverId } = req.body;\n+    try {\n+      // Verifica si ya existe un chat entre estos dos usuarios\n+      let chat = await Chat.findOne({\n+        participants: { $all: [userId, receiverId] }\n+      });\n+  \n+      if (!chat) {\n+        // Si no existe, crea un nuevo chat\n+        chat = new Chat({\n+          participants: [userId, receiverId],\n+          lastMessage: null,\n+          unreadMessages: new Map([[userId, 0], [receiverId, 0]])\n+        });\n+        await chat.save();\n+      }\n+  \n+      res.status(201).json(chat);\n+    } catch (error) {\n+      console.error('Error creating or fetching chat:', error);\n+      res.status(500).json({ error: 'Error creating or fetching chat' });\n+    }\n+  });\n+\n+\n+\n+export default router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731379414163,
            "name": "Commit-0",
            "content": "import express from 'express'\nconst router = express.Router();\n\n\nrouter.get('/',(req, res)=>{\n    res.send('<h1>Esto es la pagina principal </h1>')\n});\n\n\n\n\n\nexport default router;"
        }
    ]
}