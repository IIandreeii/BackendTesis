{
    "sourceFile": "src/routes/mercadopago.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 101,
            "patches": [
                {
                    "date": 1731015109378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731366676659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     }\r\n \r\n     try {\r\n         const client_id = '5404051275980051';\r\n-        const client_secret = '6qdwVm2S2EYuYrCnJGNtxapzysh9H3f3';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n \r\n         const params = new URLSearchParams();\r\n         params.append('grant_type', 'authorization_code');\r\n"
                },
                {
                    "date": 1731366685263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n     }\r\n \r\n     try {\r\n-        const client_id = '5404051275980051';\r\n+        const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n \r\n         const params = new URLSearchParams();\r\n"
                },
                {
                    "date": 1731366748271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n \r\n     try {\r\n         const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n             headers: {\r\n-                'Authorization': `Bearer APP_USR-5404051275980051-100719-02c01e6cc87103ca2e0850334349dea5-2023454065`,\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n             },\r\n         });\r\n \r\n         const paymentDetails = response.data;\r\n"
                },
                {
                    "date": 1731366769161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n // Ruta para autenticar a la organización benéfica\r\n router.get('/mercadopago/auth/:id', (req, res) => {\r\n     const { id } = req.params;\r\n-    const client_id = '5404051275980051';\r\n+    const client_id = '1901957005842671';\r\n     const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n \r\n     const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n     res.redirect(authorizationUrl);\r\n"
                },
                {
                    "date": 1731367163425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \r\n     try {\r\n         const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callbackk';\r\n \r\n         const params = new URLSearchParams();\r\n         params.append('grant_type', 'authorization_code');\r\n         params.append('client_id', client_id);\r\n"
                },
                {
                    "date": 1731367172660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731367185413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             payer: {\r\n                 name: donorName,\r\n             },\r\n             back_urls: {\r\n-                success: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/success',\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback/mercadopago/success',\r\n                 failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n             },\r\n             auto_return: 'approved',\r\n             external_reference: id,\r\n@@ -219,226 +219,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callbackk';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731367190722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             payer: {\r\n                 name: donorName,\r\n             },\r\n             back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback/mercadopago/success',\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n                 failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n             },\r\n             auto_return: 'approved',\r\n             external_reference: id,\r\n"
                },
                {
                    "date": 1731367199062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n                 name: donorName,\r\n             },\r\n             back_urls: {\r\n                 success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n             },\r\n             auto_return: 'approved',\r\n             external_reference: id,\r\n         };\r\n"
                },
                {
                    "date": 1731944092094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,8 @@\n \r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n-\r\n     try {\r\n         const donations = await Donation.find({ charityId: charityId });\r\n \r\n         if (!donations.length) {\r\n"
                },
                {
                    "date": 1731944098981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731944372153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,8 +200,14 @@\n         res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n     }\r\n });\r\n \r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n router.get('/mercadopago/error', (req, res) => {\r\n     const paymentId = req.query.payment_id;\r\n     const status = req.query.status;\r\n     const merchantOrderId = req.query.merchant_order_id;\r\n@@ -210,229 +216,30 @@\n         message: 'error en el pago',\r\n     });\r\n });\r\n \r\n-export default router;\r\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n \r\n-const router = express.Router();\r\n \r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n \r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n \r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n \r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n \r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n \r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n \r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n \r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n \r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n \r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n \r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n \r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n \r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n \r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n \r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n \r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n export default router;\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1731944377710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,10 +219,19 @@\n \r\n \r\n \r\n \r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n \r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n \r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n \r\n \r\n \r\n \r\n@@ -234,12 +243,8 @@\n \r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n export default router;\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1731944422180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import Charity from '../models/charity.js'; \r\n import mongoose from 'mongoose';\r\n import Donation from '../models/donation.js';\r\n \r\n+\r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n router.get('/mercadopago/auth/:id', (req, res) => {\r\n"
                },
                {
                    "date": 1731944427526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import \r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731944441589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import axios from 'axios';\r\n import Charity from '../models/charity.js'; \r\n import mongoose from 'mongoose';\r\n import Donation from '../models/donation.js';\r\n-import \r\n+//import { generateReport } from '../services/reportService.js';\r\n \r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n@@ -249,256 +249,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731944546426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,12 +203,8 @@\n });\r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n router.get('/mercadopago/error', (req, res) => {\r\n     const paymentId = req.query.payment_id;\r\n     const status = req.query.status;\r\n     const merchantOrderId = req.query.merchant_order_id;\r\n"
                },
                {
                    "date": 1731944601274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportService.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731944686648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731947398681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n });\r\n \r\n router.post('/mercadopago/donate/:id', async (req, res) => {\r\n     const { id } = req.params;\r\n+    console\r\n     const { amount, donorName } = req.body;\r\n \r\n     if (!mongoose.isValidObjectId(id)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n@@ -243,498 +244,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportService.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-//import { generateReport } from '../services/reportService.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731947404940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731947411485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,255 +87,10 @@\n router.post('/mercadopago/donate/:id', async (req, res) => {\r\n     const { id } = req.params;\r\n     const { amount, donorName } = req.body;\r\n \r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n+    console.log('amount', amount);\r\n \r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    console\r\n-    const { amount, donorName } = req.body;\r\n-\r\n     if (!mongoose.isValidObjectId(id)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n"
                },
                {
                    "date": 1731947483705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731949527497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,17 +232,8 @@\n \r\n \r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n export default router;\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1731951071195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,251 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731951081018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,322 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationInKind = new DonationInKind({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationInKind.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationInKind.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731951974107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import Charity from '../models/charity.js'; \r\n import mongoose from 'mongoose';\r\n import Donation from '../models/donation.js';\r\n import { generateReport } from '../services/reportesdonaciones.js';\r\n+import \r\n \r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n"
                },
                {
                    "date": 1731951983244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import Charity from '../models/charity.js'; \r\n import mongoose from 'mongoose';\r\n import Donation from '../models/donation.js';\r\n import { generateReport } from '../services/reportesdonaciones.js';\r\n-import \r\n+import donationpro\r\n \r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n@@ -320,743 +320,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731951990205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationInKind = new DonationInKind({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationInKind.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationInKind.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731952029230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n         return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n     }\r\n \r\n     try {\r\n-        const donationInKind = new DonationInKind({\r\n+        const donationproducts = new DonationInKind({\r\n             charityId,\r\n             donorName,\r\n             itemType,\r\n             quantity,\r\n@@ -320,327 +320,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationpro\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationInKind = new DonationInKind({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationInKind.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationInKind.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731952104958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,38 +249,34 @@\n         return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n     }\r\n \r\n     try {\r\n-        const donationproducts = new DonationInKind({\r\n+        const donationProduct = new DonationProducts({\r\n             charityId,\r\n             donorName,\r\n             itemType,\r\n             quantity,\r\n             unit,\r\n             valuePerUnit\r\n         });\r\n \r\n-        await donationInKind.save();\r\n+        await donationProduct.save();\r\n         res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n+// Ruta para generar el reporte de donaciones en especie\r\n router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await DonationInKind.find({ charityId: charityId });\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n \r\n         if (!donationsInKind.length) {\r\n             return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n         }\r\n"
                },
                {
                    "date": 1731952167751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n         return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n     }\r\n \r\n     try {\r\n-        const donationProduct = new DonationProducts({\r\n+        const donationProduct = new donationProducts({\r\n             charityId,\r\n             donorName,\r\n             itemType,\r\n             quantity,\r\n"
                },
                {
                    "date": 1731952174899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,9 @@\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n+        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n \r\n         if (!donationsInKind.length) {\r\n             return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n         }\r\n"
                },
                {
                    "date": 1731952202801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,319 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationProducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731952208809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,319 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731953405335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,400 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', 'attachment; filename=reporte_donaciones_especie.xlsx');\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731953435839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,400 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', 'attachment; filename=reporte_donaciones_especie.xlsx');\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731953655173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,317 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731953662916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,339 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731953689186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Ruta para generar el reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731954148847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,2417 +337,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/in-kind/excel/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n-            }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n-        });\r\n-\r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', 'attachment; filename=reporte_donaciones_especie.xlsx');\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/in-kind/excel/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n-            }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n-        });\r\n-\r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', 'attachment; filename=reporte_donaciones_especie.xlsx');\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationProducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationProducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Ruta para generar el reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731985421117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,9 @@\n         res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n-// Ruta para generar el reporte de donaciones en especie\r\n+\r\n router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n"
                },
                {
                    "date": 1731987870966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n });\r\n \r\n \r\n router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit } = req.body;\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n \r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n@@ -250,9 +250,9 @@\n         return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n     }\r\n \r\n     try {\r\n-        const donationProduct = new donationproducts({\r\n+        const donationProduct = new DonationProducts({\r\n             charityId,\r\n             donorName,\r\n             itemType,\r\n             quantity,\r\n@@ -260,24 +260,27 @@\n             valuePerUnit\r\n         });\r\n \r\n         await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n         res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n-\r\n+// Obtener reporte de donaciones en especie\r\n router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n \r\n         if (!donationsInKind.length) {\r\n             return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n         }\r\n@@ -295,38 +298,103 @@\n             totalValue: donation.quantity * donation.valuePerUnit,\r\n             createdAt: donation.createdAt\r\n         }));\r\n \r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n         res.json({ totalValue, report });\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n     }\r\n });\r\n \r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n \r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n \r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n     await generateExcelReport(charityId, 'weekly', res);\r\n });\r\n \r\n+// Generar reporte mensual en Excel\r\n router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n     await generateExcelReport(charityId, 'monthly', res);\r\n });\r\n \r\n+// Generar reporte anual en Excel\r\n router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n     await generateExcelReport(charityId, 'annual', res);\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1731988051658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,409 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new DonationProducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731988062617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,409 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import {recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new DonationProducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731988067705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,409 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new DonationProducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731988867257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -406,1230 +406,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import {recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new DonationProducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new DonationProducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new DonationProducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731990343780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,409 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new DonationProducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731990366545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n         return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n     }\r\n \r\n     try {\r\n-        const donationProduct = new DonationProducts({\r\n+        const donationProduct = new donationProducts({\r\n             charityId,\r\n             donorName,\r\n             itemType,\r\n             quantity,\r\n@@ -279,9 +279,9 @@\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n \r\n         if (!donationsInKind.length) {\r\n             return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n         }\r\n@@ -406,413 +406,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new DonationProducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731990379628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n         return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n     }\r\n \r\n     try {\r\n-        const donationProduct = new donationProducts({\r\n+        const donationProduct = new donationproducts({\r\n             charityId,\r\n             donorName,\r\n             itemType,\r\n             quantity,\r\n@@ -317,9 +317,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n+        const donation = await donationProducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n"
                },
                {
                    "date": 1731990386641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await donationProducts.findById(donationId);\r\n+        const donation = await donationproducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n@@ -343,9 +343,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n+        const donation = await donationProducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n"
                },
                {
                    "date": 1731993580872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n \r\n         if (!donationsInKind.length) {\r\n             return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n         }\r\n@@ -290,8 +290,9 @@\n             return acc + (donation.quantity * donation.valuePerUnit);\r\n         }, 0);\r\n \r\n         const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n             donorName: donation.donorName,\r\n             itemType: donation.itemType,\r\n             quantity: donation.quantity,\r\n             unit: donation.unit,\r\n@@ -299,16 +300,18 @@\n             totalValue: donation.quantity * donation.valuePerUnit,\r\n             createdAt: donation.createdAt\r\n         }));\r\n \r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind' });\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n         res.json({ totalValue, report });\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n     }\r\n });\r\n-\r\n // Editar una donación existente\r\n router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n     const { donationId } = req.params;\r\n     const { userId, ...updateData } = req.body;\r\n@@ -343,9 +346,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await donationProducts.findById(donationId);\r\n+        const donation = await donationproducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n"
                },
                {
                    "date": 1731993623907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,412 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731996616471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,9 @@\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await donationProducts.find({ charityId: charityId });\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n \r\n         if (!donationsInKind.length) {\r\n             return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n         }\r\n@@ -346,9 +346,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n+        const donation = await DonationProducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n@@ -357,420 +357,9 @@\n \r\n         await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n         res.status(200).json({ message: 'Donación eliminada' });\r\n     } catch (error) {\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n         res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n"
                },
                {
                    "date": 1731998048150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json(donation);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731998124305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n+        const donation = await DonationProducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n@@ -330,9 +330,9 @@\n         Object.assign(donation, updateData);\r\n         await donation.save();\r\n \r\n         await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n     } catch (error) {\r\n         res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n     }\r\n });\r\n"
                },
                {
                    "date": 1731998152642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,421 +320,8 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n         const donation = await donationproducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n"
                },
                {
                    "date": 1731998197289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donation.remove();\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731998924624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n+        const donation = await donationProducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n"
                },
                {
                    "date": 1731998992848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await DonationProducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await DonationProducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1731999004359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n         return res.status(400).json({ message: 'ID de donación no válido' });\r\n     }\r\n \r\n     try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n+        const donation = await donationProducts.findById(donationId);\r\n         if (!donation) {\r\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n@@ -410,830 +410,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json(donation);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await DonationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donation.remove();\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1731999021975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationProducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732001426153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -352,9 +352,9 @@\n             return res.status(404).json({ message: 'Donación no encontrada' });\r\n         }\r\n \r\n         const before = donation.toObject();\r\n-        await donationProducts.deleteOne({ _id: donationId });\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n \r\n         await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n         res.status(200).json({ message: 'Donación eliminada' });\r\n     } catch (error) {\r\n@@ -402,424 +402,26 @@\n     await generateExcelReport(charityId, 'annual', res);\r\n });\r\n \r\n \r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n     const { charityId } = req.params;\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n \r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n     try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+        res.status(200).json(audits);\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n     }\r\n });\r\n \r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n \r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n \r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n \r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationProducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await DonationProducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-\r\n export default router;\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1732002045447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+        const audits = await recordAudit.find({ charityId }).sort({ timestamp: -1 });\r\n         res.status(200).json(audits);\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n"
                },
                {
                    "date": 1732002139109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,9 +409,9 @@\n         return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n     }\r\n \r\n     try {\r\n-        const audits = await recordAudit.find({ charityId }).sort({ timestamp: -1 });\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n         res.status(200).json(audits);\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n"
                },
                {
                    "date": 1732002147749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,429 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+        res.status(200).json(audits);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732002376451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,430 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+        res.status(200).json(audits);\r\n+        console\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732002646000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,444 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('name');\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario a cada registro de auditoría\r\n+        const auditsWithUserNames = audits.map(audit => ({\r\n+            ...audit.toObject(),\r\n+            userName: userMap[audit.userId] || 'Usuario desconocido'\r\n+        }));\r\n+\r\n+        res.status(200).json(auditsWithUserNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732002687509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,445 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import \r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('name');\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario a cada registro de auditoría\r\n+        const auditsWithUserNames = audits.map(audit => ({\r\n+            ...audit.toObject(),\r\n+            userName: userMap[audit.userId] || 'Usuario desconocido'\r\n+        }));\r\n+\r\n+        res.status(200).json(auditsWithUserNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732003253305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,445 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario a cada registro de auditoría\r\n+        const auditsWithUserNames = audits.map(audit => ({\r\n+            ...audit.toObject(),\r\n+            userName: userMap[audit.userId] || 'Usuario desconocido'\r\n+        }));\r\n+\r\n+        res.status(200).json(auditsWithUserNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732003378509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,457 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('name');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732003397390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -417,9 +417,9 @@\n         // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n         const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n         const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n \r\n-        const users = await User.find({ _id: { $in: userIds } }).select('name');\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n         const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n \r\n         const userMap = users.reduce((acc, user) => {\r\n             acc[user._id] = user.name;\r\n@@ -454,2625 +454,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario a cada registro de auditoría\r\n-        const auditsWithUserNames = audits.map(audit => ({\r\n-            ...audit.toObject(),\r\n-            userName: userMap[audit.userId] || 'Usuario desconocido'\r\n-        }));\r\n-\r\n-        res.status(200).json(auditsWithUserNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import \r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('name');\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario a cada registro de auditoría\r\n-        const auditsWithUserNames = audits.map(audit => ({\r\n-            ...audit.toObject(),\r\n-            userName: userMap[audit.userId] || 'Usuario desconocido'\r\n-        }));\r\n-\r\n-        res.status(200).json(auditsWithUserNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('name');\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario a cada registro de auditoría\r\n-        const auditsWithUserNames = audits.map(audit => ({\r\n-            ...audit.toObject(),\r\n-            userName: userMap[audit.userId] || 'Usuario desconocido'\r\n-        }));\r\n-\r\n-        res.status(200).json(auditsWithUserNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-        res.status(200).json(audits);\r\n-        console\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-        res.status(200).json(audits);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-        res.status(200).json(audits);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1732067599656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,485 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', async (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    try {\r\n+        // Obtener el code_verifier almacenado previamente\r\n+        const codeVerifier = await getCodeVerifier(id); // Implementa esta función para obtener el code_verifier\r\n+\r\n+        // Solicitar el token de acceso a la API de Mercado Pago\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', null, {\r\n+            params: {\r\n+                grant_type: 'authorization_code',\r\n+                client_id: '1901957005842671',\r\n+                client_secret: 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti',\r\n+                code: code,\r\n+                redirect_uri: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback',\r\n+                code_verifier: codeVerifier // Incluye el code_verifier en la solicitud\r\n+            },\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded'\r\n+            }\r\n+        });\r\n+\r\n+        const { access_token, refresh_token } = response.data;\r\n+\r\n+        // Actualizar la organización benéfica con el token de acceso\r\n+        await Charity.findByIdAndUpdate(id, { accessToken: access_token, refreshToken: refresh_token });\r\n+\r\n+        res.redirect(`/mercadopago/success?charityId=${id}`);\r\n+    } catch (error) {\r\n+        console.error('Error al obtener el token de acceso:', error);\r\n+        res.status(500).json({ message: 'Error al obtener el token de acceso' });\r\n+    }\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732067825937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,41 +22,13 @@\n     res.redirect(authorizationUrl);\r\n });\r\n \r\n // Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', async (req, res) => {\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n     const { code, state } = req.query;\r\n     const id = state;\r\n \r\n-    try {\r\n-        // Obtener el code_verifier almacenado previamente\r\n-        const codeVerifier = await getCodeVerifier(id); // Implementa esta función para obtener el code_verifier\r\n-\r\n-        // Solicitar el token de acceso a la API de Mercado Pago\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', null, {\r\n-            params: {\r\n-                grant_type: 'authorization_code',\r\n-                client_id: '1901957005842671',\r\n-                client_secret: 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti',\r\n-                code: code,\r\n-                redirect_uri: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback',\r\n-                code_verifier: codeVerifier // Incluye el code_verifier en la solicitud\r\n-            },\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded'\r\n-            }\r\n-        });\r\n-\r\n-        const { access_token, refresh_token } = response.data;\r\n-\r\n-        // Actualizar la organización benéfica con el token de acceso\r\n-        await Charity.findByIdAndUpdate(id, { accessToken: access_token, refreshToken: refresh_token });\r\n-\r\n-        res.redirect(`/mercadopago/success?charityId=${id}`);\r\n-    } catch (error) {\r\n-        console.error('Error al obtener el token de acceso:', error);\r\n-        res.status(500).json({ message: 'Error al obtener el token de acceso' });\r\n-    }\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n });\r\n \r\n // Callback para recibir el código de autorización\r\n router.get('/mercadopago/callback/:id', async (req, res) => {\r\n"
                },
                {
                    "date": 1732068107767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,464 +12,8 @@\n \r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n // Ruta para autenticar a la organización benéfica\r\n router.get('/mercadopago/auth/:id', (req, res) => {\r\n     const { id } = req.params;\r\n     const client_id = '1901957005842671';\r\n@@ -499,15 +43,17 @@\n     try {\r\n         const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n \r\n         const params = new URLSearchParams();\r\n         params.append('grant_type', 'authorization_code');\r\n         params.append('client_id', client_id);\r\n         params.append('client_secret', client_secret);\r\n         params.append('code', authorizationCode);\r\n         params.append('redirect_uri', redirect_uri);\r\n+        params.append('code_verifier', code_verifier);\r\n \r\n         const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n             headers: {\r\n                 'Content-Type': 'application/x-www-form-urlencoded',\r\n"
                },
                {
                    "date": 1732068239162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,467 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    // Genera un code_verifier y code_challenge\r\n+    const code_verifier = crypto.randomBytes(32).toString('hex');\r\n+    const code_challenge = crypto.createHash('sha256').update(code_verifier).digest('base64url');\r\n+\r\n+    // Guarda el code_verifier en la sesión o en la base de datos\r\n+    req.session.code_verifier = code_verifier;\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+        const code_verifier = req.session.code_verifier; // Recupera el code_verifier de la sesión o base de datos\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+        params.append('code_verifier', code_verifier);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732068304414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,16 +18,9 @@\n     const { id } = req.params;\r\n     const client_id = '1901957005842671';\r\n     const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n \r\n-    // Genera un code_verifier y code_challenge\r\n-    const code_verifier = crypto.randomBytes(32).toString('hex');\r\n-    const code_challenge = crypto.createHash('sha256').update(code_verifier).digest('base64url');\r\n-\r\n-    // Guarda el code_verifier en la sesión o en la base de datos\r\n-    req.session.code_verifier = code_verifier;\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n     res.redirect(authorizationUrl);\r\n });\r\n \r\n // Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n@@ -50,9 +43,9 @@\n     try {\r\n         const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-        const code_verifier = req.session.code_verifier; // Recupera el code_verifier de la sesión o base de datos\r\n+        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n \r\n         const params = new URLSearchParams();\r\n         params.append('grant_type', 'authorization_code');\r\n         params.append('client_id', client_id);\r\n"
                },
                {
                    "date": 1732068712328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,460 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+        params.append('code_verifier', code_verifier);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732068789863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,475 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    // Genera un code_verifier y code_challenge\r\n+    const code_verifier = crypto.randomBytes(32).toString('hex');\r\n+    const code_challenge = crypto.createHash('sha256').update(code_verifier).digest('base64url');\r\n+\r\n+    // Guarda el code_verifier en la base de datos\r\n+    const charity = await Charity.findById(id);\r\n+    if (charity) {\r\n+        charity.codeVerifier = code_verifier;\r\n+        await charity.save();\r\n+    } else {\r\n+        return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+    }\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        // Recupera el code_verifier de la base de datos\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+        const code_verifier = charity.codeVerifier;\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+        params.append('code_verifier', code_verifier);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        charity.accessToken = access_token;\r\n+        charity.refreshToken = refresh_token;\r\n+        charity.expirationTime = expirationTime;\r\n+        await charity.save();\r\n+\r\n+        return res.json({ \r\n+            message: 'Autorización completada exitosamente',\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732068878552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,476 @@\n+import express from 'express';\r\n+import crypto from 'crypto';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    // Genera un code_verifier y code_challenge\r\n+    const code_verifier = crypto.randomBytes(32).toString('hex');\r\n+    const code_challenge = crypto.createHash('sha256').update(code_verifier).digest('base64url');\r\n+\r\n+    // Guarda el code_verifier en la base de datos\r\n+    const charity = await Charity.findById(id);\r\n+    if (charity) {\r\n+        charity.codeVerifier = code_verifier;\r\n+        await charity.save();\r\n+    } else {\r\n+        return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+    }\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        // Recupera el code_verifier de la base de datos\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+        const code_verifier = charity.codeVerifier;\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+        params.append('code_verifier', code_verifier);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        charity.accessToken = access_token;\r\n+        charity.refreshToken = refresh_token;\r\n+        charity.expirationTime = expirationTime;\r\n+        await charity.save();\r\n+\r\n+        return res.json({ \r\n+            message: 'Autorización completada exitosamente',\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732069128881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import express from 'express';\r\n-import crypto from 'crypto';\r\n import axios from 'axios';\r\n import Charity from '../models/charity.js'; \r\n import mongoose from 'mongoose';\r\n import Donation from '../models/donation.js';\r\n@@ -14,27 +13,14 @@\n const router = express.Router();\r\n \r\n \r\n // Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', async (req, res) => {\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n     const { id } = req.params;\r\n     const client_id = '1901957005842671';\r\n     const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n \r\n-    // Genera un code_verifier y code_challenge\r\n-    const code_verifier = crypto.randomBytes(32).toString('hex');\r\n-    const code_challenge = crypto.createHash('sha256').update(code_verifier).digest('base64url');\r\n-\r\n-    // Guarda el code_verifier en la base de datos\r\n-    const charity = await Charity.findById(id);\r\n-    if (charity) {\r\n-        charity.codeVerifier = code_verifier;\r\n-        await charity.save();\r\n-    } else {\r\n-        return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-    }\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n     res.redirect(authorizationUrl);\r\n });\r\n \r\n // Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n@@ -57,16 +43,10 @@\n     try {\r\n         const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n \r\n-        // Recupera el code_verifier de la base de datos\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-        const code_verifier = charity.codeVerifier;\r\n-\r\n         const params = new URLSearchParams();\r\n         params.append('grant_type', 'authorization_code');\r\n         params.append('client_id', client_id);\r\n         params.append('client_secret', client_secret);\r\n@@ -82,17 +62,21 @@\n \r\n         const { access_token, refresh_token, expires_in } = response.data;\r\n         const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n-        charity.accessToken = access_token;\r\n-        charity.refreshToken = refresh_token;\r\n-        charity.expirationTime = expirationTime;\r\n-        await charity.save();\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n \r\n-        return res.json({ \r\n-            message: 'Autorización completada exitosamente',\r\n-        });\r\n-\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n     }\r\n"
                },
                {
                    "date": 1732069201575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n import User from '../models/user.js';\r\n \r\n const router = express.Router();\r\n \r\n-\r\n // Ruta para autenticar a la organización benéfica\r\n router.get('/mercadopago/auth/:id', (req, res) => {\r\n     const { id } = req.params;\r\n     const client_id = '1901957005842671';\r\n@@ -43,17 +42,15 @@\n     try {\r\n         const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n \r\n         const params = new URLSearchParams();\r\n         params.append('grant_type', 'authorization_code');\r\n         params.append('client_id', client_id);\r\n         params.append('client_secret', client_secret);\r\n         params.append('code', authorizationCode);\r\n         params.append('redirect_uri', redirect_uri);\r\n-        params.append('code_verifier', code_verifier);\r\n \r\n         const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n             headers: {\r\n                 'Content-Type': 'application/x-www-form-urlencoded',\r\n@@ -457,1859 +454,4 @@\n \r\n \r\n \r\n \r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    // Genera un code_verifier y code_challenge\r\n-    const code_verifier = crypto.randomBytes(32).toString('hex');\r\n-    const code_challenge = crypto.createHash('sha256').update(code_verifier).digest('base64url');\r\n-\r\n-    // Guarda el code_verifier en la base de datos\r\n-    const charity = await Charity.findById(id);\r\n-    if (charity) {\r\n-        charity.codeVerifier = code_verifier;\r\n-        await charity.save();\r\n-    } else {\r\n-        return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-    }\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        // Recupera el code_verifier de la base de datos\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-        const code_verifier = charity.codeVerifier;\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-        params.append('code_verifier', code_verifier);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        charity.accessToken = access_token;\r\n-        charity.refreshToken = refresh_token;\r\n-        charity.expirationTime = expirationTime;\r\n-        await charity.save();\r\n-\r\n-        return res.json({ \r\n-            message: 'Autorización completada exitosamente',\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-        params.append('code_verifier', code_verifier);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-        params.append('code_verifier', code_verifier);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-        const code_verifier = 'your_code_verifier'; // Debes generar y almacenar el code_verifier\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-        params.append('code_verifier', code_verifier);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1732069509078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,456 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', (req, res) => {\r\n+    const { code, state } = req.query;\r\n+    const id = state;\r\n+    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams();\r\n+        params.append('grant_type', 'authorization_code');\r\n+        params.append('client_id', client_id);\r\n+        params.append('client_secret', client_secret);\r\n+        params.append('code', authorizationCode);\r\n+        params.append('redirect_uri', redirect_uri);\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732069686498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,8 @@\n             });\r\n         } else {\r\n             return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n         }\r\n-\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n     }\r\n"
                },
                {
                    "date": 1732070365543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,15 +42,18 @@\n         const client_id = '1901957005842671';\r\n         const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n         const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n \r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n+        const params = new URLSearchParams({\r\n+            grant_type: 'authorization_code',\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n \r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n         const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n             headers: {\r\n                 'Content-Type': 'application/x-www-form-urlencoded',\r\n             },\r\n@@ -71,13 +74,14 @@\n         } else {\r\n             return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n         }\r\n     } catch (error) {\r\n-        console.error(error);\r\n+        console.error(\"Error Data:\", error.response ? error.response.data : error.message);\r\n         res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n     }\r\n });\r\n \r\n+\r\n router.get('/charities', async (req, res) => {\r\n     try {\r\n         const charities = await Charity.find();\r\n         res.json(charities);\r\n"
                },
                {
                    "date": 1732070760106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,504 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get('/mercadopago/auth/:id', (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = '1901957005842671';\r\n+    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get('/mercadopago/callback', async (req, res) => {\r\n+    const { code, state: charityId } = req.query;\r\n+  \r\n+    if (!code) {\r\n+      return res.status(400).json({ message: 'Falta el código de autorización.' });\r\n+    }\r\n+  \r\n+    try {\r\n+      const client_id = '1901957005842671';\r\n+      const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+      const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+  \r\n+      // Hacer la solicitud para obtener el token de Mercado Pago\r\n+      const params = new URLSearchParams({\r\n+        grant_type: 'authorization_code',\r\n+        client_id,\r\n+        client_secret,\r\n+        code,\r\n+        redirect_uri\r\n+      });\r\n+  \r\n+      const { data } = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\r\n+      });\r\n+  \r\n+      const { access_token, refresh_token, expires_in } = data;\r\n+  \r\n+      // Calcular el tiempo de expiración en segundos\r\n+      const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+  \r\n+      // Buscar la organización por ID y actualizar los tokens\r\n+      const charity = await Charity.findById(charityId);\r\n+      if (!charity) {\r\n+        return res.status(404).json({ message: 'Organización no encontrada.' });\r\n+      }\r\n+  \r\n+      // Usar el método `updateTokens` del modelo\r\n+      await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+  \r\n+      res.status(200).json({\r\n+        message: 'Tokens almacenados correctamente.',\r\n+        accessToken: charity.accessToken,\r\n+        refreshToken: charity.refreshToken,\r\n+        tokenExpiration: charity.tokenExpiration\r\n+      });\r\n+    } catch (error) {\r\n+      console.error('Error al procesar el callback de Mercado Pago:', error.response?.data || error.message);\r\n+      res.status(500).json({ message: 'Error al procesar los tokens.', error: error.message });\r\n+    }\r\n+  });\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = '1901957005842671';\r\n+        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n+        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+\r\n+        const params = new URLSearchParams({\r\n+            grant_type: 'authorization_code',\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n+            headers: {\r\n+                'Content-Type': 'application/x-www-form-urlencoded',\r\n+            },\r\n+        });\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({ \r\n+                message: 'Autorización completada exitosamente',\r\n+            });\r\n+        } else {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\"Error Data:\", error.response ? error.response.data : error.message);\r\n+        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732070773910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,629 @@\n+import express from \"express\";\r\n+import axios from \"axios\";\r\n+import Charity from \"../models/charity.js\";\r\n+import mongoose from \"mongoose\";\r\n+import Donation from \"../models/donation.js\";\r\n+import { generateReport } from \"../services/reportesdonaciones.js\";\r\n+import donationproducts from \"../models/donationproducts.js\";\r\n+import { generateExcelReport } from \"../services/reportescomida.js\";\r\n+import recordAudit from \"../lib/recordAudit.js\";\r\n+import Audit from \"../models/auditorias.js\";\r\n+import User from \"../models/user.js\";\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+  const { id } = req.params;\r\n+  const client_id = \"1901957005842671\";\r\n+  const redirect_uri =\r\n+    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+  const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+  res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n+  const { code, state: charityId } = req.query;\r\n+\r\n+  if (!code) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"Falta el código de autorización.\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const client_id = \"1901957005842671\";\r\n+    const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+    const redirect_uri =\r\n+      \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    // Hacer la solicitud para obtener el token de Mercado Pago\r\n+    const params = new URLSearchParams({\r\n+      grant_type: \"authorization_code\",\r\n+      client_id,\r\n+      client_secret,\r\n+      code,\r\n+      redirect_uri,\r\n+    });\r\n+\r\n+    const { data } = await axios.post(\r\n+      \"https://api.mercadopago.com/oauth/token\",\r\n+      params,\r\n+      {\r\n+        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+      }\r\n+    );\r\n+\r\n+    const { access_token, refresh_token, expires_in } = data;\r\n+\r\n+    // Calcular el tiempo de expiración en segundos\r\n+    const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+    // Buscar la organización por ID y actualizar los tokens\r\n+    const charity = await Charity.findById(charityId);\r\n+    if (!charity) {\r\n+      return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+    }\r\n+\r\n+    // Usar el método `updateTokens` del modelo\r\n+    await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+\r\n+    res.status(200).json({\r\n+      message: \"Tokens almacenados correctamente.\",\r\n+      accessToken: charity.accessToken,\r\n+      refreshToken: charity.refreshToken,\r\n+      tokenExpiration: charity.tokenExpiration,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\r\n+      \"Error al procesar el callback de Mercado Pago:\",\r\n+      error.response?.data || error.message\r\n+    );\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+  }\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const authorizationCode = req.query.code;\r\n+\r\n+  if (!authorizationCode) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"Código de autorización no proporcionado\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const client_id = \"1901957005842671\";\r\n+    const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+    const redirect_uri =\r\n+      \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const params = new URLSearchParams({\r\n+      grant_type: \"authorization_code\",\r\n+      client_id,\r\n+      client_secret,\r\n+      code: authorizationCode,\r\n+      redirect_uri,\r\n+    });\r\n+\r\n+    console.log(\"Params:\", params.toString());\r\n+\r\n+    const response = await axios.post(\r\n+      \"https://api.mercadopago.com/oauth/token\",\r\n+      params,\r\n+      {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    const { access_token, refresh_token, expires_in } = response.data;\r\n+    const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+    const charity = await Charity.findById(id);\r\n+    if (charity) {\r\n+      charity.accessToken = access_token;\r\n+      charity.refreshToken = refresh_token;\r\n+      charity.expirationTime = expirationTime;\r\n+      await charity.save();\r\n+      return res.json({\r\n+        message: \"Autorización completada exitosamente\",\r\n+      });\r\n+    } else {\r\n+      return res\r\n+        .status(404)\r\n+        .json({ message: \"Organización benéfica no encontrada\" });\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\r\n+      \"Error Data:\",\r\n+      error.response ? error.response.data : error.message\r\n+    );\r\n+    res\r\n+      .status(500)\r\n+      .json({\r\n+        message: `Error al obtener el token: ${\r\n+          error.response ? error.response.data : error.message\r\n+        }`,\r\n+      });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/charities\", async (req, res) => {\r\n+  try {\r\n+    const charities = await Charity.find();\r\n+    res.json(charities);\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n+  }\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const { amount, donorName } = req.body;\r\n+\r\n+  console.log(\"amount\", amount);\r\n+\r\n+  if (!mongoose.isValidObjectId(id)) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"ID de organización benéfica no válido\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const charity = await Charity.findById(id);\r\n+    if (!charity) {\r\n+      return res\r\n+        .status(404)\r\n+        .json({ message: \"Organización benéfica no encontrada\" });\r\n+    }\r\n+\r\n+    const preferenceData = {\r\n+      items: [\r\n+        {\r\n+          title: `Donación para ${charity.nombre}`,\r\n+          quantity: 1,\r\n+          unit_price: parseFloat(amount),\r\n+          currency_id: \"PEN\",\r\n+        },\r\n+      ],\r\n+      payer: {\r\n+        name: donorName,\r\n+      },\r\n+      back_urls: {\r\n+        success:\r\n+          \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n+        failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n+      },\r\n+      auto_return: \"approved\",\r\n+      external_reference: id,\r\n+    };\r\n+\r\n+    const response = await axios.post(\r\n+      \"https://api.mercadopago.com/checkout/preferences\",\r\n+      preferenceData,\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${charity.accessToken}`,\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    return res.json({\r\n+      message: \"Preferencia de pago creada\",\r\n+      init_point: response.data.init_point,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/success\", async (req, res) => {\r\n+  const paymentId = req.query.payment_id;\r\n+\r\n+  try {\r\n+    const response = await axios.get(\r\n+      `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    const paymentDetails = response.data;\r\n+    const payer = paymentDetails.payer || {};\r\n+    const card = paymentDetails.card || {};\r\n+\r\n+    const payerName = `${payer.first_name || \"\"} ${\r\n+      payer.last_name || \"\"\r\n+    }`.trim();\r\n+    const payerEmail = payer.email || \"No disponible\";\r\n+    const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n+    const paymentAmount = paymentDetails.transaction_amount;\r\n+    const paymentStatus = paymentDetails.status;\r\n+    const paymentMethod = paymentDetails.payment_method_id;\r\n+    const charityId = paymentDetails.external_reference;\r\n+\r\n+    if (!charityId || charityId === \"null\") {\r\n+      throw new Error(\r\n+        \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n+      );\r\n+    }\r\n+\r\n+    const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+    const donation = new Donation({\r\n+      charityId: charityObjectId,\r\n+      donorName: payerName || \"Nombre no disponible\",\r\n+      donorEmail: payerEmail,\r\n+      amount: paymentAmount,\r\n+      paymentId,\r\n+      paymentStatus,\r\n+      paymentMethod,\r\n+      cardLastFourDigits,\r\n+      currency: paymentDetails.currency_id || \"No disponible\",\r\n+    });\r\n+\r\n+    await donation.save();\r\n+\r\n+    res.redirect(\"http://localhost:3000/gracias\");\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({\r\n+        message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n+      });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n+  const { charityId } = req.params;\r\n+  if (!mongoose.isValidObjectId(charityId)) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"ID de organización benéfica no válido\" });\r\n+  }\r\n+  try {\r\n+    const donations = await Donation.find({ charityId: charityId });\r\n+    if (!donations.length) {\r\n+      return res\r\n+        .status(404)\r\n+        .json({\r\n+          message:\r\n+            \"No se encontraron donaciones para esta organización benéfica\",\r\n+        });\r\n+    }\r\n+    res.json(donations);\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+  }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/error\", (req, res) => {\r\n+  const paymentId = req.query.payment_id;\r\n+  const status = req.query.status;\r\n+  const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+  res.json({\r\n+    message: \"error en el pago\",\r\n+  });\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n+  await generateReport(req, res, \"weekly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n+  await generateReport(req, res, \"monthly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n+  await generateReport(req, res, \"annual\");\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n+  const {\r\n+    charityId,\r\n+    donorName,\r\n+    itemType,\r\n+    quantity,\r\n+    unit,\r\n+    valuePerUnit,\r\n+    userId,\r\n+  } = req.body;\r\n+\r\n+  if (!mongoose.isValidObjectId(charityId)) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"ID de organización benéfica no válido\" });\r\n+  }\r\n+\r\n+  if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"Todos los campos son obligatorios\" });\r\n+  }\r\n+\r\n+  // Validar la unidad\r\n+  const validUnits = [\"kg\", \"unidad\"];\r\n+  if (!validUnits.includes(unit)) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({\r\n+        message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n+          \", \"\r\n+        )}`,\r\n+      });\r\n+  }\r\n+\r\n+  try {\r\n+    const donationProduct = new donationproducts({\r\n+      charityId,\r\n+      donorName,\r\n+      itemType,\r\n+      quantity,\r\n+      unit,\r\n+      valuePerUnit,\r\n+    });\r\n+\r\n+    await donationProduct.save();\r\n+    await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n+      donationData: req.body,\r\n+    });\r\n+    res\r\n+      .status(201)\r\n+      .json({ message: \"Donación en especie registrada exitosamente\" });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al registrar la donación: ${error.message}` });\r\n+  }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n+  const { charityId } = req.params;\r\n+  const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+  if (!mongoose.isValidObjectId(charityId)) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"ID de organización benéfica no válido\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const donationsInKind = await donationproducts.find({\r\n+      charityId: charityId,\r\n+    });\r\n+\r\n+    if (!donationsInKind.length) {\r\n+      return res\r\n+        .status(404)\r\n+        .json({\r\n+          message:\r\n+            \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n+        });\r\n+    }\r\n+\r\n+    const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+      return acc + donation.quantity * donation.valuePerUnit;\r\n+    }, 0);\r\n+\r\n+    const report = donationsInKind.map((donation) => ({\r\n+      donationId: donation._id,\r\n+      donorName: donation.donorName,\r\n+      itemType: donation.itemType,\r\n+      quantity: donation.quantity,\r\n+      unit: donation.unit,\r\n+      valuePerUnit: donation.valuePerUnit,\r\n+      totalValue: donation.quantity * donation.valuePerUnit,\r\n+      createdAt: donation.createdAt,\r\n+    }));\r\n+\r\n+    // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+    const donationIds = donationsInKind.map((donation) => donation._id);\r\n+\r\n+    await recordAudit(\"report\", charityId, null, userId, {\r\n+      reportType: \"in-kind\",\r\n+      donationIds,\r\n+    });\r\n+    res.json({ totalValue, report });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al generar el reporte: ${error.message}` });\r\n+  }\r\n+});\r\n+// Editar una donación existente\r\n+router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+  const { donationId } = req.params;\r\n+  const { userId, ...updateData } = req.body;\r\n+\r\n+  if (!mongoose.isValidObjectId(donationId)) {\r\n+    return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const donation = await donationproducts.findById(donationId);\r\n+    if (!donation) {\r\n+      return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+    }\r\n+\r\n+    const before = donation.toObject();\r\n+    Object.assign(donation, updateData);\r\n+    await donation.save();\r\n+\r\n+    await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n+      before,\r\n+      after: donation.toObject(),\r\n+    });\r\n+    res\r\n+      .status(200)\r\n+      .json({ message: \"Donación editada correctamente\", donation });\r\n+  } catch (error) {\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al editar la donación: ${error.message}` });\r\n+  }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+  const { donationId } = req.params;\r\n+  const { userId, reason } = req.body;\r\n+\r\n+  if (!mongoose.isValidObjectId(donationId)) {\r\n+    return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const donation = await donationproducts.findById(donationId);\r\n+    if (!donation) {\r\n+      return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+    }\r\n+\r\n+    const before = donation.toObject();\r\n+    await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+    await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n+      before,\r\n+      reason,\r\n+    });\r\n+    res.status(200).json({ message: \"Donación eliminada\" });\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+  }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get(\r\n+  \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n+  async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+      return res\r\n+        .status(400)\r\n+        .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n+    await generateExcelReport(charityId, \"weekly\", res);\r\n+  }\r\n+);\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get(\r\n+  \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n+  async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+      return res\r\n+        .status(400)\r\n+        .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n+    await generateExcelReport(charityId, \"monthly\", res);\r\n+  }\r\n+);\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get(\r\n+  \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n+  async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+      return res\r\n+        .status(400)\r\n+        .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n+    await generateExcelReport(charityId, \"annual\", res);\r\n+  }\r\n+);\r\n+\r\n+router.get(\"/audits/:charityId\", async (req, res) => {\r\n+  const { charityId } = req.params;\r\n+  if (!mongoose.isValidObjectId(charityId)) {\r\n+    return res\r\n+      .status(400)\r\n+      .json({ message: \"ID de organización benéfica no válido\" });\r\n+  }\r\n+\r\n+  try {\r\n+    const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+    // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+    const userIds = audits\r\n+      .map((audit) => audit.userId)\r\n+      .filter((userId) => userId);\r\n+    const charityIds = audits\r\n+      .map((audit) => audit.charityId)\r\n+      .filter((charityId) => charityId);\r\n+\r\n+    const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n+    const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n+      \"nombre\"\r\n+    );\r\n+\r\n+    const userMap = users.reduce((acc, user) => {\r\n+      acc[user._id] = user.name;\r\n+      return acc;\r\n+    }, {});\r\n+\r\n+    const charityMap = charities.reduce((acc, charity) => {\r\n+      acc[charity._id] = charity.nombre;\r\n+      return acc;\r\n+    }, {});\r\n+\r\n+    // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+    const auditsWithNames = audits.map((audit) => {\r\n+      const userName =\r\n+        userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n+      return {\r\n+        ...audit.toObject(),\r\n+        userName,\r\n+      };\r\n+    });\r\n+\r\n+    res.status(200).json(auditsWithNames);\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+    res\r\n+      .status(500)\r\n+      .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+  }\r\n+});\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1732070853130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,1185 +13,116 @@\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n-  const { id } = req.params;\r\n-  const client_id = \"1901957005842671\";\r\n-  const redirect_uri =\r\n-    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-  const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-  res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get(\"/mercadopago/callback\", async (req, res) => {\r\n-  const { code, state: charityId } = req.query;\r\n-\r\n-  if (!code) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"Falta el código de autorización.\" });\r\n-  }\r\n-\r\n-  try {\r\n+    const { id } = req.params;\r\n     const client_id = \"1901957005842671\";\r\n-    const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n     const redirect_uri =\r\n-      \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n-    // Hacer la solicitud para obtener el token de Mercado Pago\r\n-    const params = new URLSearchParams({\r\n-      grant_type: \"authorization_code\",\r\n-      client_id,\r\n-      client_secret,\r\n-      code,\r\n-      redirect_uri,\r\n-    });\r\n-\r\n-    const { data } = await axios.post(\r\n-      \"https://api.mercadopago.com/oauth/token\",\r\n-      params,\r\n-      {\r\n-        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-      }\r\n-    );\r\n-\r\n-    const { access_token, refresh_token, expires_in } = data;\r\n-\r\n-    // Calcular el tiempo de expiración en segundos\r\n-    const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-    // Buscar la organización por ID y actualizar los tokens\r\n-    const charity = await Charity.findById(charityId);\r\n-    if (!charity) {\r\n-      return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n-    }\r\n-\r\n-    // Usar el método `updateTokens` del modelo\r\n-    await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-\r\n-    res.status(200).json({\r\n-      message: \"Tokens almacenados correctamente.\",\r\n-      accessToken: charity.accessToken,\r\n-      refreshToken: charity.refreshToken,\r\n-      tokenExpiration: charity.tokenExpiration,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\r\n-      \"Error al procesar el callback de Mercado Pago:\",\r\n-      error.response?.data || error.message\r\n-    );\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n-  }\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const authorizationCode = req.query.code;\r\n-\r\n-  if (!authorizationCode) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"Código de autorización no proporcionado\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const client_id = \"1901957005842671\";\r\n-    const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-    const redirect_uri =\r\n-      \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const params = new URLSearchParams({\r\n-      grant_type: \"authorization_code\",\r\n-      client_id,\r\n-      client_secret,\r\n-      code: authorizationCode,\r\n-      redirect_uri,\r\n-    });\r\n-\r\n-    console.log(\"Params:\", params.toString());\r\n-\r\n-    const response = await axios.post(\r\n-      \"https://api.mercadopago.com/oauth/token\",\r\n-      params,\r\n-      {\r\n-        headers: {\r\n-          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    const { access_token, refresh_token, expires_in } = response.data;\r\n-    const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-    const charity = await Charity.findById(id);\r\n-    if (charity) {\r\n-      charity.accessToken = access_token;\r\n-      charity.refreshToken = refresh_token;\r\n-      charity.expirationTime = expirationTime;\r\n-      await charity.save();\r\n-      return res.json({\r\n-        message: \"Autorización completada exitosamente\",\r\n-      });\r\n-    } else {\r\n-      return res\r\n-        .status(404)\r\n-        .json({ message: \"Organización benéfica no encontrada\" });\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(\r\n-      \"Error Data:\",\r\n-      error.response ? error.response.data : error.message\r\n-    );\r\n-    res\r\n-      .status(500)\r\n-      .json({\r\n-        message: `Error al obtener el token: ${\r\n-          error.response ? error.response.data : error.message\r\n-        }`,\r\n-      });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/charities\", async (req, res) => {\r\n-  try {\r\n-    const charities = await Charity.find();\r\n-    res.json(charities);\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n-  }\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const { amount, donorName } = req.body;\r\n-\r\n-  console.log(\"amount\", amount);\r\n-\r\n-  if (!mongoose.isValidObjectId(id)) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"ID de organización benéfica no válido\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const charity = await Charity.findById(id);\r\n-    if (!charity) {\r\n-      return res\r\n-        .status(404)\r\n-        .json({ message: \"Organización benéfica no encontrada\" });\r\n-    }\r\n-\r\n-    const preferenceData = {\r\n-      items: [\r\n-        {\r\n-          title: `Donación para ${charity.nombre}`,\r\n-          quantity: 1,\r\n-          unit_price: parseFloat(amount),\r\n-          currency_id: \"PEN\",\r\n-        },\r\n-      ],\r\n-      payer: {\r\n-        name: donorName,\r\n-      },\r\n-      back_urls: {\r\n-        success:\r\n-          \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n-        failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n-      },\r\n-      auto_return: \"approved\",\r\n-      external_reference: id,\r\n-    };\r\n-\r\n-    const response = await axios.post(\r\n-      \"https://api.mercadopago.com/checkout/preferences\",\r\n-      preferenceData,\r\n-      {\r\n-        headers: {\r\n-          Authorization: `Bearer ${charity.accessToken}`,\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    return res.json({\r\n-      message: \"Preferencia de pago creada\",\r\n-      init_point: response.data.init_point,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/success\", async (req, res) => {\r\n-  const paymentId = req.query.payment_id;\r\n-\r\n-  try {\r\n-    const response = await axios.get(\r\n-      `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n-      {\r\n-        headers: {\r\n-          Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    const paymentDetails = response.data;\r\n-    const payer = paymentDetails.payer || {};\r\n-    const card = paymentDetails.card || {};\r\n-\r\n-    const payerName = `${payer.first_name || \"\"} ${\r\n-      payer.last_name || \"\"\r\n-    }`.trim();\r\n-    const payerEmail = payer.email || \"No disponible\";\r\n-    const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n-    const paymentAmount = paymentDetails.transaction_amount;\r\n-    const paymentStatus = paymentDetails.status;\r\n-    const paymentMethod = paymentDetails.payment_method_id;\r\n-    const charityId = paymentDetails.external_reference;\r\n-\r\n-    if (!charityId || charityId === \"null\") {\r\n-      throw new Error(\r\n-        \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n-      );\r\n-    }\r\n-\r\n-    const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-    const donation = new Donation({\r\n-      charityId: charityObjectId,\r\n-      donorName: payerName || \"Nombre no disponible\",\r\n-      donorEmail: payerEmail,\r\n-      amount: paymentAmount,\r\n-      paymentId,\r\n-      paymentStatus,\r\n-      paymentMethod,\r\n-      cardLastFourDigits,\r\n-      currency: paymentDetails.currency_id || \"No disponible\",\r\n-    });\r\n-\r\n-    await donation.save();\r\n-\r\n-    res.redirect(\"http://localhost:3000/gracias\");\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({\r\n-        message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n-      });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n-  const { charityId } = req.params;\r\n-  if (!mongoose.isValidObjectId(charityId)) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"ID de organización benéfica no válido\" });\r\n-  }\r\n-  try {\r\n-    const donations = await Donation.find({ charityId: charityId });\r\n-    if (!donations.length) {\r\n-      return res\r\n-        .status(404)\r\n-        .json({\r\n-          message:\r\n-            \"No se encontraron donaciones para esta organización benéfica\",\r\n-        });\r\n-    }\r\n-    res.json(donations);\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-  }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/error\", (req, res) => {\r\n-  const paymentId = req.query.payment_id;\r\n-  const status = req.query.status;\r\n-  const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-  res.json({\r\n-    message: \"error en el pago\",\r\n-  });\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n-  await generateReport(req, res, \"weekly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n-  await generateReport(req, res, \"monthly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n-  await generateReport(req, res, \"annual\");\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n-  const {\r\n-    charityId,\r\n-    donorName,\r\n-    itemType,\r\n-    quantity,\r\n-    unit,\r\n-    valuePerUnit,\r\n-    userId,\r\n-  } = req.body;\r\n-\r\n-  if (!mongoose.isValidObjectId(charityId)) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"ID de organización benéfica no válido\" });\r\n-  }\r\n-\r\n-  if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"Todos los campos son obligatorios\" });\r\n-  }\r\n-\r\n-  // Validar la unidad\r\n-  const validUnits = [\"kg\", \"unidad\"];\r\n-  if (!validUnits.includes(unit)) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({\r\n-        message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n-          \", \"\r\n-        )}`,\r\n-      });\r\n-  }\r\n-\r\n-  try {\r\n-    const donationProduct = new donationproducts({\r\n-      charityId,\r\n-      donorName,\r\n-      itemType,\r\n-      quantity,\r\n-      unit,\r\n-      valuePerUnit,\r\n-    });\r\n-\r\n-    await donationProduct.save();\r\n-    await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n-      donationData: req.body,\r\n-    });\r\n-    res\r\n-      .status(201)\r\n-      .json({ message: \"Donación en especie registrada exitosamente\" });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al registrar la donación: ${error.message}` });\r\n-  }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n-  const { charityId } = req.params;\r\n-  const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-  if (!mongoose.isValidObjectId(charityId)) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"ID de organización benéfica no válido\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const donationsInKind = await donationproducts.find({\r\n-      charityId: charityId,\r\n-    });\r\n-\r\n-    if (!donationsInKind.length) {\r\n-      return res\r\n-        .status(404)\r\n-        .json({\r\n-          message:\r\n-            \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n-        });\r\n-    }\r\n-\r\n-    const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-      return acc + donation.quantity * donation.valuePerUnit;\r\n-    }, 0);\r\n-\r\n-    const report = donationsInKind.map((donation) => ({\r\n-      donationId: donation._id,\r\n-      donorName: donation.donorName,\r\n-      itemType: donation.itemType,\r\n-      quantity: donation.quantity,\r\n-      unit: donation.unit,\r\n-      valuePerUnit: donation.valuePerUnit,\r\n-      totalValue: donation.quantity * donation.valuePerUnit,\r\n-      createdAt: donation.createdAt,\r\n-    }));\r\n-\r\n-    // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-    const donationIds = donationsInKind.map((donation) => donation._id);\r\n-\r\n-    await recordAudit(\"report\", charityId, null, userId, {\r\n-      reportType: \"in-kind\",\r\n-      donationIds,\r\n-    });\r\n-    res.json({ totalValue, report });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al generar el reporte: ${error.message}` });\r\n-  }\r\n-});\r\n-// Editar una donación existente\r\n-router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-  const { donationId } = req.params;\r\n-  const { userId, ...updateData } = req.body;\r\n-\r\n-  if (!mongoose.isValidObjectId(donationId)) {\r\n-    return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const donation = await donationproducts.findById(donationId);\r\n-    if (!donation) {\r\n-      return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-    }\r\n-\r\n-    const before = donation.toObject();\r\n-    Object.assign(donation, updateData);\r\n-    await donation.save();\r\n-\r\n-    await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n-      before,\r\n-      after: donation.toObject(),\r\n-    });\r\n-    res\r\n-      .status(200)\r\n-      .json({ message: \"Donación editada correctamente\", donation });\r\n-  } catch (error) {\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al editar la donación: ${error.message}` });\r\n-  }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-  const { donationId } = req.params;\r\n-  const { userId, reason } = req.body;\r\n-\r\n-  if (!mongoose.isValidObjectId(donationId)) {\r\n-    return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const donation = await donationproducts.findById(donationId);\r\n-    if (!donation) {\r\n-      return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-    }\r\n-\r\n-    const before = donation.toObject();\r\n-    await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-    await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n-      before,\r\n-      reason,\r\n-    });\r\n-    res.status(200).json({ message: \"Donación eliminada\" });\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-  }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get(\r\n-  \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n-  async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n-    await generateExcelReport(charityId, \"weekly\", res);\r\n-  }\r\n-);\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get(\r\n-  \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n-  async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n-    await generateExcelReport(charityId, \"monthly\", res);\r\n-  }\r\n-);\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get(\r\n-  \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n-  async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-      return res\r\n-        .status(400)\r\n-        .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n-    await generateExcelReport(charityId, \"annual\", res);\r\n-  }\r\n-);\r\n-\r\n-router.get(\"/audits/:charityId\", async (req, res) => {\r\n-  const { charityId } = req.params;\r\n-  if (!mongoose.isValidObjectId(charityId)) {\r\n-    return res\r\n-      .status(400)\r\n-      .json({ message: \"ID de organización benéfica no válido\" });\r\n-  }\r\n-\r\n-  try {\r\n-    const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-    // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-    const userIds = audits\r\n-      .map((audit) => audit.userId)\r\n-      .filter((userId) => userId);\r\n-    const charityIds = audits\r\n-      .map((audit) => audit.charityId)\r\n-      .filter((charityId) => charityId);\r\n-\r\n-    const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n-    const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n-      \"nombre\"\r\n-    );\r\n-\r\n-    const userMap = users.reduce((acc, user) => {\r\n-      acc[user._id] = user.name;\r\n-      return acc;\r\n-    }, {});\r\n-\r\n-    const charityMap = charities.reduce((acc, charity) => {\r\n-      acc[charity._id] = charity.nombre;\r\n-      return acc;\r\n-    }, {});\r\n-\r\n-    // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-    const auditsWithNames = audits.map((audit) => {\r\n-      const userName =\r\n-        userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n-      return {\r\n-        ...audit.toObject(),\r\n-        userName,\r\n-      };\r\n-    });\r\n-\r\n-    res.status(200).json(auditsWithNames);\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-    res\r\n-      .status(500)\r\n-      .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-  }\r\n-});\r\n-\r\n-export default router;\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n     const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n     res.redirect(authorizationUrl);\r\n });\r\n \r\n // Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', async (req, res) => {\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n     const { code, state: charityId } = req.query;\r\n-  \r\n+\r\n     if (!code) {\r\n-      return res.status(400).json({ message: 'Falta el código de autorización.' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Falta el código de autorización.\" });\r\n     }\r\n-  \r\n-    try {\r\n-      const client_id = '1901957005842671';\r\n-      const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-      const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-  \r\n-      // Hacer la solicitud para obtener el token de Mercado Pago\r\n-      const params = new URLSearchParams({\r\n-        grant_type: 'authorization_code',\r\n-        client_id,\r\n-        client_secret,\r\n-        code,\r\n-        redirect_uri\r\n-      });\r\n-  \r\n-      const { data } = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\r\n-      });\r\n-  \r\n-      const { access_token, refresh_token, expires_in } = data;\r\n-  \r\n-      // Calcular el tiempo de expiración en segundos\r\n-      const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-  \r\n-      // Buscar la organización por ID y actualizar los tokens\r\n-      const charity = await Charity.findById(charityId);\r\n-      if (!charity) {\r\n-        return res.status(404).json({ message: 'Organización no encontrada.' });\r\n-      }\r\n-  \r\n-      // Usar el método `updateTokens` del modelo\r\n-      await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-  \r\n-      res.status(200).json({\r\n-        message: 'Tokens almacenados correctamente.',\r\n-        accessToken: charity.accessToken,\r\n-        refreshToken: charity.refreshToken,\r\n-        tokenExpiration: charity.tokenExpiration\r\n-      });\r\n-    } catch (error) {\r\n-      console.error('Error al procesar el callback de Mercado Pago:', error.response?.data || error.message);\r\n-      res.status(500).json({ message: 'Error al procesar los tokens.', error: error.message });\r\n-    }\r\n-  });\r\n \r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n     try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n+        // Hacer la solicitud para obtener el token de Mercado Pago\r\n         const params = new URLSearchParams({\r\n-            grant_type: 'authorization_code',\r\n+            grant_type: \"authorization_code\",\r\n             client_id,\r\n             client_secret,\r\n-            code: authorizationCode,\r\n+            code,\r\n             redirect_uri,\r\n         });\r\n \r\n-        console.log(\"Params:\", params.toString());\r\n+        const { data } = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+            }\r\n+        );\r\n \r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n+        const { access_token, refresh_token, expires_in } = data;\r\n \r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n+        // Calcular el tiempo de expiración en segundos\r\n         const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\"Error Data:\", error.response ? error.response.data : error.message);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n-\r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n+        // Buscar la organización por ID y actualizar los tokens\r\n+        const charity = await Charity.findById(charityId);\r\n         if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n         }\r\n \r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n+        // Usar el método `updateTokens` del modelo\r\n+        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n \r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n+        res.status(200).json({\r\n+            message: \"Tokens almacenados correctamente.\",\r\n+            accessToken: charity.accessToken,\r\n+            refreshToken: charity.refreshToken,\r\n+            tokenExpiration: charity.tokenExpiration,\r\n         });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n     } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+        console.error(\r\n+            \"Error al procesar el callback de Mercado Pago:\",\r\n+            error.response?.data || error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n     }\r\n });\r\n \r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n // Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n     const { id } = req.params;\r\n     const authorizationCode = req.query.code;\r\n \r\n     if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n     }\r\n \r\n     try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n         const params = new URLSearchParams({\r\n-            grant_type: 'authorization_code',\r\n+            grant_type: \"authorization_code\",\r\n             client_id,\r\n             client_secret,\r\n             code: authorizationCode,\r\n             redirect_uri,\r\n         });\r\n \r\n         console.log(\"Params:\", params.toString());\r\n \r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n+            }\r\n+        );\r\n \r\n         const { access_token, refresh_token, expires_in } = response.data;\r\n         const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n@@ -1200,193 +131,246 @@\n             charity.accessToken = access_token;\r\n             charity.refreshToken = refresh_token;\r\n             charity.expirationTime = expirationTime;\r\n             await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n             });\r\n         } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n         }\r\n     } catch (error) {\r\n-        console.error(\"Error Data:\", error.response ? error.response.data : error.message);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+        console.error(\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n     }\r\n });\r\n \r\n-\r\n-router.get('/charities', async (req, res) => {\r\n+router.get(\"/charities\", async (req, res) => {\r\n     try {\r\n         const charities = await Charity.find();\r\n         res.json(charities);\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n     }\r\n });\r\n \r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n     const { id } = req.params;\r\n     const { amount, donorName } = req.body;\r\n \r\n-    console.log('amount', amount);\r\n+    console.log(\"amount\", amount);\r\n \r\n     if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n     }\r\n \r\n     try {\r\n         const charity = await Charity.findById(id);\r\n         if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n         }\r\n \r\n         const preferenceData = {\r\n             items: [\r\n                 {\r\n                     title: `Donación para ${charity.nombre}`,\r\n                     quantity: 1,\r\n                     unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n+                    currency_id: \"PEN\",\r\n                 },\r\n             ],\r\n             payer: {\r\n                 name: donorName,\r\n             },\r\n             back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+                success:\r\n+                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n+                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n             },\r\n-            auto_return: 'approved',\r\n+            auto_return: \"approved\",\r\n             external_reference: id,\r\n         };\r\n \r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/checkout/preferences\",\r\n+            preferenceData,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${charity.accessToken}`,\r\n+                    \"Content-Type\": \"application/json\",\r\n+                },\r\n+            }\r\n+        );\r\n \r\n         return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n+            message: \"Preferencia de pago creada\",\r\n             init_point: response.data.init_point,\r\n         });\r\n-\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n     }\r\n });\r\n \r\n-router.get('/mercadopago/success', async (req, res) => {\r\n+router.get(\"/mercadopago/success\", async (req, res) => {\r\n     const paymentId = req.query.payment_id;\r\n \r\n     try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n+        const response = await axios.get(\r\n+            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+                },\r\n+            }\r\n+        );\r\n \r\n         const paymentDetails = response.data;\r\n         const payer = paymentDetails.payer || {};\r\n         const card = paymentDetails.card || {};\r\n \r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n+            }`.trim();\r\n+        const payerEmail = payer.email || \"No disponible\";\r\n+        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n         const paymentAmount = paymentDetails.transaction_amount;\r\n         const paymentStatus = paymentDetails.status;\r\n         const paymentMethod = paymentDetails.payment_method_id;\r\n         const charityId = paymentDetails.external_reference;\r\n \r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        if (!charityId || charityId === \"null\") {\r\n+            throw new Error(\r\n+                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n+            );\r\n         }\r\n \r\n         const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n \r\n         const donation = new Donation({\r\n             charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n+            donorName: payerName || \"Nombre no disponible\",\r\n             donorEmail: payerEmail,\r\n             amount: paymentAmount,\r\n             paymentId,\r\n             paymentStatus,\r\n             paymentMethod,\r\n             cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n+            currency: paymentDetails.currency_id || \"No disponible\",\r\n         });\r\n \r\n         await donation.save();\r\n \r\n-        res.redirect('http://localhost:3000/gracias');\r\n+        res.redirect(\"http://localhost:3000/gracias\");\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n+            });\r\n     }\r\n });\r\n \r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n     const { charityId } = req.params;\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n     }\r\n     try {\r\n         const donations = await Donation.find({ charityId: charityId });\r\n         if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones para esta organización benéfica\",\r\n+                });\r\n         }\r\n         res.json(donations);\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n     }\r\n });\r\n \r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n+router.get(\"/mercadopago/error\", (req, res) => {\r\n     const paymentId = req.query.payment_id;\r\n     const status = req.query.status;\r\n     const merchantOrderId = req.query.merchant_order_id;\r\n \r\n     res.json({\r\n-        message: 'error en el pago',\r\n+        message: \"error en el pago\",\r\n     });\r\n });\r\n \r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n+router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"weekly\");\r\n });\r\n \r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n+router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"monthly\");\r\n });\r\n \r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n+router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"annual\");\r\n });\r\n \r\n+router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n+    const {\r\n+        charityId,\r\n+        donorName,\r\n+        itemType,\r\n+        quantity,\r\n+        unit,\r\n+        valuePerUnit,\r\n+        userId,\r\n+    } = req.body;\r\n \r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n     }\r\n \r\n     if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Todos los campos son obligatorios\" });\r\n     }\r\n \r\n     // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n+    const validUnits = [\"kg\", \"unidad\"];\r\n     if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+        return res\r\n+            .status(400)\r\n+            .json({\r\n+                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n+                    \", \"\r\n+                )}`,\r\n+            });\r\n     }\r\n \r\n     try {\r\n         const donationProduct = new donationproducts({\r\n@@ -1394,625 +378,222 @@\n             donorName,\r\n             itemType,\r\n             quantity,\r\n             unit,\r\n-            valuePerUnit\r\n+            valuePerUnit,\r\n         });\r\n \r\n         await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n+            donationData: req.body,\r\n+        });\r\n+        res\r\n+            .status(201)\r\n+            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n // Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n     const { charityId } = req.params;\r\n     const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n \r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n     }\r\n \r\n     try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+        const donationsInKind = await donationproducts.find({\r\n+            charityId: charityId,\r\n+        });\r\n \r\n         if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n+                });\r\n         }\r\n \r\n         const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n+            return acc + donation.quantity * donation.valuePerUnit;\r\n         }, 0);\r\n \r\n-        const report = donationsInKind.map(donation => ({\r\n+        const report = donationsInKind.map((donation) => ({\r\n             donationId: donation._id,\r\n             donorName: donation.donorName,\r\n             itemType: donation.itemType,\r\n             quantity: donation.quantity,\r\n             unit: donation.unit,\r\n             valuePerUnit: donation.valuePerUnit,\r\n             totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n+            createdAt: donation.createdAt,\r\n         }));\r\n \r\n         // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n+        const donationIds = donationsInKind.map((donation) => donation._id);\r\n \r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        await recordAudit(\"report\", charityId, null, userId, {\r\n+            reportType: \"in-kind\",\r\n+            donationIds,\r\n+        });\r\n         res.json({ totalValue, report });\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n     }\r\n });\r\n // Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n     const { donationId } = req.params;\r\n     const { userId, ...updateData } = req.body;\r\n \r\n     if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n     }\r\n \r\n     try {\r\n         const donation = await donationproducts.findById(donationId);\r\n         if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n         }\r\n \r\n         const before = donation.toObject();\r\n         Object.assign(donation, updateData);\r\n         await donation.save();\r\n \r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            after: donation.toObject(),\r\n+        });\r\n+        res\r\n+            .status(200)\r\n+            .json({ message: \"Donación editada correctamente\", donation });\r\n     } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al editar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n // Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n     const { donationId } = req.params;\r\n     const { userId, reason } = req.body;\r\n \r\n     if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n     }\r\n \r\n     try {\r\n         const donation = await donationproducts.findById(donationId);\r\n         if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n         }\r\n \r\n         const before = donation.toObject();\r\n         await donationproducts.deleteOne({ _id: donationId });\r\n \r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n+        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            reason,\r\n+        });\r\n+        res.status(200).json({ message: \"Donación eliminada\" });\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n     }\r\n });\r\n \r\n // Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n \r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-\r\n-\r\n-\r\n-export default router;\r\n-\r\n-\r\n-\r\n-\r\n-import express from 'express';\r\n-import axios from 'axios';\r\n-import Charity from '../models/charity.js'; \r\n-import mongoose from 'mongoose';\r\n-import Donation from '../models/donation.js';\r\n-import { generateReport } from '../services/reportesdonaciones.js';\r\n-import donationproducts from '../models/donationproducts.js';\r\n-import { generateExcelReport } from '../services/reportescomida.js';\r\n-import recordAudit from '../lib/recordAudit.js';\r\n-import Audit from '../models/auditorias.js';\r\n-import User from '../models/user.js';\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get('/mercadopago/auth/:id', (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = '1901957005842671';\r\n-    const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get('/mercadopago/callback', (req, res) => {\r\n-    const { code, state } = req.query;\r\n-    const id = state;\r\n-\r\n-    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get('/mercadopago/callback/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = '1901957005842671';\r\n-        const client_secret = 'wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti';\r\n-        const redirect_uri = 'https://helped-suitable-elk.ngrok-free.app/mercadopago/callback';\r\n-\r\n-        const params = new URLSearchParams();\r\n-        params.append('grant_type', 'authorization_code');\r\n-        params.append('client_id', client_id);\r\n-        params.append('client_secret', client_secret);\r\n-        params.append('code', authorizationCode);\r\n-        params.append('redirect_uri', redirect_uri);\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n-            headers: {\r\n-                'Content-Type': 'application/x-www-form-urlencoded',\r\n-            },\r\n-        });\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({ \r\n-                message: 'Autorización completada exitosamente',\r\n-            });\r\n-        } else {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n         }\r\n \r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n+        await generateExcelReport(charityId, \"weekly\", res);\r\n     }\r\n-});\r\n+);\r\n \r\n-router.get('/charities', async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n-    }\r\n-});\r\n+// Generar reporte mensual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n \r\n-router.post('/mercadopago/donate/:id', async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log('amount', amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n         }\r\n \r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: 'PEN',\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n-                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n-            },\r\n-            auto_return: 'approved',\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n-            headers: {\r\n-                'Authorization': `Bearer ${charity.accessToken}`,\r\n-                'Content-Type': 'application/json',\r\n-            },\r\n-        });\r\n-\r\n-        return res.json({\r\n-            message: 'Preferencia de pago creada',\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n+        await generateExcelReport(charityId, \"monthly\", res);\r\n     }\r\n-});\r\n+);\r\n \r\n-router.get('/mercadopago/success', async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n+// Generar reporte anual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n \r\n-    try {\r\n-        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n-            headers: {\r\n-                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-            },\r\n-        });\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n-        const payerEmail = payer.email || 'No disponible';\r\n-        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === 'null') {\r\n-            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n         }\r\n \r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || 'Nombre no disponible',\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || 'No disponible',\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect('http://localhost:3000/gracias');\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n+        await generateExcelReport(charityId, \"annual\", res);\r\n     }\r\n-});\r\n+);\r\n \r\n-router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+router.get(\"/audits/:charityId\", async (req, res) => {\r\n     const { charityId } = req.params;\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n     }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n \r\n-\r\n-\r\n-router.get('/mercadopago/error', (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: 'error en el pago',\r\n-    });\r\n-});\r\n-\r\n-\r\n-\r\n-router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'weekly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'monthly');\r\n-});\r\n-\r\n-router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n-    await generateReport(req, res, 'annual');\r\n-});\r\n-\r\n-\r\n-router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n-    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = ['kg', 'unidad'];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n-    }\r\n-\r\n     try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n-        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + (donation.quantity * donation.valuePerUnit);\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map(donation => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map(donation => donation._id);\r\n-\r\n-        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n-        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: 'ID de donación no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: 'Donación no encontrada' });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n-        res.status(200).json({ message: 'Donación eliminada' });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n-    await generateExcelReport(charityId, 'weekly', res);\r\n-});\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n-    await generateExcelReport(charityId, 'monthly', res);\r\n-});\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n-    await generateExcelReport(charityId, 'annual', res);\r\n-});\r\n-\r\n-\r\n-router.get('/audits/:charityId', async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n-    }\r\n-\r\n-    try {\r\n         const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n \r\n         // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n-        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+        const userIds = audits\r\n+            .map((audit) => audit.userId)\r\n+            .filter((userId) => userId);\r\n+        const charityIds = audits\r\n+            .map((audit) => audit.charityId)\r\n+            .filter((charityId) => charityId);\r\n \r\n-        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n+            \"nombre\"\r\n+        );\r\n \r\n         const userMap = users.reduce((acc, user) => {\r\n             acc[user._id] = user.name;\r\n             return acc;\r\n@@ -2023,27 +604,23 @@\n             return acc;\r\n         }, {});\r\n \r\n         // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map(audit => {\r\n-            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+        const auditsWithNames = audits.map((audit) => {\r\n+            const userName =\r\n+                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n             return {\r\n                 ...audit.toObject(),\r\n-                userName\r\n+                userName,\r\n             };\r\n         });\r\n \r\n         res.status(200).json(auditsWithNames);\r\n     } catch (error) {\r\n         console.error(error);\r\n-        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n     }\r\n });\r\n \r\n-\r\n-\r\n-\r\n export default router;\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1732071294948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,29 +23,58 @@\n     res.redirect(authorizationUrl);\r\n });\r\n \r\n // Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+const pkceChallenge = require(\"pkce-challenge\");\r\n+const challenges = new Map(); // Para almacenar temporalmente los code_verifier asociados a cada usuario\r\n+\r\n+// Ruta para iniciar la autorización con PKCE\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+    const { id } = req.params;\r\n+\r\n+    // Generar el code_verifier y el code_challenge\r\n+    const { code_verifier, code_challenge } = pkceChallenge();\r\n+\r\n+    // Almacenar el code_verifier temporalmente\r\n+    challenges.set(id, code_verifier);\r\n+\r\n+    const client_id = \"1901957005842671\";\r\n+    const redirect_uri =\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Callback para manejar el intercambio del código de autorización por tokens\r\n router.get(\"/mercadopago/callback\", async (req, res) => {\r\n     const { code, state: charityId } = req.query;\r\n \r\n-    if (!code) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Falta el código de autorización.\" });\r\n+    if (!code || !charityId) {\r\n+        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n     }\r\n \r\n+    // Recuperar el code_verifier del almacenamiento\r\n+    const code_verifier = challenges.get(charityId);\r\n+    if (!code_verifier) {\r\n+        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n+    }\r\n+\r\n     try {\r\n         const client_id = \"1901957005842671\";\r\n         const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n-        // Hacer la solicitud para obtener el token de Mercado Pago\r\n+        // Preparar los parámetros para obtener el token\r\n         const params = new URLSearchParams({\r\n             grant_type: \"authorization_code\",\r\n             client_id,\r\n             client_secret,\r\n             code,\r\n             redirect_uri,\r\n+            code_verifier, // Incluir el code_verifier\r\n         });\r\n \r\n         const { data } = await axios.post(\r\n             \"https://api.mercadopago.com/oauth/token\",\r\n@@ -59,23 +88,25 @@\n \r\n         // Calcular el tiempo de expiración en segundos\r\n         const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n-        // Buscar la organización por ID y actualizar los tokens\r\n+        // Buscar la organización y actualizar los tokens\r\n         const charity = await Charity.findById(charityId);\r\n         if (!charity) {\r\n             return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n         }\r\n \r\n-        // Usar el método `updateTokens` del modelo\r\n         await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n \r\n         res.status(200).json({\r\n             message: \"Tokens almacenados correctamente.\",\r\n             accessToken: charity.accessToken,\r\n             refreshToken: charity.refreshToken,\r\n             tokenExpiration: charity.tokenExpiration,\r\n         });\r\n+\r\n+        // Eliminar el code_verifier del almacenamiento temporal\r\n+        challenges.delete(charityId);\r\n     } catch (error) {\r\n         console.error(\r\n             \"Error al procesar el callback de Mercado Pago:\",\r\n             error.response?.data || error.message\r\n@@ -85,76 +116,9 @@\n             .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n     }\r\n });\r\n \r\n-// Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n \r\n-    if (!authorizationCode) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Código de autorización no proporcionado\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code: authorizationCode,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        console.log(\"Params:\", params.toString());\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({\r\n-                message: \"Autorización completada exitosamente\",\r\n-            });\r\n-        } else {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error Data:\",\r\n-            error.response ? error.response.data : error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n-                    }`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n router.get(\"/charities\", async (req, res) => {\r\n     try {\r\n         const charities = await Charity.find();\r\n         res.json(charities);\r\n"
                },
                {
                    "date": 1732071321178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,58 +23,29 @@\n     res.redirect(authorizationUrl);\r\n });\r\n \r\n // Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-const pkceChallenge = require(\"pkce-challenge\");\r\n-const challenges = new Map(); // Para almacenar temporalmente los code_verifier asociados a cada usuario\r\n-\r\n-// Ruta para iniciar la autorización con PKCE\r\n-router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n-    const { id } = req.params;\r\n-\r\n-    // Generar el code_verifier y el code_challenge\r\n-    const { code_verifier, code_challenge } = pkceChallenge();\r\n-\r\n-    // Almacenar el code_verifier temporalmente\r\n-    challenges.set(id, code_verifier);\r\n-\r\n-    const client_id = \"1901957005842671\";\r\n-    const redirect_uri =\r\n-        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n-\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Callback para manejar el intercambio del código de autorización por tokens\r\n router.get(\"/mercadopago/callback\", async (req, res) => {\r\n     const { code, state: charityId } = req.query;\r\n \r\n-    if (!code || !charityId) {\r\n-        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n+    if (!code) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Falta el código de autorización.\" });\r\n     }\r\n \r\n-    // Recuperar el code_verifier del almacenamiento\r\n-    const code_verifier = challenges.get(charityId);\r\n-    if (!code_verifier) {\r\n-        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n-    }\r\n-\r\n     try {\r\n         const client_id = \"1901957005842671\";\r\n         const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n-        // Preparar los parámetros para obtener el token\r\n+        // Hacer la solicitud para obtener el token de Mercado Pago\r\n         const params = new URLSearchParams({\r\n             grant_type: \"authorization_code\",\r\n             client_id,\r\n             client_secret,\r\n             code,\r\n             redirect_uri,\r\n-            code_verifier, // Incluir el code_verifier\r\n         });\r\n \r\n         const { data } = await axios.post(\r\n             \"https://api.mercadopago.com/oauth/token\",\r\n@@ -88,25 +59,23 @@\n \r\n         // Calcular el tiempo de expiración en segundos\r\n         const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n-        // Buscar la organización y actualizar los tokens\r\n+        // Buscar la organización por ID y actualizar los tokens\r\n         const charity = await Charity.findById(charityId);\r\n         if (!charity) {\r\n             return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n         }\r\n \r\n+        // Usar el método `updateTokens` del modelo\r\n         await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n \r\n         res.status(200).json({\r\n             message: \"Tokens almacenados correctamente.\",\r\n             accessToken: charity.accessToken,\r\n             refreshToken: charity.refreshToken,\r\n             tokenExpiration: charity.tokenExpiration,\r\n         });\r\n-\r\n-        // Eliminar el code_verifier del almacenamiento temporal\r\n-        challenges.delete(charityId);\r\n     } catch (error) {\r\n         console.error(\r\n             \"Error al procesar el callback de Mercado Pago:\",\r\n             error.response?.data || error.message\r\n@@ -116,9 +85,76 @@\n             .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n     }\r\n });\r\n \r\n+// Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n \r\n+    if (!authorizationCode) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n+            });\r\n+        } else {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n router.get(\"/charities\", async (req, res) => {\r\n     try {\r\n         const charities = await Charity.find();\r\n         res.json(charities);\r\n"
                },
                {
                    "date": 1732071332443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,627 @@\n+import express from \"express\";\r\n+import axios from \"axios\";\r\n+import Charity from \"../models/charity.js\";\r\n+import mongoose from \"mongoose\";\r\n+import Donation from \"../models/donation.js\";\r\n+import { generateReport } from \"../services/reportesdonaciones.js\";\r\n+import donationproducts from \"../models/donationproducts.js\";\r\n+import { generateExcelReport } from \"../services/reportescomida.js\";\r\n+import recordAudit from \"../lib/recordAudit.js\";\r\n+import Audit from \"../models/auditorias.js\";\r\n+import User from \"../models/user.js\";\r\n+\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = \"1901957005842671\";\r\n+    const redirect_uri =\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n+    const { code, state: charityId } = req.query;\r\n+\r\n+    if (!code) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Falta el código de autorización.\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        // Hacer la solicitud para obtener el token de Mercado Pago\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        const { data } = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = data;\r\n+\r\n+        // Calcular el tiempo de expiración en segundos\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        // Buscar la organización por ID y actualizar los tokens\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+        }\r\n+\r\n+        // Usar el método `updateTokens` del modelo\r\n+        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+\r\n+        res.status(200).json({\r\n+            message: \"Tokens almacenados correctamente.\",\r\n+            accessToken: charity.accessToken,\r\n+            refreshToken: charity.refreshToken,\r\n+            tokenExpiration: charity.tokenExpiration,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error al procesar el callback de Mercado Pago:\",\r\n+            error.response?.data || error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n+            });\r\n+        } else {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/charities\", async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n+    }\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log(\"amount\", amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: \"PEN\",\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success:\r\n+                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n+                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n+            },\r\n+            auto_return: \"approved\",\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/checkout/preferences\",\r\n+            preferenceData,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${charity.accessToken}`,\r\n+                    \"Content-Type\": \"application/json\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        return res.json({\r\n+            message: \"Preferencia de pago creada\",\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/success\", async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(\r\n+            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n+            }`.trim();\r\n+        const payerEmail = payer.email || \"No disponible\";\r\n+        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === \"null\") {\r\n+            throw new Error(\r\n+                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n+            );\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || \"Nombre no disponible\",\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || \"No disponible\",\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect(\"http://localhost:3000/gracias\");\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/error\", (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: \"error en el pago\",\r\n+    });\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"weekly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"monthly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"annual\");\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n+    const {\r\n+        charityId,\r\n+        donorName,\r\n+        itemType,\r\n+        quantity,\r\n+        unit,\r\n+        valuePerUnit,\r\n+        userId,\r\n+    } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Todos los campos son obligatorios\" });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = [\"kg\", \"unidad\"];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({\r\n+                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n+                    \", \"\r\n+                )}`,\r\n+            });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit,\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n+            donationData: req.body,\r\n+        });\r\n+        res\r\n+            .status(201)\r\n+            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({\r\n+            charityId: charityId,\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + donation.quantity * donation.valuePerUnit;\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map((donation) => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt,\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map((donation) => donation._id);\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, {\r\n+            reportType: \"in-kind\",\r\n+            donationIds,\r\n+        });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            after: donation.toObject(),\r\n+        });\r\n+        res\r\n+            .status(200)\r\n+            .json({ message: \"Donación editada correctamente\", donation });\r\n+    } catch (error) {\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            reason,\r\n+        });\r\n+        res.status(200).json({ message: \"Donación eliminada\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n+        await generateExcelReport(charityId, \"weekly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n+        await generateExcelReport(charityId, \"monthly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n+        await generateExcelReport(charityId, \"annual\", res);\r\n+    }\r\n+);\r\n+\r\n+router.get(\"/audits/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits\r\n+            .map((audit) => audit.userId)\r\n+            .filter((userId) => userId);\r\n+        const charityIds = audits\r\n+            .map((audit) => audit.charityId)\r\n+            .filter((charityId) => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n+            \"nombre\"\r\n+        );\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map((audit) => {\r\n+            const userName =\r\n+                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName,\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1732071364795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,627 @@\n+import express from \"express\";\r\n+import axios from \"axios\";\r\n+import Charity from \"../models/charity.js\";\r\n+import mongoose from \"mongoose\";\r\n+import Donation from \"../models/donation.js\";\r\n+import { generateReport } from \"../services/reportesdonaciones.js\";\r\n+import donationproducts from \"../models/donationproducts.js\";\r\n+import { generateExcelReport } from \"../services/reportescomida.js\";\r\n+import recordAudit from \"../lib/recordAudit.js\";\r\n+import Audit from \"../models/auditorias.js\";\r\n+import User from \"../models/user.js\";\r\n+import pkceChallenge from \"pkce-challenge\";\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+    const { id } = req.params;\r\n+    const client_id = \"1901957005842671\";\r\n+    const redirect_uri =\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n+    const { code, state: charityId } = req.query;\r\n+\r\n+    if (!code) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Falta el código de autorización.\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        // Hacer la solicitud para obtener el token de Mercado Pago\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        const { data } = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = data;\r\n+\r\n+        // Calcular el tiempo de expiración en segundos\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        // Buscar la organización por ID y actualizar los tokens\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+        }\r\n+\r\n+        // Usar el método `updateTokens` del modelo\r\n+        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+\r\n+        res.status(200).json({\r\n+            message: \"Tokens almacenados correctamente.\",\r\n+            accessToken: charity.accessToken,\r\n+            refreshToken: charity.refreshToken,\r\n+            tokenExpiration: charity.tokenExpiration,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error al procesar el callback de Mercado Pago:\",\r\n+            error.response?.data || error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n+            });\r\n+        } else {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/charities\", async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n+    }\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log(\"amount\", amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: \"PEN\",\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success:\r\n+                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n+                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n+            },\r\n+            auto_return: \"approved\",\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/checkout/preferences\",\r\n+            preferenceData,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${charity.accessToken}`,\r\n+                    \"Content-Type\": \"application/json\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        return res.json({\r\n+            message: \"Preferencia de pago creada\",\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/success\", async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(\r\n+            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n+            }`.trim();\r\n+        const payerEmail = payer.email || \"No disponible\";\r\n+        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === \"null\") {\r\n+            throw new Error(\r\n+                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n+            );\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || \"Nombre no disponible\",\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || \"No disponible\",\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect(\"http://localhost:3000/gracias\");\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/error\", (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: \"error en el pago\",\r\n+    });\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"weekly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"monthly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"annual\");\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n+    const {\r\n+        charityId,\r\n+        donorName,\r\n+        itemType,\r\n+        quantity,\r\n+        unit,\r\n+        valuePerUnit,\r\n+        userId,\r\n+    } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Todos los campos son obligatorios\" });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = [\"kg\", \"unidad\"];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({\r\n+                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n+                    \", \"\r\n+                )}`,\r\n+            });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit,\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n+            donationData: req.body,\r\n+        });\r\n+        res\r\n+            .status(201)\r\n+            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({\r\n+            charityId: charityId,\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + donation.quantity * donation.valuePerUnit;\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map((donation) => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt,\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map((donation) => donation._id);\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, {\r\n+            reportType: \"in-kind\",\r\n+            donationIds,\r\n+        });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            after: donation.toObject(),\r\n+        });\r\n+        res\r\n+            .status(200)\r\n+            .json({ message: \"Donación editada correctamente\", donation });\r\n+    } catch (error) {\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            reason,\r\n+        });\r\n+        res.status(200).json({ message: \"Donación eliminada\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n+        await generateExcelReport(charityId, \"weekly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n+        await generateExcelReport(charityId, \"monthly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n+        await generateExcelReport(charityId, \"annual\", res);\r\n+    }\r\n+);\r\n+\r\n+router.get(\"/audits/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits\r\n+            .map((audit) => audit.userId)\r\n+            .filter((userId) => userId);\r\n+        const charityIds = audits\r\n+            .map((audit) => audit.charityId)\r\n+            .filter((charityId) => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n+            \"nombre\"\r\n+        );\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map((audit) => {\r\n+            const userName =\r\n+                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName,\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1732071378649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import recordAudit from \"../lib/recordAudit.js\";\r\n import Audit from \"../models/auditorias.js\";\r\n import User from \"../models/user.js\";\r\n import pkceChallenge from \"pkce-challenge\";\r\n+const challenges = new Map(); \r\n \r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n"
                },
                {
                    "date": 1732071410197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,645 @@\n+import express from \"express\";\r\n+import axios from \"axios\";\r\n+import Charity from \"../models/charity.js\";\r\n+import mongoose from \"mongoose\";\r\n+import Donation from \"../models/donation.js\";\r\n+import { generateReport } from \"../services/reportesdonaciones.js\";\r\n+import donationproducts from \"../models/donationproducts.js\";\r\n+import { generateExcelReport } from \"../services/reportescomida.js\";\r\n+import recordAudit from \"../lib/recordAudit.js\";\r\n+import Audit from \"../models/auditorias.js\";\r\n+import User from \"../models/user.js\";\r\n+import pkceChallenge from \"pkce-challenge\";\r\n+const challenges = new Map(); \r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+    const { id } = req.params;\r\n+\r\n+    // Generar el code_verifier y el code_challenge\r\n+    const { code_verifier, code_challenge } = pkceChallenge();\r\n+\r\n+    // Almacenar el code_verifier temporalmente\r\n+    challenges.set(id, code_verifier);\r\n+\r\n+    const client_id = \"1901957005842671\";\r\n+    const redirect_uri =\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Callback para manejar el intercambio del código de autorización por tokens\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n+    const { code, state: charityId } = req.query;\r\n+\r\n+    if (!code || !charityId) {\r\n+        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n+    }\r\n+\r\n+    // Recuperar el code_verifier del almacenamiento\r\n+    const code_verifier = challenges.get(charityId);\r\n+    if (!code_verifier) {\r\n+        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        // Preparar los parámetros para obtener el token\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code,\r\n+            redirect_uri,\r\n+            code_verifier, // Incluir el code_verifier\r\n+        });\r\n+\r\n+        const { data } = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = data;\r\n+\r\n+        // Calcular el tiempo de expiración en segundos\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        // Buscar la organización y actualizar los tokens\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+        }\r\n+\r\n+        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+\r\n+        res.status(200).json({\r\n+            message: \"Tokens almacenados correctamente.\",\r\n+            accessToken: charity.accessToken,\r\n+            refreshToken: charity.refreshToken,\r\n+            tokenExpiration: charity.tokenExpiration,\r\n+        });\r\n+\r\n+        // Eliminar el code_verifier del almacenamiento temporal\r\n+        challenges.delete(charityId);\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error al procesar el callback de Mercado Pago:\",\r\n+            error.response?.data || error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n+            });\r\n+        } else {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/charities\", async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n+    }\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log(\"amount\", amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: \"PEN\",\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success:\r\n+                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n+                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n+            },\r\n+            auto_return: \"approved\",\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/checkout/preferences\",\r\n+            preferenceData,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${charity.accessToken}`,\r\n+                    \"Content-Type\": \"application/json\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        return res.json({\r\n+            message: \"Preferencia de pago creada\",\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/success\", async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(\r\n+            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n+            }`.trim();\r\n+        const payerEmail = payer.email || \"No disponible\";\r\n+        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === \"null\") {\r\n+            throw new Error(\r\n+                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n+            );\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || \"Nombre no disponible\",\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || \"No disponible\",\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect(\"http://localhost:3000/gracias\");\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/error\", (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: \"error en el pago\",\r\n+    });\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"weekly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"monthly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"annual\");\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n+    const {\r\n+        charityId,\r\n+        donorName,\r\n+        itemType,\r\n+        quantity,\r\n+        unit,\r\n+        valuePerUnit,\r\n+        userId,\r\n+    } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Todos los campos son obligatorios\" });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = [\"kg\", \"unidad\"];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({\r\n+                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n+                    \", \"\r\n+                )}`,\r\n+            });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit,\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n+            donationData: req.body,\r\n+        });\r\n+        res\r\n+            .status(201)\r\n+            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({\r\n+            charityId: charityId,\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + donation.quantity * donation.valuePerUnit;\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map((donation) => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt,\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map((donation) => donation._id);\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, {\r\n+            reportType: \"in-kind\",\r\n+            donationIds,\r\n+        });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            after: donation.toObject(),\r\n+        });\r\n+        res\r\n+            .status(200)\r\n+            .json({ message: \"Donación editada correctamente\", donation });\r\n+    } catch (error) {\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            reason,\r\n+        });\r\n+        res.status(200).json({ message: \"Donación eliminada\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n+        await generateExcelReport(charityId, \"weekly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n+        await generateExcelReport(charityId, \"monthly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n+        await generateExcelReport(charityId, \"annual\", res);\r\n+    }\r\n+);\r\n+\r\n+router.get(\"/audits/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits\r\n+            .map((audit) => audit.userId)\r\n+            .filter((userId) => userId);\r\n+        const charityIds = audits\r\n+            .map((audit) => audit.charityId)\r\n+            .filter((charityId) => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n+            \"nombre\"\r\n+        );\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map((audit) => {\r\n+            const userName =\r\n+                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName,\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1732071442970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,644 @@\n+import express from \"express\";\r\n+import axios from \"axios\";\r\n+import Charity from \"../models/charity.js\";\r\n+import mongoose from \"mongoose\";\r\n+import Donation from \"../models/donation.js\";\r\n+import { generateReport } from \"../services/reportesdonaciones.js\";\r\n+import donationproducts from \"../models/donationproducts.js\";\r\n+import { generateExcelReport } from \"../services/reportescomida.js\";\r\n+import recordAudit from \"../lib/recordAudit.js\";\r\n+import Audit from \"../models/auditorias.js\";\r\n+import User from \"../models/user.js\";\r\n+import pkceChallenge from \"pkce-challenge\";\r\n+const challenges = new Map(); \r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+    const { id } = req.params;\r\n+\r\n+    // Generar el code_verifier y el code_challenge\r\n+    const { code_verifier, code_challenge } = pkceChallenge();\r\n+\r\n+    // Almacenar el code_verifier temporalmente\r\n+    challenges.set(id, code_verifier);\r\n+\r\n+    const client_id = \"1901957005842671\";\r\n+    const redirect_uri =\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Callback para manejar el intercambio del código de autorización por tokens\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n+    const { code, state: charityId } = req.query;\r\n+\r\n+    if (!code || !charityId) {\r\n+        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n+    }\r\n+\r\n+    // Recuperar el code_verifier del almacenamiento\r\n+    const code_verifier = challenges.get(charityId);\r\n+    if (!code_verifier) {\r\n+        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        // Preparar los parámetros para obtener el token\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code,\r\n+            redirect_uri,\r\n+            code_verifier, // Incluir el code_verifier\r\n+        });\r\n+\r\n+        const { data } = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = data;\r\n+\r\n+        // Calcular el tiempo de expiración en segundos\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        // Buscar la organización y actualizar los tokens\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+        }\r\n+\r\n+        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+\r\n+        res.status(200).json({\r\n+            message: \"Tokens almacenados correctamente.\",\r\n+            accessToken: charity.accessToken,\r\n+            refreshToken: charity.refreshToken,\r\n+            tokenExpiration: charity.tokenExpiration,\r\n+        });\r\n+\r\n+        // Eliminar el code_verifier del almacenamiento temporal\r\n+        challenges.delete(charityId);\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error al procesar el callback de Mercado Pago:\",\r\n+            error.response?.data || error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n+\r\n+// Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n+\r\n+    if (!authorizationCode) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code: authorizationCode,\r\n+            redirect_uri,\r\n+        });\r\n+\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n+            });\r\n+        } else {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/charities\", async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n+    }\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log(\"amount\", amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: \"PEN\",\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success:\r\n+                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n+                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n+            },\r\n+            auto_return: \"approved\",\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post(\r\n+            \"https://api.mercadopago.com/checkout/preferences\",\r\n+            preferenceData,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${charity.accessToken}`,\r\n+                    \"Content-Type\": \"application/json\",\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        return res.json({\r\n+            message: \"Preferencia de pago creada\",\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/success\", async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(\r\n+            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+                },\r\n+            }\r\n+        );\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n+            }`.trim();\r\n+        const payerEmail = payer.email || \"No disponible\";\r\n+        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === \"null\") {\r\n+            throw new Error(\r\n+                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n+            );\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || \"Nombre no disponible\",\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || \"No disponible\",\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect(\"http://localhost:3000/gracias\");\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({\r\n+                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n+            });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get(\"/mercadopago/error\", (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: \"error en el pago\",\r\n+    });\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"weekly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"monthly\");\r\n+});\r\n+\r\n+router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n+    await generateReport(req, res, \"annual\");\r\n+});\r\n+\r\n+router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n+    const {\r\n+        charityId,\r\n+        donorName,\r\n+        itemType,\r\n+        quantity,\r\n+        unit,\r\n+        valuePerUnit,\r\n+        userId,\r\n+    } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Todos los campos son obligatorios\" });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = [\"kg\", \"unidad\"];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({\r\n+                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n+                    \", \"\r\n+                )}`,\r\n+            });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit,\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n+            donationData: req.body,\r\n+        });\r\n+        res\r\n+            .status(201)\r\n+            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({\r\n+            charityId: charityId,\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res\r\n+                .status(404)\r\n+                .json({\r\n+                    message:\r\n+                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n+                });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + donation.quantity * donation.valuePerUnit;\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map((donation) => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt,\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map((donation) => donation._id);\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, {\r\n+            reportType: \"in-kind\",\r\n+            donationIds,\r\n+        });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            after: donation.toObject(),\r\n+        });\r\n+        res\r\n+            .status(200)\r\n+            .json({ message: \"Donación editada correctamente\", donation });\r\n+    } catch (error) {\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n+            before,\r\n+            reason,\r\n+        });\r\n+        res.status(200).json({ message: \"Donación eliminada\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n+        await generateExcelReport(charityId, \"weekly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n+        await generateExcelReport(charityId, \"monthly\", res);\r\n+    }\r\n+);\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get(\r\n+    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n+    async (req, res) => {\r\n+        const { charityId } = req.params;\r\n+        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+        if (!mongoose.isValidObjectId(charityId)) {\r\n+            return res\r\n+                .status(400)\r\n+                .json({ message: \"ID de organización benéfica no válido\" });\r\n+        }\r\n+\r\n+        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n+        await generateExcelReport(charityId, \"annual\", res);\r\n+    }\r\n+);\r\n+\r\n+router.get(\"/audits/:charityId\", async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"ID de organización benéfica no válido\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits\r\n+            .map((audit) => audit.userId)\r\n+            .filter((userId) => userId);\r\n+        const charityIds = audits\r\n+            .map((audit) => audit.charityId)\r\n+            .filter((charityId) => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n+            \"nombre\"\r\n+        );\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map((audit) => {\r\n+            const userName =\r\n+                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName,\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+export default router;\r\n"
                },
                {
                    "date": 1732071706299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,10 @@\n \r\n     try {\r\n         const client_id = \"1901957005842671\";\r\n         const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+        const redirect_uri =\r\n+\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n         // Preparar los parámetros para obtener el token\r\n         const params = new URLSearchParams({\r\n             grant_type: \"authorization_code\",\r\n"
                },
                {
                    "date": 1732071747837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,9 @@\n \r\n     try {\r\n         const client_id = \"1901957005842671\";\r\n         const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n         // Preparar los parámetros para obtener el token\r\n         const params = new URLSearchParams({\r\n             grant_type: \"authorization_code\",\r\n@@ -105,75 +104,10 @@\n });\r\n \r\n \r\n // Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n \r\n-    if (!authorizationCode) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Código de autorización no proporcionado\" });\r\n-    }\r\n \r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code: authorizationCode,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        console.log(\"Params:\", params.toString());\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({\r\n-                message: \"Autorización completada exitosamente\",\r\n-            });\r\n-        } else {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error Data:\",\r\n-            error.response ? error.response.data : error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n-                    }`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n router.get(\"/charities\", async (req, res) => {\r\n     try {\r\n         const charities = await Charity.find();\r\n         res.json(charities);\r\n@@ -642,2530 +576,4 @@\n     }\r\n });\r\n \r\n export default router;\r\n-import express from \"express\";\r\n-import axios from \"axios\";\r\n-import Charity from \"../models/charity.js\";\r\n-import mongoose from \"mongoose\";\r\n-import Donation from \"../models/donation.js\";\r\n-import { generateReport } from \"../services/reportesdonaciones.js\";\r\n-import donationproducts from \"../models/donationproducts.js\";\r\n-import { generateExcelReport } from \"../services/reportescomida.js\";\r\n-import recordAudit from \"../lib/recordAudit.js\";\r\n-import Audit from \"../models/auditorias.js\";\r\n-import User from \"../models/user.js\";\r\n-import pkceChallenge from \"pkce-challenge\";\r\n-const challenges = new Map(); \r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n-    const { id } = req.params;\r\n-\r\n-    // Generar el code_verifier y el code_challenge\r\n-    const { code_verifier, code_challenge } = pkceChallenge();\r\n-\r\n-    // Almacenar el code_verifier temporalmente\r\n-    challenges.set(id, code_verifier);\r\n-\r\n-    const client_id = \"1901957005842671\";\r\n-    const redirect_uri =\r\n-        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n-\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Callback para manejar el intercambio del código de autorización por tokens\r\n-router.get(\"/mercadopago/callback\", async (req, res) => {\r\n-    const { code, state: charityId } = req.query;\r\n-\r\n-    if (!code || !charityId) {\r\n-        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n-    }\r\n-\r\n-    // Recuperar el code_verifier del almacenamiento\r\n-    const code_verifier = challenges.get(charityId);\r\n-    if (!code_verifier) {\r\n-        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        // Preparar los parámetros para obtener el token\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code,\r\n-            redirect_uri,\r\n-            code_verifier, // Incluir el code_verifier\r\n-        });\r\n-\r\n-        const { data } = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = data;\r\n-\r\n-        // Calcular el tiempo de expiración en segundos\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        // Buscar la organización y actualizar los tokens\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n-        }\r\n-\r\n-        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-\r\n-        res.status(200).json({\r\n-            message: \"Tokens almacenados correctamente.\",\r\n-            accessToken: charity.accessToken,\r\n-            refreshToken: charity.refreshToken,\r\n-            tokenExpiration: charity.tokenExpiration,\r\n-        });\r\n-\r\n-        // Eliminar el code_verifier del almacenamiento temporal\r\n-        challenges.delete(charityId);\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error al procesar el callback de Mercado Pago:\",\r\n-            error.response?.data || error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n-    }\r\n-});\r\n-\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Código de autorización no proporcionado\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code: authorizationCode,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        console.log(\"Params:\", params.toString());\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({\r\n-                message: \"Autorización completada exitosamente\",\r\n-            });\r\n-        } else {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error Data:\",\r\n-            error.response ? error.response.data : error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n-                    }`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/charities\", async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n-    }\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log(\"amount\", amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: \"PEN\",\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success:\r\n-                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n-                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n-            },\r\n-            auto_return: \"approved\",\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/checkout/preferences\",\r\n-            preferenceData,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer ${charity.accessToken}`,\r\n-                    \"Content-Type\": \"application/json\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        return res.json({\r\n-            message: \"Preferencia de pago creada\",\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/success\", async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(\r\n-            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n-            }`.trim();\r\n-        const payerEmail = payer.email || \"No disponible\";\r\n-        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === \"null\") {\r\n-            throw new Error(\r\n-                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n-            );\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || \"Nombre no disponible\",\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || \"No disponible\",\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect(\"http://localhost:3000/gracias\");\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/error\", (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: \"error en el pago\",\r\n-    });\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"weekly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"monthly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"annual\");\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n-    const {\r\n-        charityId,\r\n-        donorName,\r\n-        itemType,\r\n-        quantity,\r\n-        unit,\r\n-        valuePerUnit,\r\n-        userId,\r\n-    } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Todos los campos son obligatorios\" });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = [\"kg\", \"unidad\"];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({\r\n-                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n-                    \", \"\r\n-                )}`,\r\n-            });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit,\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n-            donationData: req.body,\r\n-        });\r\n-        res\r\n-            .status(201)\r\n-            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({\r\n-            charityId: charityId,\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + donation.quantity * donation.valuePerUnit;\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map((donation) => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt,\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map((donation) => donation._id);\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, {\r\n-            reportType: \"in-kind\",\r\n-            donationIds,\r\n-        });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            after: donation.toObject(),\r\n-        });\r\n-        res\r\n-            .status(200)\r\n-            .json({ message: \"Donación editada correctamente\", donation });\r\n-    } catch (error) {\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            reason,\r\n-        });\r\n-        res.status(200).json({ message: \"Donación eliminada\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n-        await generateExcelReport(charityId, \"weekly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n-        await generateExcelReport(charityId, \"monthly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n-        await generateExcelReport(charityId, \"annual\", res);\r\n-    }\r\n-);\r\n-\r\n-router.get(\"/audits/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits\r\n-            .map((audit) => audit.userId)\r\n-            .filter((userId) => userId);\r\n-        const charityIds = audits\r\n-            .map((audit) => audit.charityId)\r\n-            .filter((charityId) => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n-            \"nombre\"\r\n-        );\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map((audit) => {\r\n-            const userName =\r\n-                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName,\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-export default router;\r\n-import express from \"express\";\r\n-import axios from \"axios\";\r\n-import Charity from \"../models/charity.js\";\r\n-import mongoose from \"mongoose\";\r\n-import Donation from \"../models/donation.js\";\r\n-import { generateReport } from \"../services/reportesdonaciones.js\";\r\n-import donationproducts from \"../models/donationproducts.js\";\r\n-import { generateExcelReport } from \"../services/reportescomida.js\";\r\n-import recordAudit from \"../lib/recordAudit.js\";\r\n-import Audit from \"../models/auditorias.js\";\r\n-import User from \"../models/user.js\";\r\n-import pkceChallenge from \"pkce-challenge\";\r\n-const challenges = new Map(); \r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = \"1901957005842671\";\r\n-    const redirect_uri =\r\n-        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get(\"/mercadopago/callback\", async (req, res) => {\r\n-    const { code, state: charityId } = req.query;\r\n-\r\n-    if (!code) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Falta el código de autorización.\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        // Hacer la solicitud para obtener el token de Mercado Pago\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        const { data } = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = data;\r\n-\r\n-        // Calcular el tiempo de expiración en segundos\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        // Buscar la organización por ID y actualizar los tokens\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n-        }\r\n-\r\n-        // Usar el método `updateTokens` del modelo\r\n-        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-\r\n-        res.status(200).json({\r\n-            message: \"Tokens almacenados correctamente.\",\r\n-            accessToken: charity.accessToken,\r\n-            refreshToken: charity.refreshToken,\r\n-            tokenExpiration: charity.tokenExpiration,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error al procesar el callback de Mercado Pago:\",\r\n-            error.response?.data || error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n-    }\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Código de autorización no proporcionado\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code: authorizationCode,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        console.log(\"Params:\", params.toString());\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({\r\n-                message: \"Autorización completada exitosamente\",\r\n-            });\r\n-        } else {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error Data:\",\r\n-            error.response ? error.response.data : error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n-                    }`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/charities\", async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n-    }\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log(\"amount\", amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: \"PEN\",\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success:\r\n-                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n-                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n-            },\r\n-            auto_return: \"approved\",\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/checkout/preferences\",\r\n-            preferenceData,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer ${charity.accessToken}`,\r\n-                    \"Content-Type\": \"application/json\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        return res.json({\r\n-            message: \"Preferencia de pago creada\",\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/success\", async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(\r\n-            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n-            }`.trim();\r\n-        const payerEmail = payer.email || \"No disponible\";\r\n-        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === \"null\") {\r\n-            throw new Error(\r\n-                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n-            );\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || \"Nombre no disponible\",\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || \"No disponible\",\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect(\"http://localhost:3000/gracias\");\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/error\", (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: \"error en el pago\",\r\n-    });\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"weekly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"monthly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"annual\");\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n-    const {\r\n-        charityId,\r\n-        donorName,\r\n-        itemType,\r\n-        quantity,\r\n-        unit,\r\n-        valuePerUnit,\r\n-        userId,\r\n-    } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Todos los campos son obligatorios\" });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = [\"kg\", \"unidad\"];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({\r\n-                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n-                    \", \"\r\n-                )}`,\r\n-            });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit,\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n-            donationData: req.body,\r\n-        });\r\n-        res\r\n-            .status(201)\r\n-            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({\r\n-            charityId: charityId,\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + donation.quantity * donation.valuePerUnit;\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map((donation) => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt,\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map((donation) => donation._id);\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, {\r\n-            reportType: \"in-kind\",\r\n-            donationIds,\r\n-        });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            after: donation.toObject(),\r\n-        });\r\n-        res\r\n-            .status(200)\r\n-            .json({ message: \"Donación editada correctamente\", donation });\r\n-    } catch (error) {\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            reason,\r\n-        });\r\n-        res.status(200).json({ message: \"Donación eliminada\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n-        await generateExcelReport(charityId, \"weekly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n-        await generateExcelReport(charityId, \"monthly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n-        await generateExcelReport(charityId, \"annual\", res);\r\n-    }\r\n-);\r\n-\r\n-router.get(\"/audits/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits\r\n-            .map((audit) => audit.userId)\r\n-            .filter((userId) => userId);\r\n-        const charityIds = audits\r\n-            .map((audit) => audit.charityId)\r\n-            .filter((charityId) => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n-            \"nombre\"\r\n-        );\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map((audit) => {\r\n-            const userName =\r\n-                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName,\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-export default router;\r\n-import express from \"express\";\r\n-import axios from \"axios\";\r\n-import Charity from \"../models/charity.js\";\r\n-import mongoose from \"mongoose\";\r\n-import Donation from \"../models/donation.js\";\r\n-import { generateReport } from \"../services/reportesdonaciones.js\";\r\n-import donationproducts from \"../models/donationproducts.js\";\r\n-import { generateExcelReport } from \"../services/reportescomida.js\";\r\n-import recordAudit from \"../lib/recordAudit.js\";\r\n-import Audit from \"../models/auditorias.js\";\r\n-import User from \"../models/user.js\";\r\n-\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = \"1901957005842671\";\r\n-    const redirect_uri =\r\n-        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get(\"/mercadopago/callback\", async (req, res) => {\r\n-    const { code, state: charityId } = req.query;\r\n-\r\n-    if (!code) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Falta el código de autorización.\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        // Hacer la solicitud para obtener el token de Mercado Pago\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        const { data } = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = data;\r\n-\r\n-        // Calcular el tiempo de expiración en segundos\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        // Buscar la organización por ID y actualizar los tokens\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n-        }\r\n-\r\n-        // Usar el método `updateTokens` del modelo\r\n-        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-\r\n-        res.status(200).json({\r\n-            message: \"Tokens almacenados correctamente.\",\r\n-            accessToken: charity.accessToken,\r\n-            refreshToken: charity.refreshToken,\r\n-            tokenExpiration: charity.tokenExpiration,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error al procesar el callback de Mercado Pago:\",\r\n-            error.response?.data || error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n-    }\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Código de autorización no proporcionado\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code: authorizationCode,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        console.log(\"Params:\", params.toString());\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({\r\n-                message: \"Autorización completada exitosamente\",\r\n-            });\r\n-        } else {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error Data:\",\r\n-            error.response ? error.response.data : error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n-                    }`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/charities\", async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n-    }\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log(\"amount\", amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: \"PEN\",\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success:\r\n-                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n-                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n-            },\r\n-            auto_return: \"approved\",\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/checkout/preferences\",\r\n-            preferenceData,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer ${charity.accessToken}`,\r\n-                    \"Content-Type\": \"application/json\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        return res.json({\r\n-            message: \"Preferencia de pago creada\",\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/success\", async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(\r\n-            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n-            }`.trim();\r\n-        const payerEmail = payer.email || \"No disponible\";\r\n-        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === \"null\") {\r\n-            throw new Error(\r\n-                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n-            );\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || \"Nombre no disponible\",\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || \"No disponible\",\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect(\"http://localhost:3000/gracias\");\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/error\", (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: \"error en el pago\",\r\n-    });\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"weekly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"monthly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"annual\");\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n-    const {\r\n-        charityId,\r\n-        donorName,\r\n-        itemType,\r\n-        quantity,\r\n-        unit,\r\n-        valuePerUnit,\r\n-        userId,\r\n-    } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Todos los campos son obligatorios\" });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = [\"kg\", \"unidad\"];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({\r\n-                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n-                    \", \"\r\n-                )}`,\r\n-            });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit,\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n-            donationData: req.body,\r\n-        });\r\n-        res\r\n-            .status(201)\r\n-            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({\r\n-            charityId: charityId,\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + donation.quantity * donation.valuePerUnit;\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map((donation) => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt,\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map((donation) => donation._id);\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, {\r\n-            reportType: \"in-kind\",\r\n-            donationIds,\r\n-        });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            after: donation.toObject(),\r\n-        });\r\n-        res\r\n-            .status(200)\r\n-            .json({ message: \"Donación editada correctamente\", donation });\r\n-    } catch (error) {\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            reason,\r\n-        });\r\n-        res.status(200).json({ message: \"Donación eliminada\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n-        await generateExcelReport(charityId, \"weekly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n-        await generateExcelReport(charityId, \"monthly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n-        await generateExcelReport(charityId, \"annual\", res);\r\n-    }\r\n-);\r\n-\r\n-router.get(\"/audits/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits\r\n-            .map((audit) => audit.userId)\r\n-            .filter((userId) => userId);\r\n-        const charityIds = audits\r\n-            .map((audit) => audit.charityId)\r\n-            .filter((charityId) => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n-            \"nombre\"\r\n-        );\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map((audit) => {\r\n-            const userName =\r\n-                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName,\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-export default router;\r\n-import express from \"express\";\r\n-import axios from \"axios\";\r\n-import Charity from \"../models/charity.js\";\r\n-import mongoose from \"mongoose\";\r\n-import Donation from \"../models/donation.js\";\r\n-import { generateReport } from \"../services/reportesdonaciones.js\";\r\n-import donationproducts from \"../models/donationproducts.js\";\r\n-import { generateExcelReport } from \"../services/reportescomida.js\";\r\n-import recordAudit from \"../lib/recordAudit.js\";\r\n-import Audit from \"../models/auditorias.js\";\r\n-import User from \"../models/user.js\";\r\n-\r\n-const router = express.Router();\r\n-\r\n-// Ruta para autenticar a la organización benéfica\r\n-router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n-    const { id } = req.params;\r\n-    const client_id = \"1901957005842671\";\r\n-    const redirect_uri =\r\n-        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\n-router.get(\"/mercadopago/callback\", async (req, res) => {\r\n-    const { code, state: charityId } = req.query;\r\n-\r\n-    if (!code) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Falta el código de autorización.\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        // Hacer la solicitud para obtener el token de Mercado Pago\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        const { data } = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = data;\r\n-\r\n-        // Calcular el tiempo de expiración en segundos\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        // Buscar la organización por ID y actualizar los tokens\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n-        }\r\n-\r\n-        // Usar el método `updateTokens` del modelo\r\n-        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-\r\n-        res.status(200).json({\r\n-            message: \"Tokens almacenados correctamente.\",\r\n-            accessToken: charity.accessToken,\r\n-            refreshToken: charity.refreshToken,\r\n-            tokenExpiration: charity.tokenExpiration,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error al procesar el callback de Mercado Pago:\",\r\n-            error.response?.data || error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n-    }\r\n-});\r\n-\r\n-// Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const authorizationCode = req.query.code;\r\n-\r\n-    if (!authorizationCode) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Código de autorización no proporcionado\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const client_id = \"1901957005842671\";\r\n-        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\r\n-            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-        const params = new URLSearchParams({\r\n-            grant_type: \"authorization_code\",\r\n-            client_id,\r\n-            client_secret,\r\n-            code: authorizationCode,\r\n-            redirect_uri,\r\n-        });\r\n-\r\n-        console.log(\"Params:\", params.toString());\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/oauth/token\",\r\n-            params,\r\n-            {\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const { access_token, refresh_token, expires_in } = response.data;\r\n-        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n-\r\n-        const charity = await Charity.findById(id);\r\n-        if (charity) {\r\n-            charity.accessToken = access_token;\r\n-            charity.refreshToken = refresh_token;\r\n-            charity.expirationTime = expirationTime;\r\n-            await charity.save();\r\n-            return res.json({\r\n-                message: \"Autorización completada exitosamente\",\r\n-            });\r\n-        } else {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(\r\n-            \"Error Data:\",\r\n-            error.response ? error.response.data : error.message\r\n-        );\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n-                    }`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/charities\", async (req, res) => {\r\n-    try {\r\n-        const charities = await Charity.find();\r\n-        res.json(charities);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: \"Error al obtener las organizaciones benéficas\" });\r\n-    }\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donate/:id\", async (req, res) => {\r\n-    const { id } = req.params;\r\n-    const { amount, donorName } = req.body;\r\n-\r\n-    console.log(\"amount\", amount);\r\n-\r\n-    if (!mongoose.isValidObjectId(id)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(id);\r\n-        if (!charity) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({ message: \"Organización benéfica no encontrada\" });\r\n-        }\r\n-\r\n-        const preferenceData = {\r\n-            items: [\r\n-                {\r\n-                    title: `Donación para ${charity.nombre}`,\r\n-                    quantity: 1,\r\n-                    unit_price: parseFloat(amount),\r\n-                    currency_id: \"PEN\",\r\n-                },\r\n-            ],\r\n-            payer: {\r\n-                name: donorName,\r\n-            },\r\n-            back_urls: {\r\n-                success:\r\n-                    \"https://helped-suitable-elk.ngrok-free.app/mercadopago/success\",\r\n-                failure: \"https://helped-suitable-elk.ngrok-free.app/mercadopago/error\",\r\n-            },\r\n-            auto_return: \"approved\",\r\n-            external_reference: id,\r\n-        };\r\n-\r\n-        const response = await axios.post(\r\n-            \"https://api.mercadopago.com/checkout/preferences\",\r\n-            preferenceData,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer ${charity.accessToken}`,\r\n-                    \"Content-Type\": \"application/json\",\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        return res.json({\r\n-            message: \"Preferencia de pago creada\",\r\n-            init_point: response.data.init_point,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al crear la preferencia: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/success\", async (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-\r\n-    try {\r\n-        const response = await axios.get(\r\n-            `https://api.mercadopago.com/v1/payments/${paymentId}`,\r\n-            {\r\n-                headers: {\r\n-                    Authorization: `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n-                },\r\n-            }\r\n-        );\r\n-\r\n-        const paymentDetails = response.data;\r\n-        const payer = paymentDetails.payer || {};\r\n-        const card = paymentDetails.card || {};\r\n-\r\n-        const payerName = `${payer.first_name || \"\"} ${payer.last_name || \"\"\r\n-            }`.trim();\r\n-        const payerEmail = payer.email || \"No disponible\";\r\n-        const cardLastFourDigits = card.last_four_digits || \"No disponible\";\r\n-        const paymentAmount = paymentDetails.transaction_amount;\r\n-        const paymentStatus = paymentDetails.status;\r\n-        const paymentMethod = paymentDetails.payment_method_id;\r\n-        const charityId = paymentDetails.external_reference;\r\n-\r\n-        if (!charityId || charityId === \"null\") {\r\n-            throw new Error(\r\n-                \"El ID de la organización benéfica no está disponible en external_reference.\"\r\n-            );\r\n-        }\r\n-\r\n-        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n-\r\n-        const donation = new Donation({\r\n-            charityId: charityObjectId,\r\n-            donorName: payerName || \"Nombre no disponible\",\r\n-            donorEmail: payerEmail,\r\n-            amount: paymentAmount,\r\n-            paymentId,\r\n-            paymentStatus,\r\n-            paymentMethod,\r\n-            cardLastFourDigits,\r\n-            currency: paymentDetails.currency_id || \"No disponible\",\r\n-        });\r\n-\r\n-        await donation.save();\r\n-\r\n-        res.redirect(\"http://localhost:3000/gracias\");\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({\r\n-                message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}`,\r\n-            });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/donations/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-    try {\r\n-        const donations = await Donation.find({ charityId: charityId });\r\n-        if (!donations.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-        res.json(donations);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-router.get(\"/mercadopago/error\", (req, res) => {\r\n-    const paymentId = req.query.payment_id;\r\n-    const status = req.query.status;\r\n-    const merchantOrderId = req.query.merchant_order_id;\r\n-\r\n-    res.json({\r\n-        message: \"error en el pago\",\r\n-    });\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/weekly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"weekly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/monthly/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"monthly\");\r\n-});\r\n-\r\n-router.get(\"/mercadopago/report/annual/:charityId\", async (req, res) => {\r\n-    await generateReport(req, res, \"annual\");\r\n-});\r\n-\r\n-router.post(\"/mercadopago/donations/in-kind\", async (req, res) => {\r\n-    const {\r\n-        charityId,\r\n-        donorName,\r\n-        itemType,\r\n-        quantity,\r\n-        unit,\r\n-        valuePerUnit,\r\n-        userId,\r\n-    } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"Todos los campos son obligatorios\" });\r\n-    }\r\n-\r\n-    // Validar la unidad\r\n-    const validUnits = [\"kg\", \"unidad\"];\r\n-    if (!validUnits.includes(unit)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({\r\n-                message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(\r\n-                    \", \"\r\n-                )}`,\r\n-            });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationProduct = new donationproducts({\r\n-            charityId,\r\n-            donorName,\r\n-            itemType,\r\n-            quantity,\r\n-            unit,\r\n-            valuePerUnit,\r\n-        });\r\n-\r\n-        await donationProduct.save();\r\n-        await recordAudit(\"create\", charityId, donationProduct._id, userId, {\r\n-            donationData: req.body,\r\n-        });\r\n-        res\r\n-            .status(201)\r\n-            .json({ message: \"Donación en especie registrada exitosamente\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al registrar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Obtener reporte de donaciones en especie\r\n-router.get(\"/mercadopago/report/in-kind/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await donationproducts.find({\r\n-            charityId: charityId,\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res\r\n-                .status(404)\r\n-                .json({\r\n-                    message:\r\n-                        \"No se encontraron donaciones en especie para esta organización benéfica\",\r\n-                });\r\n-        }\r\n-\r\n-        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n-            return acc + donation.quantity * donation.valuePerUnit;\r\n-        }, 0);\r\n-\r\n-        const report = donationsInKind.map((donation) => ({\r\n-            donationId: donation._id,\r\n-            donorName: donation.donorName,\r\n-            itemType: donation.itemType,\r\n-            quantity: donation.quantity,\r\n-            unit: donation.unit,\r\n-            valuePerUnit: donation.valuePerUnit,\r\n-            totalValue: donation.quantity * donation.valuePerUnit,\r\n-            createdAt: donation.createdAt,\r\n-        }));\r\n-\r\n-        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n-        const donationIds = donationsInKind.map((donation) => donation._id);\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, {\r\n-            reportType: \"in-kind\",\r\n-            donationIds,\r\n-        });\r\n-        res.json({ totalValue, report });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-});\r\n-// Editar una donación existente\r\n-router.put(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, ...updateData } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        Object.assign(donation, updateData);\r\n-        await donation.save();\r\n-\r\n-        await recordAudit(\"edit\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            after: donation.toObject(),\r\n-        });\r\n-        res\r\n-            .status(200)\r\n-            .json({ message: \"Donación editada correctamente\", donation });\r\n-    } catch (error) {\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al editar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Eliminar una donación existente\r\n-router.delete(\"/mercadopago/report/in-kind/:donationId\", async (req, res) => {\r\n-    const { donationId } = req.params;\r\n-    const { userId, reason } = req.body;\r\n-\r\n-    if (!mongoose.isValidObjectId(donationId)) {\r\n-        return res.status(400).json({ message: \"ID de donación no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const donation = await donationproducts.findById(donationId);\r\n-        if (!donation) {\r\n-            return res.status(404).json({ message: \"Donación no encontrada\" });\r\n-        }\r\n-\r\n-        const before = donation.toObject();\r\n-        await donationproducts.deleteOne({ _id: donationId });\r\n-\r\n-        await recordAudit(\"delete\", donation.charityId, donationId, userId, {\r\n-            before,\r\n-            reason,\r\n-        });\r\n-        res.status(200).json({ message: \"Donación eliminada\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al eliminar la donación: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-// Generar reporte semanal en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/weekly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"weekly\" });\r\n-        await generateExcelReport(charityId, \"weekly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte mensual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/monthly/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"monthly\" });\r\n-        await generateExcelReport(charityId, \"monthly\", res);\r\n-    }\r\n-);\r\n-\r\n-// Generar reporte anual en Excel\r\n-router.get(\r\n-    \"/mercadopago/report/in-kind/excel/annual/:charityId\",\r\n-    async (req, res) => {\r\n-        const { charityId } = req.params;\r\n-        const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n-\r\n-        if (!mongoose.isValidObjectId(charityId)) {\r\n-            return res\r\n-                .status(400)\r\n-                .json({ message: \"ID de organización benéfica no válido\" });\r\n-        }\r\n-\r\n-        await recordAudit(\"report\", charityId, null, userId, { period: \"annual\" });\r\n-        await generateExcelReport(charityId, \"annual\", res);\r\n-    }\r\n-);\r\n-\r\n-router.get(\"/audits/:charityId\", async (req, res) => {\r\n-    const { charityId } = req.params;\r\n-    if (!mongoose.isValidObjectId(charityId)) {\r\n-        return res\r\n-            .status(400)\r\n-            .json({ message: \"ID de organización benéfica no válido\" });\r\n-    }\r\n-\r\n-    try {\r\n-        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n-\r\n-        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n-        const userIds = audits\r\n-            .map((audit) => audit.userId)\r\n-            .filter((userId) => userId);\r\n-        const charityIds = audits\r\n-            .map((audit) => audit.charityId)\r\n-            .filter((charityId) => charityId);\r\n-\r\n-        const users = await User.find({ _id: { $in: userIds } }).select(\"nombre\");\r\n-        const charities = await Charity.find({ _id: { $in: charityIds } }).select(\r\n-            \"nombre\"\r\n-        );\r\n-\r\n-        const userMap = users.reduce((acc, user) => {\r\n-            acc[user._id] = user.name;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        const charityMap = charities.reduce((acc, charity) => {\r\n-            acc[charity._id] = charity.nombre;\r\n-            return acc;\r\n-        }, {});\r\n-\r\n-        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n-        const auditsWithNames = audits.map((audit) => {\r\n-            const userName =\r\n-                userMap[audit.userId] || charityMap[audit.charityId] || \"Desconocido\";\r\n-            return {\r\n-                ...audit.toObject(),\r\n-                userName,\r\n-            };\r\n-        });\r\n-\r\n-        res.status(200).json(auditsWithNames);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res\r\n-            .status(500)\r\n-            .json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n-    }\r\n-});\r\n-\r\n-export default router;\r\n"
                },
                {
                    "date": 1732071769413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,97 @@\n });\r\n \r\n \r\n // Callback para recibir el código de autorización\r\n+router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+    const { id } = req.params;\r\n \r\n+    // Generar el code_verifier y el code_challenge\r\n+    const { code_verifier, code_challenge } = pkceChallenge();\r\n \r\n+    // Almacenar el code_verifier temporalmente\r\n+    challenges.set(id, code_verifier);\r\n+\r\n+    const client_id = \"1901957005842671\";\r\n+    const redirect_uri =\r\n+        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n+\r\n+    res.redirect(authorizationUrl);\r\n+});\r\n+\r\n+// Callback para manejar el intercambio del código de autorización por tokens\r\n+router.get(\"/mercadopago/callback\", async (req, res) => {\r\n+    const { code, state: charityId } = req.query;\r\n+\r\n+    if (!code || !charityId) {\r\n+        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n+    }\r\n+\r\n+    // Recuperar el code_verifier del almacenamiento\r\n+    const code_verifier = challenges.get(charityId);\r\n+    if (!code_verifier) {\r\n+        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n+    }\r\n+\r\n+    try {\r\n+        const client_id = \"1901957005842671\";\r\n+        const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n+        const redirect_uri =\r\n+            \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+\r\n+        // Preparar los parámetros para obtener el token\r\n+        const params = new URLSearchParams({\r\n+            grant_type: \"authorization_code\",\r\n+            client_id,\r\n+            client_secret,\r\n+            code,\r\n+            redirect_uri,\r\n+            code_verifier, // Incluir el code_verifier\r\n+        });\r\n+\r\n+        const { data } = await axios.post(\r\n+            \"https://api.mercadopago.com/oauth/token\",\r\n+            params,\r\n+            {\r\n+                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+            }\r\n+        );\r\n+\r\n+        const { access_token, refresh_token, expires_in } = data;\r\n+\r\n+        // Calcular el tiempo de expiración en segundos\r\n+        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n+\r\n+        // Buscar la organización y actualizar los tokens\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+        }\r\n+\r\n+        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n+\r\n+        res.status(200).json({\r\n+            message: \"Tokens almacenados correctamente.\",\r\n+            accessToken: charity.accessToken,\r\n+            refreshToken: charity.refreshToken,\r\n+            tokenExpiration: charity.tokenExpiration,\r\n+        });\r\n+\r\n+        // Eliminar el code_verifier del almacenamiento temporal\r\n+        challenges.delete(charityId);\r\n+    } catch (error) {\r\n+        console.error(\r\n+            \"Error al procesar el callback de Mercado Pago:\",\r\n+            error.response?.data || error.message\r\n+        );\r\n+        res\r\n+            .status(500)\r\n+            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+    }\r\n+});\r\n+\r\n router.get(\"/charities\", async (req, res) => {\r\n     try {\r\n         const charities = await Charity.find();\r\n         res.json(charities);\r\n"
                },
                {
                    "date": 1732071782364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,94 +104,72 @@\n });\r\n \r\n \r\n // Callback para recibir el código de autorización\r\n-router.get(\"/mercadopago/auth/:id\", (req, res) => {\r\n+router.get(\"/mercadopago/callback/:id\", async (req, res) => {\r\n     const { id } = req.params;\r\n+    const authorizationCode = req.query.code;\r\n \r\n-    // Generar el code_verifier y el code_challenge\r\n-    const { code_verifier, code_challenge } = pkceChallenge();\r\n-\r\n-    // Almacenar el code_verifier temporalmente\r\n-    challenges.set(id, code_verifier);\r\n-\r\n-    const client_id = \"1901957005842671\";\r\n-    const redirect_uri =\r\n-        \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n-\r\n-    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}&code_challenge=${code_challenge}&code_challenge_method=S256`;\r\n-\r\n-    res.redirect(authorizationUrl);\r\n-});\r\n-\r\n-// Callback para manejar el intercambio del código de autorización por tokens\r\n-router.get(\"/mercadopago/callback\", async (req, res) => {\r\n-    const { code, state: charityId } = req.query;\r\n-\r\n-    if (!code || !charityId) {\r\n-        return res.status(400).json({ message: \"Faltan parámetros requeridos.\" });\r\n+    if (!authorizationCode) {\r\n+        return res\r\n+            .status(400)\r\n+            .json({ message: \"Código de autorización no proporcionado\" });\r\n     }\r\n \r\n-    // Recuperar el code_verifier del almacenamiento\r\n-    const code_verifier = challenges.get(charityId);\r\n-    if (!code_verifier) {\r\n-        return res.status(400).json({ message: \"Code verifier no encontrado.\" });\r\n-    }\r\n-\r\n     try {\r\n         const client_id = \"1901957005842671\";\r\n         const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n         const redirect_uri =\r\n             \"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n-        // Preparar los parámetros para obtener el token\r\n         const params = new URLSearchParams({\r\n             grant_type: \"authorization_code\",\r\n             client_id,\r\n             client_secret,\r\n-            code,\r\n+            code: authorizationCode,\r\n             redirect_uri,\r\n-            code_verifier, // Incluir el code_verifier\r\n         });\r\n \r\n-        const { data } = await axios.post(\r\n+        console.log(\"Params:\", params.toString());\r\n+\r\n+        const response = await axios.post(\r\n             \"https://api.mercadopago.com/oauth/token\",\r\n             params,\r\n             {\r\n-                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n+                },\r\n             }\r\n         );\r\n \r\n-        const { access_token, refresh_token, expires_in } = data;\r\n-\r\n-        // Calcular el tiempo de expiración en segundos\r\n+        const { access_token, refresh_token, expires_in } = response.data;\r\n         const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n \r\n-        // Buscar la organización y actualizar los tokens\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: \"Organización no encontrada.\" });\r\n+        const charity = await Charity.findById(id);\r\n+        if (charity) {\r\n+            charity.accessToken = access_token;\r\n+            charity.refreshToken = refresh_token;\r\n+            charity.expirationTime = expirationTime;\r\n+            await charity.save();\r\n+            return res.json({\r\n+                message: \"Autorización completada exitosamente\",\r\n+            });\r\n+        } else {\r\n+            return res\r\n+                .status(404)\r\n+                .json({ message: \"Organización benéfica no encontrada\" });\r\n         }\r\n-\r\n-        await charity.updateTokens(access_token, refresh_token, expirationTime);\r\n-\r\n-        res.status(200).json({\r\n-            message: \"Tokens almacenados correctamente.\",\r\n-            accessToken: charity.accessToken,\r\n-            refreshToken: charity.refreshToken,\r\n-            tokenExpiration: charity.tokenExpiration,\r\n-        });\r\n-\r\n-        // Eliminar el code_verifier del almacenamiento temporal\r\n-        challenges.delete(charityId);\r\n     } catch (error) {\r\n         console.error(\r\n-            \"Error al procesar el callback de Mercado Pago:\",\r\n-            error.response?.data || error.message\r\n+            \"Error Data:\",\r\n+            error.response ? error.response.data : error.message\r\n         );\r\n         res\r\n             .status(500)\r\n-            .json({ message: \"Error al procesar los tokens.\", error: error.message });\r\n+            .json({\r\n+                message: `Error al obtener el token: ${error.response ? error.response.data : error.message\r\n+                    }`,\r\n+            });\r\n     }\r\n });\r\n \r\n router.get(\"/charities\", async (req, res) => {\r\n"
                },
                {
                    "date": 1732071789596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,8 @@\n import { generateExcelReport } from \"../services/reportescomida.js\";\r\n import recordAudit from \"../lib/recordAudit.js\";\r\n import Audit from \"../models/auditorias.js\";\r\n import User from \"../models/user.js\";\r\n-import pkceChallenge from \"pkce-challenge\";\r\n-const challenges = new Map(); \r\n \r\n const router = express.Router();\r\n \r\n // Ruta para autenticar a la organización benéfica\r\n@@ -37,9 +35,10 @@\n \r\n     try {\r\n         const client_id = \"1901957005842671\";\r\n         const client_secret = \"wrdU655Oeu2RKIEb2Ph92CAjVT8hZ4ti\";\r\n-        const redirect_uri =\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n+        const redirect_uri =\r\n+\"https://helped-suitable-elk.ngrok-free.app/mercadopago/callback\";\r\n \r\n         // Hacer la solicitud para obtener el token de Mercado Pago\r\n         const params = new URLSearchParams({\r\n             grant_type: \"authorization_code\",\r\n"
                },
                {
                    "date": 1732072011658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,393 @@\n+import express from 'express';\r\n+import axios from 'axios';\r\n+import Charity from '../models/charity.js'; \r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/donation.js';\r\n+import { generateReport } from '../services/reportesdonaciones.js';\r\n+import donationproducts from '../models/donationproducts.js';\r\n+import { generateExcelReport } from '../services/reportescomida.js';\r\n+import recordAudit from '../lib/recordAudit.js';\r\n+import Audit from '../models/auditorias.js';\r\n+import User from '../models/user.js';\r\n+\r\n+const router = express.Router();\r\n+\r\n+// Ruta para autenticar a la organización benéfica\r\n+\r\n+\r\n+router.get('/charities', async (req, res) => {\r\n+    try {\r\n+        const charities = await Charity.find();\r\n+        res.json(charities);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n+    }\r\n+});\r\n+\r\n+router.post('/mercadopago/donate/:id', async (req, res) => {\r\n+    const { id } = req.params;\r\n+    const { amount, donorName } = req.body;\r\n+\r\n+    console.log('amount', amount);\r\n+\r\n+    if (!mongoose.isValidObjectId(id)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(id);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const preferenceData = {\r\n+            items: [\r\n+                {\r\n+                    title: `Donación para ${charity.nombre}`,\r\n+                    quantity: 1,\r\n+                    unit_price: parseFloat(amount),\r\n+                    currency_id: 'PEN',\r\n+                },\r\n+            ],\r\n+            payer: {\r\n+                name: donorName,\r\n+            },\r\n+            back_urls: {\r\n+                success: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/success',\r\n+                failure: 'https://helped-suitable-elk.ngrok-free.app/mercadopago/error',\r\n+            },\r\n+            auto_return: 'approved',\r\n+            external_reference: id,\r\n+        };\r\n+\r\n+        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n+            headers: {\r\n+                'Authorization': `Bearer ${charity.accessToken}`,\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+        });\r\n+\r\n+        return res.json({\r\n+            message: 'Preferencia de pago creada',\r\n+            init_point: response.data.init_point,\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/success', async (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+\r\n+    try {\r\n+        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n+            headers: {\r\n+                'Authorization': `Bearer APP_USR-1901957005842671-111119-86e781d67eaa4603a58a5fffee6a37dc-2090145757`,\r\n+            },\r\n+        });\r\n+\r\n+        const paymentDetails = response.data;\r\n+        const payer = paymentDetails.payer || {};\r\n+        const card = paymentDetails.card || {};\r\n+\r\n+        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n+        const payerEmail = payer.email || 'No disponible';\r\n+        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n+        const paymentAmount = paymentDetails.transaction_amount;\r\n+        const paymentStatus = paymentDetails.status;\r\n+        const paymentMethod = paymentDetails.payment_method_id;\r\n+        const charityId = paymentDetails.external_reference;\r\n+\r\n+        if (!charityId || charityId === 'null') {\r\n+            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n+        }\r\n+\r\n+        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n+\r\n+        const donation = new Donation({\r\n+            charityId: charityObjectId,\r\n+            donorName: payerName || 'Nombre no disponible',\r\n+            donorEmail: payerEmail,\r\n+            amount: paymentAmount,\r\n+            paymentId,\r\n+            paymentStatus,\r\n+            paymentMethod,\r\n+            cardLastFourDigits,\r\n+            currency: paymentDetails.currency_id || 'No disponible',\r\n+        });\r\n+\r\n+        await donation.save();\r\n+\r\n+        res.redirect('http://localhost:3000/gracias');\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+router.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+    try {\r\n+        const donations = await Donation.find({ charityId: charityId });\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n+        }\r\n+        res.json(donations);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/error', (req, res) => {\r\n+    const paymentId = req.query.payment_id;\r\n+    const status = req.query.status;\r\n+    const merchantOrderId = req.query.merchant_order_id;\r\n+\r\n+    res.json({\r\n+        message: 'error en el pago',\r\n+    });\r\n+});\r\n+\r\n+\r\n+\r\n+router.get('/mercadopago/report/weekly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'weekly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/monthly/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'monthly');\r\n+});\r\n+\r\n+router.get('/mercadopago/report/annual/:charityId', async (req, res) => {\r\n+    await generateReport(req, res, 'annual');\r\n+});\r\n+\r\n+\r\n+router.post('/mercadopago/donations/in-kind', async (req, res) => {\r\n+    const { charityId, donorName, itemType, quantity, unit, valuePerUnit, userId } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    if (!donorName || !itemType || !quantity || !unit || !valuePerUnit) {\r\n+        return res.status(400).json({ message: 'Todos los campos son obligatorios' });\r\n+    }\r\n+\r\n+    // Validar la unidad\r\n+    const validUnits = ['kg', 'unidad'];\r\n+    if (!validUnits.includes(unit)) {\r\n+        return res.status(400).json({ message: `Unidad no válida. Debe ser una de las siguientes: ${validUnits.join(', ')}` });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationProduct = new donationproducts({\r\n+            charityId,\r\n+            donorName,\r\n+            itemType,\r\n+            quantity,\r\n+            unit,\r\n+            valuePerUnit\r\n+        });\r\n+\r\n+        await donationProduct.save();\r\n+        await recordAudit('create', charityId, donationProduct._id, userId, { donationData: req.body });\r\n+        res.status(201).json({ message: 'Donación en especie registrada exitosamente' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al registrar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Obtener reporte de donaciones en especie\r\n+router.get('/mercadopago/report/in-kind/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await donationproducts.find({ charityId: charityId });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para esta organización benéfica' });\r\n+        }\r\n+\r\n+        const totalValue = donationsInKind.reduce((acc, donation) => {\r\n+            return acc + (donation.quantity * donation.valuePerUnit);\r\n+        }, 0);\r\n+\r\n+        const report = donationsInKind.map(donation => ({\r\n+            donationId: donation._id,\r\n+            donorName: donation.donorName,\r\n+            itemType: donation.itemType,\r\n+            quantity: donation.quantity,\r\n+            unit: donation.unit,\r\n+            valuePerUnit: donation.valuePerUnit,\r\n+            totalValue: donation.quantity * donation.valuePerUnit,\r\n+            createdAt: donation.createdAt\r\n+        }));\r\n+\r\n+        // Incluir los IDs de las donaciones en los detalles de la auditoría\r\n+        const donationIds = donationsInKind.map(donation => donation._id);\r\n+\r\n+        await recordAudit('report', charityId, null, userId, { reportType: 'in-kind', donationIds });\r\n+        res.json({ totalValue, report });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+});\r\n+// Editar una donación existente\r\n+router.put('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, ...updateData } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        Object.assign(donation, updateData);\r\n+        await donation.save();\r\n+\r\n+        await recordAudit('edit', donation.charityId, donationId, userId, { before, after: donation.toObject() });\r\n+        res.status(200).json({ message: 'Donación editada correctamente', donation });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: `Error al editar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Eliminar una donación existente\r\n+router.delete('/mercadopago/report/in-kind/:donationId', async (req, res) => {\r\n+    const { donationId } = req.params;\r\n+    const { userId, reason } = req.body;\r\n+\r\n+    if (!mongoose.isValidObjectId(donationId)) {\r\n+        return res.status(400).json({ message: 'ID de donación no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donation = await donationproducts.findById(donationId);\r\n+        if (!donation) {\r\n+            return res.status(404).json({ message: 'Donación no encontrada' });\r\n+        }\r\n+\r\n+        const before = donation.toObject();\r\n+        await donationproducts.deleteOne({ _id: donationId });\r\n+\r\n+        await recordAudit('delete', donation.charityId, donationId, userId, { before, reason });\r\n+        res.status(200).json({ message: 'Donación eliminada' });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al eliminar la donación: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+// Generar reporte semanal en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/weekly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'weekly' });\r\n+    await generateExcelReport(charityId, 'weekly', res);\r\n+});\r\n+\r\n+// Generar reporte mensual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/monthly/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'monthly' });\r\n+    await generateExcelReport(charityId, 'monthly', res);\r\n+});\r\n+\r\n+// Generar reporte anual en Excel\r\n+router.get('/mercadopago/report/in-kind/excel/annual/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    const userId = req.user ? req.user._id : null; // Asume que el ID del usuario está disponible en req.user\r\n+\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    await recordAudit('report', charityId, null, userId, { period: 'annual' });\r\n+    await generateExcelReport(charityId, 'annual', res);\r\n+});\r\n+\r\n+\r\n+router.get('/audits/:charityId', async (req, res) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const audits = await Audit.find({ charityId }).sort({ timestamp: -1 });\r\n+\r\n+        // Obtener los nombres de los usuarios y organizaciones que realizaron las acciones\r\n+        const userIds = audits.map(audit => audit.userId).filter(userId => userId);\r\n+        const charityIds = audits.map(audit => audit.charityId).filter(charityId => charityId);\r\n+\r\n+        const users = await User.find({ _id: { $in: userIds } }).select('nombre');\r\n+        const charities = await Charity.find({ _id: { $in: charityIds } }).select('nombre');\r\n+\r\n+        const userMap = users.reduce((acc, user) => {\r\n+            acc[user._id] = user.name;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        const charityMap = charities.reduce((acc, charity) => {\r\n+            acc[charity._id] = charity.nombre;\r\n+            return acc;\r\n+        }, {});\r\n+\r\n+        // Agregar el nombre del usuario o de la organización a cada registro de auditoría\r\n+        const auditsWithNames = audits.map(audit => {\r\n+            const userName = userMap[audit.userId] || charityMap[audit.charityId] || 'Desconocido';\r\n+            return {\r\n+                ...audit.toObject(),\r\n+                userName\r\n+            };\r\n+        });\r\n+\r\n+        res.status(200).json(auditsWithNames);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al obtener las auditorías: ${error.message}` });\r\n+    }\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+export default router;\r\n+\r\n+\r\n+\r\n+\r\n"
                }
            ],
            "date": 1731015109378,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport axios from 'axios';\r\nimport Charity from '../models/charity.js'; \r\nimport mongoose from 'mongoose';\r\nimport Donation from '../models/donation.js';\r\n\r\nconst router = express.Router();\r\n\r\n// Ruta para autenticar a la organización benéfica\r\nrouter.get('/mercadopago/auth/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const client_id = '5404051275980051';\r\n    const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n\r\n    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n    res.redirect(authorizationUrl);\r\n});\r\n\r\n// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\nrouter.get('/mercadopago/callback', (req, res) => {\r\n    const { code, state } = req.query;\r\n    const id = state;\r\n\r\n    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n});\r\n\r\n// Callback para recibir el código de autorización\r\nrouter.get('/mercadopago/callback/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const authorizationCode = req.query.code;\r\n\r\n    if (!authorizationCode) {\r\n        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n    }\r\n\r\n    try {\r\n        const client_id = '5404051275980051';\r\n        const client_secret = '6qdwVm2S2EYuYrCnJGNtxapzysh9H3f3';\r\n        const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n\r\n        const params = new URLSearchParams();\r\n        params.append('grant_type', 'authorization_code');\r\n        params.append('client_id', client_id);\r\n        params.append('client_secret', client_secret);\r\n        params.append('code', authorizationCode);\r\n        params.append('redirect_uri', redirect_uri);\r\n\r\n        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n        });\r\n\r\n        const { access_token, refresh_token, expires_in } = response.data;\r\n        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n\r\n        const charity = await Charity.findById(id);\r\n        if (charity) {\r\n            charity.accessToken = access_token;\r\n            charity.refreshToken = refresh_token;\r\n            charity.expirationTime = expirationTime;\r\n            await charity.save();\r\n            return res.json({ \r\n                message: 'Autorización completada exitosamente',\r\n            });\r\n        } else {\r\n            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/charities', async (req, res) => {\r\n    try {\r\n        const charities = await Charity.find();\r\n        res.json(charities);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n    }\r\n});\r\n\r\nrouter.post('/mercadopago/donate/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { amount, donorName } = req.body;\r\n\r\n    if (!mongoose.isValidObjectId(id)) {\r\n        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n    }\r\n\r\n    try {\r\n        const charity = await Charity.findById(id);\r\n        if (!charity) {\r\n            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n        }\r\n\r\n        const preferenceData = {\r\n            items: [\r\n                {\r\n                    title: `Donación para ${charity.nombre}`,\r\n                    quantity: 1,\r\n                    unit_price: parseFloat(amount),\r\n                    currency_id: 'PEN',\r\n                },\r\n            ],\r\n            payer: {\r\n                name: donorName,\r\n            },\r\n            back_urls: {\r\n                success: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/success',\r\n                failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n            },\r\n            auto_return: 'approved',\r\n            external_reference: id,\r\n        };\r\n\r\n        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n            headers: {\r\n                'Authorization': `Bearer ${charity.accessToken}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        return res.json({\r\n            message: 'Preferencia de pago creada',\r\n            init_point: response.data.init_point,\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/mercadopago/success', async (req, res) => {\r\n    const paymentId = req.query.payment_id;\r\n\r\n    try {\r\n        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n            headers: {\r\n                'Authorization': `Bearer APP_USR-5404051275980051-100719-02c01e6cc87103ca2e0850334349dea5-2023454065`,\r\n            },\r\n        });\r\n\r\n        const paymentDetails = response.data;\r\n        const payer = paymentDetails.payer || {};\r\n        const card = paymentDetails.card || {};\r\n\r\n        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n        const payerEmail = payer.email || 'No disponible';\r\n        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n        const paymentAmount = paymentDetails.transaction_amount;\r\n        const paymentStatus = paymentDetails.status;\r\n        const paymentMethod = paymentDetails.payment_method_id;\r\n        const charityId = paymentDetails.external_reference;\r\n\r\n        if (!charityId || charityId === 'null') {\r\n            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n        }\r\n\r\n        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n\r\n        const donation = new Donation({\r\n            charityId: charityObjectId,\r\n            donorName: payerName || 'Nombre no disponible',\r\n            donorEmail: payerEmail,\r\n            amount: paymentAmount,\r\n            paymentId,\r\n            paymentStatus,\r\n            paymentMethod,\r\n            cardLastFourDigits,\r\n            currency: paymentDetails.currency_id || 'No disponible',\r\n        });\r\n\r\n        await donation.save();\r\n\r\n        res.redirect('http://localhost:3000/gracias');\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n    const { charityId } = req.params;\r\n\r\n    if (!mongoose.isValidObjectId(charityId)) {\r\n        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n    }\r\n\r\n    try {\r\n        const donations = await Donation.find({ charityId: charityId });\r\n\r\n        if (!donations.length) {\r\n            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n        }\r\n\r\n        res.json(donations);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/mercadopago/error', (req, res) => {\r\n    const paymentId = req.query.payment_id;\r\n    const status = req.query.status;\r\n    const merchantOrderId = req.query.merchant_order_id;\r\n\r\n    res.json({\r\n        message: 'error en el pago',\r\n    });\r\n});\r\n\r\nexport default router;\r\n\r\n\r\n\r\n\r\n"
        }
    ]
}