{
    "sourceFile": "src/routes/mercadopago.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1731015109378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1731015109378,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport axios from 'axios';\r\nimport Charity from '../models/charity.js'; \r\nimport mongoose from 'mongoose';\r\nimport Donation from '../models/donation.js';\r\n\r\nconst router = express.Router();\r\n\r\n// Ruta para autenticar a la organización benéfica\r\nrouter.get('/mercadopago/auth/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const client_id = '5404051275980051';\r\n    const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n\r\n    const authorizationUrl = `https://auth.mercadopago.com.pe/authorization?client_id=${client_id}&response_type=code&platform_id=mp&redirect_uri=${redirect_uri}&state=${id}`;\r\n    res.redirect(authorizationUrl);\r\n});\r\n\r\n// Nueva ruta para manejar la redirección inicial desde Mercado Pago\r\nrouter.get('/mercadopago/callback', (req, res) => {\r\n    const { code, state } = req.query;\r\n    const id = state;\r\n\r\n    res.redirect(`/mercadopago/callback/${id}?code=${code}`);\r\n});\r\n\r\n// Callback para recibir el código de autorización\r\nrouter.get('/mercadopago/callback/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const authorizationCode = req.query.code;\r\n\r\n    if (!authorizationCode) {\r\n        return res.status(400).json({ message: 'Código de autorización no proporcionado' });\r\n    }\r\n\r\n    try {\r\n        const client_id = '5404051275980051';\r\n        const client_secret = '6qdwVm2S2EYuYrCnJGNtxapzysh9H3f3';\r\n        const redirect_uri = 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/callback';\r\n\r\n        const params = new URLSearchParams();\r\n        params.append('grant_type', 'authorization_code');\r\n        params.append('client_id', client_id);\r\n        params.append('client_secret', client_secret);\r\n        params.append('code', authorizationCode);\r\n        params.append('redirect_uri', redirect_uri);\r\n\r\n        const response = await axios.post('https://api.mercadopago.com/oauth/token', params, {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n        });\r\n\r\n        const { access_token, refresh_token, expires_in } = response.data;\r\n        const expirationTime = Math.floor(Date.now() / 1000) + expires_in;\r\n\r\n        const charity = await Charity.findById(id);\r\n        if (charity) {\r\n            charity.accessToken = access_token;\r\n            charity.refreshToken = refresh_token;\r\n            charity.expirationTime = expirationTime;\r\n            await charity.save();\r\n            return res.json({ \r\n                message: 'Autorización completada exitosamente',\r\n            });\r\n        } else {\r\n            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al obtener el token: ${error.response ? error.response.data : error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/charities', async (req, res) => {\r\n    try {\r\n        const charities = await Charity.find();\r\n        res.json(charities);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: 'Error al obtener las organizaciones benéficas' });\r\n    }\r\n});\r\n\r\nrouter.post('/mercadopago/donate/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { amount, donorName } = req.body;\r\n\r\n    if (!mongoose.isValidObjectId(id)) {\r\n        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n    }\r\n\r\n    try {\r\n        const charity = await Charity.findById(id);\r\n        if (!charity) {\r\n            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n        }\r\n\r\n        const preferenceData = {\r\n            items: [\r\n                {\r\n                    title: `Donación para ${charity.nombre}`,\r\n                    quantity: 1,\r\n                    unit_price: parseFloat(amount),\r\n                    currency_id: 'PEN',\r\n                },\r\n            ],\r\n            payer: {\r\n                name: donorName,\r\n            },\r\n            back_urls: {\r\n                success: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/success',\r\n                failure: 'https://chigger-faithful-ghastly.ngrok-free.app/mercadopago/error',\r\n            },\r\n            auto_return: 'approved',\r\n            external_reference: id,\r\n        };\r\n\r\n        const response = await axios.post('https://api.mercadopago.com/checkout/preferences', preferenceData, {\r\n            headers: {\r\n                'Authorization': `Bearer ${charity.accessToken}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        return res.json({\r\n            message: 'Preferencia de pago creada',\r\n            init_point: response.data.init_point,\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al crear la preferencia: ${error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/mercadopago/success', async (req, res) => {\r\n    const paymentId = req.query.payment_id;\r\n\r\n    try {\r\n        const response = await axios.get(`https://api.mercadopago.com/v1/payments/${paymentId}`, {\r\n            headers: {\r\n                'Authorization': `Bearer APP_USR-5404051275980051-100719-02c01e6cc87103ca2e0850334349dea5-2023454065`,\r\n            },\r\n        });\r\n\r\n        const paymentDetails = response.data;\r\n        const payer = paymentDetails.payer || {};\r\n        const card = paymentDetails.card || {};\r\n\r\n        const payerName = `${payer.first_name || ''} ${payer.last_name || ''}`.trim();\r\n        const payerEmail = payer.email || 'No disponible';\r\n        const cardLastFourDigits = card.last_four_digits || 'No disponible';\r\n        const paymentAmount = paymentDetails.transaction_amount;\r\n        const paymentStatus = paymentDetails.status;\r\n        const paymentMethod = paymentDetails.payment_method_id;\r\n        const charityId = paymentDetails.external_reference;\r\n\r\n        if (!charityId || charityId === 'null') {\r\n            throw new Error('El ID de la organización benéfica no está disponible en external_reference.');\r\n        }\r\n\r\n        const charityObjectId = new mongoose.Types.ObjectId(charityId);\r\n\r\n        const donation = new Donation({\r\n            charityId: charityObjectId,\r\n            donorName: payerName || 'Nombre no disponible',\r\n            donorEmail: payerEmail,\r\n            amount: paymentAmount,\r\n            paymentId,\r\n            paymentStatus,\r\n            paymentMethod,\r\n            cardLastFourDigits,\r\n            currency: paymentDetails.currency_id || 'No disponible',\r\n        });\r\n\r\n        await donation.save();\r\n\r\n        res.redirect('http://localhost:3000/gracias');\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al obtener los detalles del pago o guardar la donación: ${error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/mercadopago/donations/:charityId', async (req, res) => {\r\n    const { charityId } = req.params;\r\n\r\n    if (!mongoose.isValidObjectId(charityId)) {\r\n        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n    }\r\n\r\n    try {\r\n        const donations = await Donation.find({ charityId: charityId });\r\n\r\n        if (!donations.length) {\r\n            return res.status(404).json({ message: 'No se encontraron donaciones para esta organización benéfica' });\r\n        }\r\n\r\n        res.json(donations);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al obtener las donaciones: ${error.message}` });\r\n    }\r\n});\r\n\r\nrouter.get('/mercadopago/error', (req, res) => {\r\n    const paymentId = req.query.payment_id;\r\n    const status = req.query.status;\r\n    const merchantOrderId = req.query.merchant_order_id;\r\n\r\n    res.json({\r\n        message: 'error en el pago',\r\n    });\r\n});\r\n\r\nexport default router;\r\n\r\n\r\n\r\n\r\n"
        }
    ]
}