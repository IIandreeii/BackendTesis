{
    "sourceFile": "src/services/reportescomida.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1731953625143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731953632791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import ExcelJS from 'exceljs';\r\n+import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateExcelReport = async (charityId, period, res) => {\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationProducts.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954123143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n \r\n export const generateExcelReport = async (charityId, period, res) => {\r\n     let startDate;\r\n     const endDate = new Date();\r\n@@ -33,9 +33,9 @@\n         }\r\n \r\n         // Crear un nuevo libro de Excel\r\n         const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n+        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n \r\n         // Añadir título\r\n         worksheet.mergeCells('A1:F1');\r\n         const titleRow = worksheet.getCell('A1');\r\n@@ -85,114 +85,13 @@\n         });\r\n \r\n         // Ajustar el ancho de las columnas\r\n         worksheet.columns.forEach(column => {\r\n-            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-};\n-import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-\r\n-export const generateExcelReport = async (charityId, period, res) => {\r\n-    let startDate;\r\n-    const endDate = new Date();\r\n-\r\n-    switch (period) {\r\n-        case 'weekly':\r\n-            startDate = new Date();\r\n-            startDate.setDate(endDate.getDate() - 7);\r\n-            break;\r\n-        case 'monthly':\r\n-            startDate = new Date();\r\n-            startDate.setMonth(endDate.getMonth() - 1);\r\n-            break;\r\n-        case 'annual':\r\n-            startDate = new Date();\r\n-            startDate.setFullYear(endDate.getFullYear() - 1);\r\n-            break;\r\n-        default:\r\n-            return res.status(400).json({ message: 'Periodo no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({\r\n-            charityId: charityId,\r\n-            createdAt: { $gte: startDate, $lte: endDate }\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n+            if (column.header) {\r\n+                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n             }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n         });\r\n \r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-        });\r\n-\r\n         // Configurar la respuesta para enviar el archivo Excel\r\n         res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n         res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n \r\n"
                },
                {
                    "date": 1731954133843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import ExcelJS from 'exceljs';\r\n+import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateExcelReport = async (charityId, period, res) => {\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donationsInKind = await DonationProducts.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            if (column.header) {\r\n+                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+            }\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954255498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import ExcelJS from 'exceljs';\r\n+import DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateExcelReport = async (charityId, period, res) => {\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const donationsInKind = await DonationProducts.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir nombre de la organización\r\n+        worksheet.mergeCells('A2:F2');\r\n+        const orgRow = worksheet.getCell('A2');\r\n+        orgRow.value = `Organización: ${charity.nombre}`;\r\n+        orgRow.font = { size: 14, bold: true };\r\n+        orgRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            if (column.header) {\r\n+                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+            }\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954265099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import ExcelJS from 'exceljs';\r\n+import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateExcelReport = async (charityId, period, res) => {\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const donationsInKind = await DonationProducts.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir nombre de la organización\r\n+        worksheet.mergeCells('A2:F2');\r\n+        const orgRow = worksheet.getCell('A2');\r\n+        orgRow.value = `Organización: ${charity.nombre}`;\r\n+        orgRow.font = { size: 14, bold: true };\r\n+        orgRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            if (column.header) {\r\n+                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+            }\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954305508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import ExcelJS from 'exceljs';\r\n+import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateExcelReport = async (charityId, period, res) => {\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const donationsInKind = await DonationProducts.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir nombre de la organización\r\n+        worksheet.mergeCells('A2:F2');\r\n+        const orgRow = worksheet.getCell('A2');\r\n+        orgRow.value = `Organización: ${charity.nombre}`;\r\n+        orgRow.font = { size: 14, bold: true };\r\n+        orgRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                donation.quantity * donation.valuePerUnit\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            if (column.header) {\r\n+                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+            }\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954333096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,241 +1,5 @@\n import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-\r\n-export const generateExcelReport = async (charityId, period, res) => {\r\n-    let startDate;\r\n-    const endDate = new Date();\r\n-\r\n-    switch (period) {\r\n-        case 'weekly':\r\n-            startDate = new Date();\r\n-            startDate.setDate(endDate.getDate() - 7);\r\n-            break;\r\n-        case 'monthly':\r\n-            startDate = new Date();\r\n-            startDate.setMonth(endDate.getMonth() - 1);\r\n-            break;\r\n-        case 'annual':\r\n-            startDate = new Date();\r\n-            startDate.setFullYear(endDate.getFullYear() - 1);\r\n-            break;\r\n-        default:\r\n-            return res.status(400).json({ message: 'Periodo no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const donationsInKind = await DonationProducts.find({\r\n-            charityId: charityId,\r\n-            createdAt: { $gte: startDate, $lte: endDate }\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir nombre de la organización\r\n-        worksheet.mergeCells('A2:F2');\r\n-        const orgRow = worksheet.getCell('A2');\r\n-        orgRow.value = `Organización: ${charity.nombre}`;\r\n-        orgRow.font = { size: 14, bold: true };\r\n-        orgRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n-            }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n-        });\r\n-\r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            if (column.header) {\r\n-                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-            }\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-};\n-import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-\r\n-export const generateExcelReport = async (charityId, period, res) => {\r\n-    let startDate;\r\n-    const endDate = new Date();\r\n-\r\n-    switch (period) {\r\n-        case 'weekly':\r\n-            startDate = new Date();\r\n-            startDate.setDate(endDate.getDate() - 7);\r\n-            break;\r\n-        case 'monthly':\r\n-            startDate = new Date();\r\n-            startDate.setMonth(endDate.getMonth() - 1);\r\n-            break;\r\n-        case 'annual':\r\n-            startDate = new Date();\r\n-            startDate.setFullYear(endDate.getFullYear() - 1);\r\n-            break;\r\n-        default:\r\n-            return res.status(400).json({ message: 'Periodo no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const charity = await Charity.findById(charityId);\r\n-        if (!charity) {\r\n-            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n-        }\r\n-\r\n-        const donationsInKind = await DonationProducts.find({\r\n-            charityId: charityId,\r\n-            createdAt: { $gte: startDate, $lte: endDate }\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir nombre de la organización\r\n-        worksheet.mergeCells('A2:F2');\r\n-        const orgRow = worksheet.getCell('A2');\r\n-        orgRow.value = `Organización: ${charity.nombre}`;\r\n-        orgRow.font = { size: 14, bold: true };\r\n-        orgRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n-            }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n-        });\r\n-\r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            if (column.header) {\r\n-                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-            }\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-};\n-import ExcelJS from 'exceljs';\r\n import DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n \r\n export const generateExcelReport = async (charityId, period, res) => {\r\n@@ -350,215 +114,5 @@\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n     }\r\n-};\n-import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-\r\n-export const generateExcelReport = async (charityId, period, res) => {\r\n-    let startDate;\r\n-    const endDate = new Date();\r\n-\r\n-    switch (period) {\r\n-        case 'weekly':\r\n-            startDate = new Date();\r\n-            startDate.setDate(endDate.getDate() - 7);\r\n-            break;\r\n-        case 'monthly':\r\n-            startDate = new Date();\r\n-            startDate.setMonth(endDate.getMonth() - 1);\r\n-            break;\r\n-        case 'annual':\r\n-            startDate = new Date();\r\n-            startDate.setFullYear(endDate.getFullYear() - 1);\r\n-            break;\r\n-        default:\r\n-            return res.status(400).json({ message: 'Periodo no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({\r\n-            charityId: charityId,\r\n-            createdAt: { $gte: startDate, $lte: endDate }\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n-            }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n-        });\r\n-\r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            if (column.header) {\r\n-                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-            }\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n-};\n-import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n-\r\n-export const generateExcelReport = async (charityId, period, res) => {\r\n-    let startDate;\r\n-    const endDate = new Date();\r\n-\r\n-    switch (period) {\r\n-        case 'weekly':\r\n-            startDate = new Date();\r\n-            startDate.setDate(endDate.getDate() - 7);\r\n-            break;\r\n-        case 'monthly':\r\n-            startDate = new Date();\r\n-            startDate.setMonth(endDate.getMonth() - 1);\r\n-            break;\r\n-        case 'annual':\r\n-            startDate = new Date();\r\n-            startDate.setFullYear(endDate.getFullYear() - 1);\r\n-            break;\r\n-        default:\r\n-            return res.status(400).json({ message: 'Periodo no válido' });\r\n-    }\r\n-\r\n-    try {\r\n-        const donationsInKind = await DonationProducts.find({\r\n-            charityId: charityId,\r\n-            createdAt: { $gte: startDate, $lte: endDate }\r\n-        });\r\n-\r\n-        if (!donationsInKind.length) {\r\n-            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n-        }\r\n-\r\n-        // Crear un nuevo libro de Excel\r\n-        const workbook = new ExcelJS.Workbook();\r\n-        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n-\r\n-        // Añadir título\r\n-        worksheet.mergeCells('A1:F1');\r\n-        const titleRow = worksheet.getCell('A1');\r\n-        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n-        titleRow.font = { size: 16, bold: true };\r\n-        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-\r\n-        // Añadir encabezados con estilo\r\n-        worksheet.addRow([]);\r\n-        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n-        headerRow.eachCell((cell, colNumber) => {\r\n-            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n-            cell.fill = {\r\n-                type: 'pattern',\r\n-                pattern: 'solid',\r\n-                fgColor: { argb: '4F81BD' }\r\n-            };\r\n-            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-        });\r\n-\r\n-        // Añadir filas con estilo\r\n-        donationsInKind.forEach((donation, index) => {\r\n-            const row = worksheet.addRow([\r\n-                donation.donorName,\r\n-                donation.itemType,\r\n-                donation.quantity,\r\n-                donation.unit,\r\n-                donation.valuePerUnit,\r\n-                donation.quantity * donation.valuePerUnit\r\n-            ]);\r\n-\r\n-            // Alternar color de fondo para las filas\r\n-            if (index % 2 === 0) {\r\n-                row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                    cell.fill = {\r\n-                        type: 'pattern',\r\n-                        pattern: 'solid',\r\n-                        fgColor: { argb: 'D9EAD3' }\r\n-                    };\r\n-                });\r\n-            }\r\n-\r\n-            // Centrar el contenido de las celdas\r\n-            row.eachCell({ includeEmpty: true }, (cell) => {\r\n-                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n-            });\r\n-        });\r\n-\r\n-        // Ajustar el ancho de las columnas\r\n-        worksheet.columns.forEach(column => {\r\n-            if (column.header) {\r\n-                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n-            }\r\n-        });\r\n-\r\n-        // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n-        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n-\r\n-        // Enviar el archivo Excel\r\n-        await workbook.xlsx.write(res);\r\n-        res.end();\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n-    }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731954348664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import ExcelJS from 'exceljs';\r\n-import DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n \r\n export const generateExcelReport = async (charityId, period, res) => {\r\n     let startDate;\r\n"
                },
                {
                    "date": 1731954386018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n \r\n         // Ajustar el ancho de las columnas\r\n         worksheet.columns.forEach(column => {\r\n             if (column.header) {\r\n-                column.width = column.header.length < 20 ? 20 : column.header.length;\r\n+                column.width = column.header.length < 50 ? 20 : column.header.length;\r\n             }\r\n         });\r\n \r\n         // Configurar la respuesta para enviar el archivo Excel\r\n"
                },
                {
                    "date": 1731954488827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,15 +98,13 @@\n         });\r\n \r\n         // Ajustar el ancho de las columnas\r\n         worksheet.columns.forEach(column => {\r\n-            if (column.header) {\r\n-                column.width = column.header.length < 50 ? 50 : column.header.length;\r\n-            }\r\n+            column.width = 20; // Ajustar el ancho de las columnas a 20\r\n         });\r\n \r\n         // Configurar la respuesta para enviar el archivo Excel\r\n-        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n+        res.setHeader('Content-disposition', 'attachment; filename=reporte_de_donaciones.xlsx');\r\n         res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n \r\n         // Enviar el archivo Excel\r\n         await workbook.xlsx.write(res);\r\n"
                },
                {
                    "date": 1731954604769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import ExcelJS from 'exceljs';\r\n+import DonationProducts from '../models/donationproducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import Charity from '../models/charity.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateExcelReport = async (charityId, period, res) => {\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const charity = await Charity.findById(charityId);\r\n+        if (!charity) {\r\n+            return res.status(404).json({ message: 'Organización benéfica no encontrada' });\r\n+        }\r\n+\r\n+        const donationsInKind = await DonationProducts.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donationsInKind.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo libro de Excel\r\n+        const workbook = new ExcelJS.Workbook();\r\n+        const worksheet = workbook.addWorksheet('Reporte Donaciones');\r\n+\r\n+        // Añadir título\r\n+        worksheet.mergeCells('A1:F1');\r\n+        const titleRow = worksheet.getCell('A1');\r\n+        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n+        titleRow.font = { size: 16, bold: true };\r\n+        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir nombre de la organización\r\n+        worksheet.mergeCells('A2:F2');\r\n+        const orgRow = worksheet.getCell('A2');\r\n+        orgRow.value = `Organización: ${charity.nombre}`;\r\n+        orgRow.font = { size: 14, bold: true };\r\n+        orgRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+\r\n+        // Añadir encabezados con estilo\r\n+        worksheet.addRow([]);\r\n+        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n+        headerRow.eachCell((cell, colNumber) => {\r\n+            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n+            cell.fill = {\r\n+                type: 'pattern',\r\n+                pattern: 'solid',\r\n+                fgColor: { argb: '4F81BD' }\r\n+            };\r\n+            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+        });\r\n+\r\n+        // Añadir filas con estilo\r\n+        donationsInKind.forEach((donation, index) => {\r\n+            const row = worksheet.addRow([\r\n+                donation.donorName,\r\n+                donation.itemType,\r\n+                donation.quantity,\r\n+                donation.unit,\r\n+                donation.valuePerUnit,\r\n+                `S/ ${donation.quantity * donation.valuePerUnit}` // Agregar el signo de soles\r\n+            ]);\r\n+\r\n+            // Alternar color de fondo para las filas\r\n+            if (index % 2 === 0) {\r\n+                row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                    cell.fill = {\r\n+                        type: 'pattern',\r\n+                        pattern: 'solid',\r\n+                        fgColor: { argb: 'D9EAD3' }\r\n+                    };\r\n+                });\r\n+            }\r\n+\r\n+            // Centrar el contenido de las celdas\r\n+            row.eachCell({ includeEmpty: true }, (cell) => {\r\n+                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n+            });\r\n+        });\r\n+\r\n+        // Ajustar el ancho de las columnas\r\n+        worksheet.columns.forEach(column => {\r\n+            column.width = 20; // Ajustar el ancho de las columnas a 20\r\n+        });\r\n+\r\n+        // Configurar la respuesta para enviar el archivo Excel\r\n+        res.setHeader('Content-disposition', 'attachment; filename=reporte_de_donaciones.xlsx');\r\n+        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n+\r\n+        // Enviar el archivo Excel\r\n+        await workbook.xlsx.write(res);\r\n+        res.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731953625143,
            "name": "Commit-0",
            "content": "import ExcelJS from 'exceljs';\r\nimport DonationProducts from '../models/donationProducts.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n\r\nexport const generateExcelReport = async (charityId, period, res) => {\r\n    let startDate;\r\n    const endDate = new Date();\r\n\r\n    switch (period) {\r\n        case 'weekly':\r\n            startDate = new Date();\r\n            startDate.setDate(endDate.getDate() - 7);\r\n            break;\r\n        case 'monthly':\r\n            startDate = new Date();\r\n            startDate.setMonth(endDate.getMonth() - 1);\r\n            break;\r\n        case 'annual':\r\n            startDate = new Date();\r\n            startDate.setFullYear(endDate.getFullYear() - 1);\r\n            break;\r\n        default:\r\n            return res.status(400).json({ message: 'Periodo no válido' });\r\n    }\r\n\r\n    try {\r\n        const donationsInKind = await DonationProducts.find({\r\n            charityId: charityId,\r\n            createdAt: { $gte: startDate, $lte: endDate }\r\n        });\r\n\r\n        if (!donationsInKind.length) {\r\n            return res.status(404).json({ message: 'No se encontraron donaciones en especie para este periodo' });\r\n        }\r\n\r\n        // Crear un nuevo libro de Excel\r\n        const workbook = new ExcelJS.Workbook();\r\n        const worksheet = workbook.addWorksheet('Reporte de Donaciones en Especie');\r\n\r\n        // Añadir título\r\n        worksheet.mergeCells('A1:F1');\r\n        const titleRow = worksheet.getCell('A1');\r\n        titleRow.value = `Reporte de Donaciones en Especie (${period})`;\r\n        titleRow.font = { size: 16, bold: true };\r\n        titleRow.alignment = { vertical: 'middle', horizontal: 'center' };\r\n\r\n        // Añadir encabezados con estilo\r\n        worksheet.addRow([]);\r\n        const headerRow = worksheet.addRow(['Donante', 'Tipo de Producto', 'Cantidad', 'Unidad', 'Valor por Unidad', 'Valor Total']);\r\n        headerRow.eachCell((cell, colNumber) => {\r\n            cell.font = { bold: true, color: { argb: 'FFFFFF' } };\r\n            cell.fill = {\r\n                type: 'pattern',\r\n                pattern: 'solid',\r\n                fgColor: { argb: '4F81BD' }\r\n            };\r\n            cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n        });\r\n\r\n        // Añadir filas con estilo\r\n        donationsInKind.forEach((donation, index) => {\r\n            const row = worksheet.addRow([\r\n                donation.donorName,\r\n                donation.itemType,\r\n                donation.quantity,\r\n                donation.unit,\r\n                donation.valuePerUnit,\r\n                donation.quantity * donation.valuePerUnit\r\n            ]);\r\n\r\n            // Alternar color de fondo para las filas\r\n            if (index % 2 === 0) {\r\n                row.eachCell({ includeEmpty: true }, (cell) => {\r\n                    cell.fill = {\r\n                        type: 'pattern',\r\n                        pattern: 'solid',\r\n                        fgColor: { argb: 'D9EAD3' }\r\n                    };\r\n                });\r\n            }\r\n\r\n            // Centrar el contenido de las celdas\r\n            row.eachCell({ includeEmpty: true }, (cell) => {\r\n                cell.alignment = { vertical: 'middle', horizontal: 'center' };\r\n            });\r\n        });\r\n\r\n        // Ajustar el ancho de las columnas\r\n        worksheet.columns.forEach(column => {\r\n            column.width = column.header.length < 20 ? 20 : column.header.length;\r\n        });\r\n\r\n        // Configurar la respuesta para enviar el archivo Excel\r\n        res.setHeader('Content-disposition', `attachment; filename=reporte_donaciones_especie_${period}.xlsx`);\r\n        res.setHeader('Content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r\n\r\n        // Enviar el archivo Excel\r\n        await workbook.xlsx.write(res);\r\n        res.end();\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n    }\r\n};"
        }
    ]
}