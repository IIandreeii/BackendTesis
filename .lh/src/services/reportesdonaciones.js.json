{
    "sourceFile": "src/services/reportesdonaciones.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1731944452318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731944528040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+const PDFDocument = require('pdfkit');\r\n+const mongoose = require('mongoose');\r\n+const Donation = require('./models/Donation'); // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+const generateReport = async (req, res, period) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donations = await Donation.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo documento PDF\r\n+        const doc = new PDFDocument();\r\n+        let filename = `reporte_${period}_${charityId}.pdf`;\r\n+        filename = encodeURIComponent(filename);\r\n+        \r\n+        // Configurar la respuesta para enviar el PDF\r\n+        res.setHeader('Content-disposition', 'attachment; filename=\"' + filename + '\"');\r\n+        res.setHeader('Content-type', 'application/pdf');\r\n+\r\n+        // Escribir contenido en el PDF\r\n+        doc.text(`Reporte de Donaciones (${period})`, { align: 'center' });\r\n+        doc.moveDown();\r\n+\r\n+        donations.forEach(donation => {\r\n+            doc.text(`Donación ID: ${donation._id}`);\r\n+            doc.text(`Cantidad: ${donation.amount}`);\r\n+            doc.text(`Fecha: ${donation.createdAt}`);\r\n+            doc.moveDown();\r\n+        });\r\n+\r\n+        // Finalizar el documento y enviarlo\r\n+        doc.pipe(res);\r\n+        doc.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\r\n+\r\n+module.exports = { generateReport };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731944617580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+const PDFDocument = require('pdfkit');\r\n+const mongoose = require('mongoose');\r\n+const Donation = require('./models/Donation'); // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+const generateReport = async (req, res, period) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donations = await Donation.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo documento PDF\r\n+        const doc = new PDFDocument();\r\n+        let filename = `reporte_${period}_${charityId}.pdf`;\r\n+        filename = encodeURIComponent(filename);\r\n+        \r\n+        // Configurar la respuesta para enviar el PDF\r\n+        res.setHeader('Content-disposition', 'attachment; filename=\"' + filename + '\"');\r\n+        res.setHeader('Content-type', 'application/pdf');\r\n+\r\n+        // Escribir contenido en el PDF\r\n+        doc.text(`Reporte de Donaciones (${period})`, { align: 'center' });\r\n+        doc.moveDown();\r\n+\r\n+        donations.forEach(donation => {\r\n+            doc.text(`Donación ID: ${donation._id}`);\r\n+            doc.text(`Cantidad: ${donation.amount}`);\r\n+            doc.text(`Fecha: ${donation.createdAt}`);\r\n+            doc.moveDown();\r\n+        });\r\n+\r\n+        // Finalizar el documento y enviarlo\r\n+        doc.pipe(res);\r\n+        doc.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\r\n+\r\n+module.exports = { generateReport };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731944746476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import PDFDocument from 'pdfkit';\r\n import mongoose from 'mongoose';\r\n-import Donation from './models/Donation.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+import Donation from './models/donation.js'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n \r\n export const generateReport = async (req, res, period) => {\r\n     const { charityId } = req.params;\r\n     if (!mongoose.isValidObjectId(charityId)) {\r\n"
                },
                {
                    "date": 1731944760585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+import PDFDocument from 'pdfkit';\r\n+import mongoose from 'mongoose';\r\n+import Donation from '../models/'; // Asegúrate de ajustar la ruta según tu estructura de proyecto\r\n+\r\n+export const generateReport = async (req, res, period) => {\r\n+    const { charityId } = req.params;\r\n+    if (!mongoose.isValidObjectId(charityId)) {\r\n+        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n+    }\r\n+\r\n+    let startDate;\r\n+    const endDate = new Date();\r\n+\r\n+    switch (period) {\r\n+        case 'weekly':\r\n+            startDate = new Date();\r\n+            startDate.setDate(endDate.getDate() - 7);\r\n+            break;\r\n+        case 'monthly':\r\n+            startDate = new Date();\r\n+            startDate.setMonth(endDate.getMonth() - 1);\r\n+            break;\r\n+        case 'annual':\r\n+            startDate = new Date();\r\n+            startDate.setFullYear(endDate.getFullYear() - 1);\r\n+            break;\r\n+        default:\r\n+            return res.status(400).json({ message: 'Periodo no válido' });\r\n+    }\r\n+\r\n+    try {\r\n+        const donations = await Donation.find({\r\n+            charityId: charityId,\r\n+            createdAt: { $gte: startDate, $lte: endDate }\r\n+        });\r\n+\r\n+        if (!donations.length) {\r\n+            return res.status(404).json({ message: 'No se encontraron donaciones para este periodo' });\r\n+        }\r\n+\r\n+        // Crear un nuevo documento PDF\r\n+        const doc = new PDFDocument();\r\n+        let filename = `reporte_${period}_${charityId}.pdf`;\r\n+        filename = encodeURIComponent(filename);\r\n+        \r\n+        // Configurar la respuesta para enviar el PDF\r\n+        res.setHeader('Content-disposition', 'attachment; filename=\"' + filename + '\"');\r\n+        res.setHeader('Content-type', 'application/pdf');\r\n+\r\n+        // Escribir contenido en el PDF\r\n+        doc.text(`Reporte de Donaciones (${period})`, { align: 'center' });\r\n+        doc.moveDown();\r\n+\r\n+        donations.forEach(donation => {\r\n+            doc.text(`Donación ID: ${donation._id}`);\r\n+            doc.text(`Cantidad: ${donation.amount}`);\r\n+            doc.text(`Fecha: ${donation.createdAt}`);\r\n+            doc.moveDown();\r\n+        });\r\n+\r\n+        // Finalizar el documento y enviarlo\r\n+        doc.pipe(res);\r\n+        doc.end();\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731944452318,
            "name": "Commit-0",
            "content": "const generateReport = async (req, res, period) => {\r\n    const { charityId } = req.params;\r\n    if (!mongoose.isValidObjectId(charityId)) {\r\n        return res.status(400).json({ message: 'ID de organización benéfica no válido' });\r\n    }\r\n\r\n    let startDate;\r\n    const endDate = new Date();\r\n\r\n    switch (period) {\r\n        case 'weekly':\r\n            startDate = new Date();\r\n            startDate.setDate(endDate.getDate() - 7);\r\n            break;\r\n        case 'monthly':\r\n            startDate = new Date();\r\n            startDate.setMonth(endDate.getMonth() - 1);\r\n            break;\r\n        case 'annual':\r\n            startDate = new Date();\r\n            startDate.setFullYear(endDate.getFullYear() - 1);\r\n            break;\r\n        default:\r\n            return res.status(400).json({ message: 'Periodo no válido' });\r\n    }\r\n\r\n    try {\r\n        const donations = await Donation.find({\r\n            charityId: charityId,\r\n            createdAt: { $gte: startDate, $lte: endDate }\r\n        });\r\n\r\n        if (!donations.length) {\r\n            return res.status(404).json({ message: 'No se encontraron donaciones para este periodo' });\r\n        }\r\n\r\n        // Aquí puedes generar el reporte en el formato que desees (por ejemplo, CSV, PDF, etc.)\r\n        res.json(donations);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: `Error al generar el reporte: ${error.message}` });\r\n    }\r\n};"
        }
    ]
}