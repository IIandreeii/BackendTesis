{
    "sourceFile": "src/services/socketHandlers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1731371210558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731371372931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+// FILE: socketHandlers.js\r\n+import { Server } from 'socket.io';\r\n+import Message from './models/message'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n+\r\n+const socketHandlers = (server) => {\r\n+    const io = new Server(server, {\r\n+        cors: {\r\n+            origin: 'http://localhost:3000',\r\n+        }\r\n+    });\r\n+\r\n+    io.on('connection', (socket) => {\r\n+        console.log('new connection');\r\n+\r\n+        // Escuchar mensajes entrantes\r\n+        socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n+            const message = new Message({\r\n+                senderId,\r\n+                receiverId,\r\n+                text,\r\n+                createdAt: new Date()\r\n+            });\r\n+\r\n+            try {\r\n+                await message.save();\r\n+                io.to(receiverId).emit('receiveMessage', message);\r\n+            } catch (error) {\r\n+                console.error('Error saving message:', error);\r\n+            }\r\n+        });\r\n+\r\n+        // Unirse a una sala específica\r\n+        socket.on('joinRoom', (userId) => {\r\n+            socket.join(userId);\r\n+        });\r\n+    });\r\n+};\r\n+\r\n+export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731371386073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // FILE: socketHandlers.js\r\n import { Server } from 'socket.io';\r\n-import Message from './models/message'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n+import Message from './models/message.js'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n \r\n const socketHandlers = (server) => {\r\n     const io = new Server(server, {\r\n         cors: {\r\n@@ -35,44 +35,5 @@\n         });\r\n     });\r\n };\r\n \r\n-export default socketHandlers;\n-// FILE: socketHandlers.js\r\n-import { Server } from 'socket.io';\r\n-import Message from './models/Message'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n-\r\n-const socketHandlers = (server) => {\r\n-    const io = new Server(server, {\r\n-        cors: {\r\n-            origin: 'http://localhost:3000',\r\n-        }\r\n-    });\r\n-\r\n-    io.on('connection', (socket) => {\r\n-        console.log('new connection');\r\n-\r\n-        // Escuchar mensajes entrantes\r\n-        socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n-            const message = new Message({\r\n-                senderId,\r\n-                receiverId,\r\n-                text,\r\n-                createdAt: new Date()\r\n-            });\r\n-\r\n-            try {\r\n-                await message.save();\r\n-                io.to(receiverId).emit('receiveMessage', message);\r\n-            } catch (error) {\r\n-                console.error('Error saving message:', error);\r\n-            }\r\n-        });\r\n-\r\n-        // Unirse a una sala específica\r\n-        socket.on('joinRoom', (userId) => {\r\n-            socket.join(userId);\r\n-        });\r\n-    });\r\n-};\r\n-\r\n export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731371392030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // FILE: socketHandlers.js\r\n import { Server } from 'socket.io';\r\n-import Message from './models/message.js'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n+import Message from ''; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n \r\n const socketHandlers = (server) => {\r\n     const io = new Server(server, {\r\n         cors: {\r\n"
                },
                {
                    "date": 1731371401090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // FILE: socketHandlers.js\r\n import { Server } from 'socket.io';\r\n-import Message from ''; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n+import Message from '../'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n \r\n const socketHandlers = (server) => {\r\n     const io = new Server(server, {\r\n         cors: {\r\n"
                },
                {
                    "date": 1731371406237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // FILE: socketHandlers.js\r\n import { Server } from 'socket.io';\r\n-import Message from '../'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n+import Message from '../models/message.js'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n \r\n const socketHandlers = (server) => {\r\n     const io = new Server(server, {\r\n         cors: {\r\n"
                },
                {
                    "date": 1731377513159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-// FILE: socketHandlers.js\r\n+// FILE: src/services/socketHandlers.js\r\n import { Server } from 'socket.io';\r\n-import Message from '../models/message.js'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n+import Message from '../models/message.js';\r\n \r\n const socketHandlers = (server) => {\r\n     const io = new Server(server, {\r\n         cors: {\r\n"
                },
                {
                    "date": 1731377860174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,13 @@\n         console.log('new connection');\r\n \r\n         // Escuchar mensajes entrantes\r\n         socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n+            if (!senderId || !receiverId || !text) {\r\n+                console.error('Missing required fields');\r\n+                return;\r\n+            }\r\n+\r\n             const message = new Message({\r\n                 senderId,\r\n                 receiverId,\r\n                 text,\r\n"
                },
                {
                    "date": 1731378294572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,6 +39,5 @@\n             socket.join(userId);\r\n         });\r\n     });\r\n };\r\n-\r\n export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731379360888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+// FILE: src/services/socketHandlers.js\r\n+import { Server } from 'socket.io';\r\n+import Message from '../models/message.js';\r\n+\r\n+const socketHandlers = (server) => {\r\n+    const io = new Server(server, {\r\n+        cors: {\r\n+            origin: 'http://localhost:3000',\r\n+        }\r\n+    });\r\n+\r\n+    io.on('connection', (socket) => {\r\n+        console.log('new connection');\r\n+\r\n+        // Escuchar mensajes entrantes\r\n+        socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n+            if (!senderId || !receiverId || !text) {\r\n+                console.error('Missing required fields');\r\n+                return;\r\n+            }\r\n+\r\n+            const message = new Message({\r\n+                senderId,\r\n+                receiverId,\r\n+                text,\r\n+                createdAt: new Date()\r\n+            });\r\n+\r\n+            try {\r\n+                await message.save();\r\n+                io.to(receiverId).emit('receiveMessage', message);\r\n+                io.to(senderId).emit('receiveMessage', message); // Emitir también al remitente\r\n+            } catch (error) {\r\n+                console.error('Error saving message:', error);\r\n+            }\r\n+        });\r\n+\r\n+        // Unirse a una sala específica\r\n+        socket.on('joinRoom', (userId) => {\r\n+            socket.join(userId);\r\n+            console.log(`User ${userId} joined room ${userId}`);\r\n+        });\r\n+    });\r\n+};\r\n+\r\n+export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400207404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     io.on('connection', (socket) => {\r\n         console.log('new connection');\r\n \r\n         // Escuchar mensajes entrantes\r\n-        socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n+        socket.on('sendMessage', async ({ senderId, receiverId, con }) => {\r\n             if (!senderId || !receiverId || !text) {\r\n                 console.error('Missing required fields');\r\n                 return;\r\n             }\r\n@@ -42,48 +42,5 @@\n         });\r\n     });\r\n };\r\n \r\n-export default socketHandlers;\n-// FILE: src/services/socketHandlers.js\r\n-import { Server } from 'socket.io';\r\n-import Message from '../models/message.js';\r\n-\r\n-const socketHandlers = (server) => {\r\n-    const io = new Server(server, {\r\n-        cors: {\r\n-            origin: 'http://localhost:3000',\r\n-        }\r\n-    });\r\n-\r\n-    io.on('connection', (socket) => {\r\n-        console.log('new connection');\r\n-\r\n-        // Escuchar mensajes entrantes\r\n-        socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n-            if (!senderId || !receiverId || !text) {\r\n-                console.error('Missing required fields');\r\n-                return;\r\n-            }\r\n-\r\n-            const message = new Message({\r\n-                senderId,\r\n-                receiverId,\r\n-                text,\r\n-                createdAt: new Date()\r\n-            });\r\n-\r\n-            try {\r\n-                await message.save();\r\n-                io.to(receiverId).emit('receiveMessage', message);\r\n-            } catch (error) {\r\n-                console.error('Error saving message:', error);\r\n-            }\r\n-        });\r\n-\r\n-        // Unirse a una sala específica\r\n-        socket.on('joinRoom', (userId) => {\r\n-            socket.join(userId);\r\n-        });\r\n-    });\r\n-};\r\n export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400222149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+// FILE: src/services/socketHandlers.js\r\n+import { Server } from 'socket.io';\r\n+import Message from '../models/message.js';\r\n+\r\n+const socketHandlers = (server) => {\r\n+    const io = new Server(server, {\r\n+        cors: {\r\n+            origin: 'http://localhost:3000',\r\n+        }\r\n+    });\r\n+\r\n+    io.on('connection', (socket) => {\r\n+        console.log('new connection');\r\n+\r\n+        // Escuchar mensajes entrantes\r\n+        socket.on('sendMessage', async ({ senderId, receiverId, content\r\n+        }) => {\r\n+            if (!senderId || !receiverId || !text) {\r\n+                console.error('Missing required fields');\r\n+                return;\r\n+            }\r\n+\r\n+            const message = new Message({\r\n+                senderId,\r\n+                receiverId,\r\n+                text,\r\n+                createdAt: new Date()\r\n+            });\r\n+\r\n+            try {\r\n+                await message.save();\r\n+                io.to(receiverId).emit('receiveMessage', message);\r\n+                io.to(senderId).emit('receiveMessage', message); // Emitir también al remitente\r\n+            } catch (error) {\r\n+                console.error('Error saving message:', error);\r\n+            }\r\n+        });\r\n+\r\n+        // Unirse a una sala específica\r\n+        socket.on('joinRoom', (userId) => {\r\n+            socket.join(userId);\r\n+            console.log(`User ${userId} joined room ${userId}`);\r\n+        });\r\n+    });\r\n+};\r\n+\r\n+export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400229238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,17 +14,19 @@\n \r\n         // Escuchar mensajes entrantes\r\n         socket.on('sendMessage', async ({ senderId, receiverId, content\r\n         }) => {\r\n-            if (!senderId || !receiverId || !text) {\r\n+            if (!senderId || !receiverId || !content\r\n+            ) {\r\n                 console.error('Missing required fields');\r\n                 return;\r\n             }\r\n \r\n             const message = new Message({\r\n                 senderId,\r\n                 receiverId,\r\n-                text,\r\n+                content\r\n+,\r\n                 createdAt: new Date()\r\n             });\r\n \r\n             try {\r\n@@ -43,51 +45,5 @@\n         });\r\n     });\r\n };\r\n \r\n-export default socketHandlers;\n-// FILE: src/services/socketHandlers.js\r\n-import { Server } from 'socket.io';\r\n-import Message from '../models/message.js';\r\n-\r\n-const socketHandlers = (server) => {\r\n-    const io = new Server(server, {\r\n-        cors: {\r\n-            origin: 'http://localhost:3000',\r\n-        }\r\n-    });\r\n-\r\n-    io.on('connection', (socket) => {\r\n-        console.log('new connection');\r\n-\r\n-        // Escuchar mensajes entrantes\r\n-        socket.on('sendMessage', async ({ senderId, receiverId, con }) => {\r\n-            if (!senderId || !receiverId || !text) {\r\n-                console.error('Missing required fields');\r\n-                return;\r\n-            }\r\n-\r\n-            const message = new Message({\r\n-                senderId,\r\n-                receiverId,\r\n-                text,\r\n-                createdAt: new Date()\r\n-            });\r\n-\r\n-            try {\r\n-                await message.save();\r\n-                io.to(receiverId).emit('receiveMessage', message);\r\n-                io.to(senderId).emit('receiveMessage', message); // Emitir también al remitente\r\n-            } catch (error) {\r\n-                console.error('Error saving message:', error);\r\n-            }\r\n-        });\r\n-\r\n-        // Unirse a una sala específica\r\n-        socket.on('joinRoom', (userId) => {\r\n-            socket.join(userId);\r\n-            console.log(`User ${userId} joined room ${userId}`);\r\n-        });\r\n-    });\r\n-};\r\n-\r\n export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400596590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,41 +8,7 @@\n             origin: 'http://localhost:3000',\r\n         }\r\n     });\r\n \r\n-    io.on('connection', (socket) => {\r\n-        console.log('new connection');\r\n \r\n-        // Escuchar mensajes entrantes\r\n-        socket.on('sendMessage', async ({ senderId, receiverId, content\r\n-        }) => {\r\n-            if (!senderId || !receiverId || !content\r\n-            ) {\r\n-                console.error('Missing required fields');\r\n-                return;\r\n-            }\r\n \r\n-            const message = new Message({\r\n-                senderId,\r\n-                receiverId,\r\n-                content,\r\n-                createdAt: new Date()\r\n-            });\r\n-\r\n-            try {\r\n-                await message.save();\r\n-                io.to(receiverId).emit('receiveMessage', message);\r\n-                io.to(senderId).emit('receiveMessage', message); // Emitir también al remitente\r\n-            } catch (error) {\r\n-                console.error('Error saving message:', error);\r\n-            }\r\n-        });\r\n-\r\n-        // Unirse a una sala específica\r\n-        socket.on('joinRoom', (userId) => {\r\n-            socket.join(userId);\r\n-            console.log(`User ${userId} joined room ${userId}`);\r\n-        });\r\n-    });\r\n-};\r\n-\r\n export default socketHandlers;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731400604022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+// FILE: src/services/socketHandlers.js\r\n+import { Server } from 'socket.io';\r\n+import Message from '../models/message.js';\r\n+\r\n+const socketHandlers = (server) => {\r\n+    const io = new Server(server, {\r\n+        cors: {\r\n+            origin: 'http://localhost:3000',\r\n+        }\r\n+    });\r\n+\r\n+io.on('connection', (socket) => {\r\n+  console.log('new connection');\r\n+\r\n+  // Escuchar mensajes entrantes\r\n+  socket.on('sendMessage', async ({ senderId, receiverId, content, chatId }) => {\r\n+    if (!senderId || !receiverId || !content || !chatId) {\r\n+      console.error('Missing required fields');\r\n+      return;\r\n+    }\r\n+\r\n+    const message = new Message({\r\n+      senderId,\r\n+      receiverId,\r\n+      content,\r\n+      chatId,\r\n+      createdAt: new Date()\r\n+    });\r\n+\r\n+    try {\r\n+      await message.save();\r\n+      io.to(receiverId).emit('receiveMessage', message);\r\n+      io.to(senderId).emit('receiveMessage', message); // Emitir también al remitente\r\n+    } catch (error) {\r\n+      console.error('Error saving message:', error);\r\n+    }\r\n+  });\r\n+});\r\n+\r\n+export default socketHandlers;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1731371210558,
            "name": "Commit-0",
            "content": "// FILE: socketHandlers.js\r\nimport { Server } from 'socket.io';\r\nimport Message from './models/Message'; // Asegúrate de tener un modelo de mensaje en tu proyecto\r\n\r\nconst socketHandlers = (server) => {\r\n    const io = new Server(server, {\r\n        cors: {\r\n            origin: 'http://localhost:3000',\r\n        }\r\n    });\r\n\r\n    io.on('connection', (socket) => {\r\n        console.log('new connection');\r\n\r\n        // Escuchar mensajes entrantes\r\n        socket.on('sendMessage', async ({ senderId, receiverId, text }) => {\r\n            const message = new Message({\r\n                senderId,\r\n                receiverId,\r\n                text,\r\n                createdAt: new Date()\r\n            });\r\n\r\n            try {\r\n                await message.save();\r\n                io.to(receiverId).emit('receiveMessage', message);\r\n            } catch (error) {\r\n                console.error('Error saving message:', error);\r\n            }\r\n        });\r\n\r\n        // Unirse a una sala específica\r\n        socket.on('joinRoom', (userId) => {\r\n            socket.join(userId);\r\n        });\r\n    });\r\n};\r\n\r\nexport default socketHandlers;"
        }
    ]
}