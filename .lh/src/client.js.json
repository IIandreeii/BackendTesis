{
    "sourceFile": "src/client.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1731016390301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731016519223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { io } from 'socket.io-client';\r\n+import axios from 'axios';\r\n \r\n const socket = io('http://localhost:3000');\r\n \r\n // Unirse a una sala\r\n@@ -14,4 +15,51 @@\n // Recibir un mensaje\r\n socket.on('receiveMessage', ({ userId, organizationId, message }) => {\r\n     console.log(`Mensaje recibido de ${userId} a ${organizationId}: ${message}`);\r\n });\r\n+\r\n+// Obtener publicaciones\r\n+const getPosts = async () => {\r\n+    try {\r\n+        const response = await axios.get('http://localhost:3000/posts');\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error('Error al obtener publicaciones:', error);\r\n+    }\r\n+};\r\n+\r\n+// Crear una nueva publicación\r\n+const createPost = async (content, organizationId) => {\r\n+    try {\r\n+        const response = await axios.post('http://localhost:3000/posts', {\r\n+            content,\r\n+            organization: organizationId,\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error('Error al crear publicación:', error);\r\n+    }\r\n+};\r\n+\r\n+// Dar \"like\" a una publicación\r\n+const likePost = async (postId, userId) => {\r\n+    try {\r\n+        const response = await axios.post(`http://localhost:3000/posts/${postId}/like`, {\r\n+            userId,\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error('Error al dar like a la publicación:', error);\r\n+    }\r\n+};\r\n+\r\n+// Ejemplo de uso\r\n+(async () => {\r\n+    const posts = await getPosts();\r\n+    console.log('Publicaciones:', posts);\r\n+\r\n+    const newPost = await createPost('Nueva publicación de prueba', organizationId);\r\n+    console.log('Nueva publicación:', newPost);\r\n+\r\n+    const likedPost = await likePost(newPost._id, userId);\r\n+    console.log('Publicación con like:', likedPost);\r\n+})();\r\n"
                },
                {
                    "date": 1731023529367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,11 @@\n const organizationId = 'org456';\r\n socket.emit('joinRoom', { userId, organizationId });\r\n \r\n // Enviar un mensaje\r\n-const message = 'Hola, organización!';\r\n-socket.emit('sendMessage', { userId, organizationId, message });\r\n+const sendMessage = (message) => {\r\n+    socket.emit('sendMessage', { userId, organizationId, message });\r\n+};\r\n \r\n // Recibir un mensaje\r\n socket.on('receiveMessage', ({ userId, organizationId, message }) => {\r\n     console.log(`Mensaje recibido de ${userId} a ${organizationId}: ${message}`);\r\n@@ -61,5 +62,8 @@\n     console.log('Nueva publicación:', newPost);\r\n \r\n     const likedPost = await likePost(newPost._id, userId);\r\n     console.log('Publicación con like:', likedPost);\r\n+\r\n+    // Enviar un mensaje de prueba\r\n+    sendMessage('Hola, organización!');\r\n })();\r\n"
                },
                {
                    "date": 1731024175302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import { io } from 'socket.io-client';\r\n+import axios from 'axios';\r\n+\r\n+const socket = io('http://localhost:3000');\r\n+\r\n+// Unirse a una sala\r\n+const userId = 'user123';\r\n+const organizationId = 'org456';\r\n+socket.emit('joinRoom', { userId, organizationId });\r\n+\r\n+// Enviar un mensaje\r\n+const sendMessage = (message) => {\r\n+    socket.emit('sendMessage', { userId, organizationId, message });\r\n+};\r\n+\r\n+// Recibir un mensaje\r\n+socket.on('receiveMessage', ({ userId, organizationId, message }) => {\r\n+    console.log(`Mensaje recibido de ${userId} a ${organizationId}: ${message}`);\r\n+});\r\n+\r\n+// Obtener publicaciones\r\n+const getPosts = async () => {\r\n+    try {\r\n+        const response = await axios.get('http://localhost:3000/posts');\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error('Error al obtener publicaciones:', error);\r\n+    }\r\n+};\r\n+\r\n+// Crear una nueva publicación\r\n+const createPost = async (content, organizationId) => {\r\n+    try {\r\n+        const response = await axios.post('http://localhost:3000/posts', {\r\n+            content,\r\n+            organization: organizationId,\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error('Error al crear publicación:', error);\r\n+    }\r\n+};\r\n+\r\n+// Dar \"like\" a una publicación\r\n+const likePost = async (postId, userId) => {\r\n+    try {\r\n+        const response = await axios.post(`http://localhost:3002/posts/${postId}/like`, {\r\n+            userId,\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error('Error al dar like a la publicación:', error);\r\n+    }\r\n+};\r\n+\r\n+// Ejemplo de uso\r\n+(async () => {\r\n+    const posts = await getPosts();\r\n+    console.log('Publicaciones:', posts);\r\n+\r\n+    const newPost = await createPost('Nueva publicación de prueba', organizationId);\r\n+    console.log('Nueva publicación:', newPost);\r\n+\r\n+    const likedPost = await likePost(newPost._id, userId);\r\n+    console.log('Publicación con like:', likedPost);\r\n+\r\n+    // Enviar un mensaje de prueba\r\n+    sendMessage('Hola, organización!');\r\n+})();\r\n"
                },
                {
                    "date": 1731024183467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { io } from 'socket.io-client';\r\n import axios from 'axios';\r\n \r\n-const socket = io('http://localhost:3000');\r\n+const socket = io('http://localhost:3002');\r\n \r\n // Unirse a una sala\r\n const userId = 'user123';\r\n const organizationId = 'org456';\r\n@@ -20,9 +20,9 @@\n \r\n // Obtener publicaciones\r\n const getPosts = async () => {\r\n     try {\r\n-        const response = await axios.get('http://localhost:3000/posts');\r\n+        const response = await axios.get('http://localhost:3002/posts');\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error('Error al obtener publicaciones:', error);\r\n     }\r\n@@ -30,9 +30,9 @@\n \r\n // Crear una nueva publicación\r\n const createPost = async (content, organizationId) => {\r\n     try {\r\n-        const response = await axios.post('http://localhost:3000/posts', {\r\n+        const response = await axios.post('http://localhost:3002/posts', {\r\n             content,\r\n             organization: organizationId,\r\n         });\r\n         return response.data;\r\n@@ -66,73 +66,4 @@\n \r\n     // Enviar un mensaje de prueba\r\n     sendMessage('Hola, organización!');\r\n })();\r\n-import { io } from 'socket.io-client';\r\n-import axios from 'axios';\r\n-\r\n-const socket = io('http://localhost:3000');\r\n-\r\n-// Unirse a una sala\r\n-const userId = 'user123';\r\n-const organizationId = 'org456';\r\n-socket.emit('joinRoom', { userId, organizationId });\r\n-\r\n-// Enviar un mensaje\r\n-const sendMessage = (message) => {\r\n-    socket.emit('sendMessage', { userId, organizationId, message });\r\n-};\r\n-\r\n-// Recibir un mensaje\r\n-socket.on('receiveMessage', ({ userId, organizationId, message }) => {\r\n-    console.log(`Mensaje recibido de ${userId} a ${organizationId}: ${message}`);\r\n-});\r\n-\r\n-// Obtener publicaciones\r\n-const getPosts = async () => {\r\n-    try {\r\n-        const response = await axios.get('http://localhost:3000/posts');\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error('Error al obtener publicaciones:', error);\r\n-    }\r\n-};\r\n-\r\n-// Crear una nueva publicación\r\n-const createPost = async (content, organizationId) => {\r\n-    try {\r\n-        const response = await axios.post('http://localhost:3000/posts', {\r\n-            content,\r\n-            organization: organizationId,\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error('Error al crear publicación:', error);\r\n-    }\r\n-};\r\n-\r\n-// Dar \"like\" a una publicación\r\n-const likePost = async (postId, userId) => {\r\n-    try {\r\n-        const response = await axios.post(`http://localhost:3000/posts/${postId}/like`, {\r\n-            userId,\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error('Error al dar like a la publicación:', error);\r\n-    }\r\n-};\r\n-\r\n-// Ejemplo de uso\r\n-(async () => {\r\n-    const posts = await getPosts();\r\n-    console.log('Publicaciones:', posts);\r\n-\r\n-    const newPost = await createPost('Nueva publicación de prueba', organizationId);\r\n-    console.log('Nueva publicación:', newPost);\r\n-\r\n-    const likedPost = await likePost(newPost._id, userId);\r\n-    console.log('Publicación con like:', likedPost);\r\n-\r\n-    // Enviar un mensaje de prueba\r\n-    sendMessage('Hola, organización!');\r\n-})();\r\n"
                },
                {
                    "date": 1731025682038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { io } from 'socket.io-client';\r\n import axios from 'axios';\r\n \r\n-const socket = io('http://localhost:3002');\r\n+const socket = io('http://localhost:3001');\r\n \r\n // Unirse a una sala\r\n const userId = 'user123';\r\n const organizationId = 'org456';\r\n"
                },
                {
                    "date": 1731025687237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \r\n // Obtener publicaciones\r\n const getPosts = async () => {\r\n     try {\r\n-        const response = await axios.get('http://localhost:3002/posts');\r\n+        const response = await axios.get('http://localhost:3001/posts');\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error('Error al obtener publicaciones:', error);\r\n     }\r\n@@ -30,9 +30,9 @@\n \r\n // Crear una nueva publicación\r\n const createPost = async (content, organizationId) => {\r\n     try {\r\n-        const response = await axios.post('http://localhost:3002/posts', {\r\n+        const response = await axios.post('http://localhost:3001/posts', {\r\n             content,\r\n             organization: organizationId,\r\n         });\r\n         return response.data;\r\n"
                }
            ],
            "date": 1731016390301,
            "name": "Commit-0",
            "content": "import { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3000');\r\n\r\n// Unirse a una sala\r\nconst userId = 'user123';\r\nconst organizationId = 'org456';\r\nsocket.emit('joinRoom', { userId, organizationId });\r\n\r\n// Enviar un mensaje\r\nconst message = 'Hola, organización!';\r\nsocket.emit('sendMessage', { userId, organizationId, message });\r\n\r\n// Recibir un mensaje\r\nsocket.on('receiveMessage', ({ userId, organizationId, message }) => {\r\n    console.log(`Mensaje recibido de ${userId} a ${organizationId}: ${message}`);\r\n});\r\n"
        }
    ]
}