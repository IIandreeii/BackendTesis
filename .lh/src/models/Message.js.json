{
    "sourceFile": "src/models/message.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1731016390300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731371242104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,25 @@\n+// FILE: models/Message.js\r\n import mongoose from 'mongoose';\r\n \r\n-const { Schema } = mongoose;\r\n-\r\n-const MessageSchema = new Schema({\r\n-    sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n-    receiver: { type: Schema.Types.ObjectId, ref: 'Organization', required: true },\r\n-    content: { type: String, required: true },\r\n-    timestamp: { type: Date, default: Date.now },\r\n-}, {\r\n-    timestamps: true\r\n+const messageSchema = new mongoose.Schema({\r\n+    senderId: {\r\n+        type: String,\r\n+        required: true\r\n+    },\r\n+    receiverId: {\r\n+        type: String,\r\n+        required: true\r\n+    },\r\n+    text: {\r\n+        type: String,\r\n+        required: true\r\n+    },\r\n+    createdAt: {\r\n+        type: Date,\r\n+        default: Date.now\r\n+    }\r\n });\r\n \r\n-export default mongoose.model('Message', MessageSchema);\r\n+const Message = mongoose.model('Message', messageSchema);\r\n+\r\n+export default Message;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731381947907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,239 @@\n-// FILE: models/Message.js\r\n-import mongoose from 'mongoose';\r\n+'use client'\r\n \r\n-const messageSchema = new mongoose.Schema({\r\n-    senderId: {\r\n-        type: String,\r\n-        required: true\r\n-    },\r\n-    receiverId: {\r\n-        type: String,\r\n-        required: true\r\n-    },\r\n-    text: {\r\n-        type: String,\r\n-        required: true\r\n-    },\r\n-    createdAt: {\r\n-        type: Date,\r\n-        default: Date.now\r\n+import React, { useState, useEffect } from 'react'\r\n+import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\r\n+import io from 'socket.io-client'\r\n+\r\n+const socket = io('http://localhost:3001')\r\n\\ No newline at end of file\n+\r\n+export function FbMessengerImproved({ user }) {\r\n+  const [activeChat, setActiveChat] = useState(null)\r\n+  const [message, setMessage] = useState('')\r\n+  const [messages, setMessages] = useState([])\r\n+  const [chatPreviews, setChatPreviews] = useState([])\r\n+  const [showChatList, setShowChatList] = useState(true)\r\n+\r\n+  useEffect(() => {\r\n+    // Fetch initial chat previews\r\n+    const fetchChatPreviews = async () => {\r\n+      try {\r\n+        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Content-Type': 'application/json'\r\n+          }\r\n+        })\r\n+        if (!res.ok) {\r\n+          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\r\n+        }\r\n+        const data = await res.json()\r\n+        setChatPreviews(data)\r\n+      } catch (error) {\r\n+        console.error('Error:', error)\r\n+      }\r\n     }\r\n-});\r\n \r\n-const Message = mongoose.model('Message', messageSchema);\r\n+    fetchChatPreviews()\r\n+  }, [user.id])\r\n \r\n-export default Message;\n+  useEffect(() => {\r\n+    if (activeChat) {\r\n+      // Unirse a la sala específica del usuario\r\n+      socket.emit('joinRoom', activeChat.id)\r\n+\r\n+      // Fetch initial messages for the active chat\r\n+      const fetchMessages = async () => {\r\n+        try {\r\n+          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\r\n+          if (!res.ok) {\r\n+            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\r\n+          }\r\n+          const data = await res.json()\r\n+          setMessages(data)\r\n+        } catch (error) {\r\n+          console.error('Error:', error)\r\n+        }\r\n+      }\r\n+\r\n+      fetchMessages()\r\n+\r\n+      // Escuchar mensajes recibidos\r\n+      const handleReceiveMessage = (message) => {\r\n+        setMessages((prevMessages) => [...prevMessages, message])\r\n+      }\r\n+      socket.on('receiveMessage', handleReceiveMessage)\r\n+\r\n+      // Limpiar el evento cuando el componente se desmonta\r\n+      return () => {\r\n+        socket.emit('leaveRoom', activeChat.id)\r\n+        socket.off('receiveMessage', handleReceiveMessage)\r\n+      }\r\n+    }\r\n+  }, [activeChat, user.id])\r\n+\r\n+  const handleSend = () => {\r\n+    if (message.trim()) {\r\n+      const newMessage = {\r\n+        senderId: user.id,\r\n+        receiverId: activeChat.id,\r\n+        text: message,\r\n+      }\r\n+      socket.emit('sendMessage', newMessage)\r\n+      setMessages([...messages, newMessage])\r\n+      setMessage('')\r\n+    }\r\n+  }\r\n+\r\n+  const toggleChatList = () => {\r\n+    setShowChatList(!showChatList)\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"flex h-screen bg-[#ECE3D4]\">\r\n+      {/* Lista de chats */}\r\n+      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\r\n+        <div className=\"p-4 bg-[#D8C7A9]\">\r\n+          <div className=\"flex justify-between items-center mb-4\">\r\n+            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\r\n+            <div className=\"flex space-x-2\">\r\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+                <MoreHorizontal size={20} />\r\n+                <span className=\"sr-only\">Más opciones</span>\r\n+              </button>\r\n+              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+                <Edit size={20} />\r\n+                <span className=\"sr-only\">Nuevo mensaje</span>\r\n+              </button>\r\n+            </div>\r\n+          </div>\r\n+          <div className=\"relative\">\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Buscar en Messenger\"\r\n+              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\r\n+            />\r\n+            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\r\n+          </div>\r\n+        </div>\r\n+        <div className=\"flex-1 overflow-y-auto\">\r\n+          {chatPreviews.map((chat) => (\r\n+            <div\r\n+              key={chat.id}\r\n+              className={`flex items-center p-3 cursor-pointer transition-colors ${\r\n+                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\r\n+              }`}\r\n+              onClick={() => {\r\n+                setActiveChat(chat)\r\n+                if (window.innerWidth < 768) {\r\n+                  setShowChatList(false)\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div className=\"relative mr-3\">\r\n+                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\r\n+                {chat.isActive && (\r\n+                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\r\n+                )}\r\n+              </div>\r\n+              <div className=\"flex-1 min-w-0\">\r\n+                <div className=\"flex justify-between items-baseline\">\r\n+                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\r\n+                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\r\n+                </div>\r\n+                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\r\n+              </div>\r\n+              {chat.unread > 0 && (\r\n+                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\r\n+                  {chat.unread}\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Ventana de chat activa */}\r\n+      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\r\n+        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\r\n+          <div className=\"flex items-center\">\r\n+            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\r\n+              <ArrowLeft size={20} />\r\n+              <span className=\"sr-only\">Volver a la lista de chats</span>\r\n+            </button>\r\n+            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\r\n+            <div>\r\n+              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\r\n+              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\r\n+            </div>\r\n+          </div>\r\n+          <div className=\"flex space-x-2\">\r\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+              <Phone size={20} />\r\n+              <span className=\"sr-only\">Llamada de voz</span>\r\n+            </button>\r\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+              <Video size={20} />\r\n+              <span className=\"sr-only\">Videollamada</span>\r\n+            </button>\r\n+            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n+              <Settings size={20} />\r\n+              <span className=\"sr-only\">Configuración</span>\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\r\n+          {messages.map((msg, index) => (\r\n+            <div\r\n+              key={index}\r\n+              className={`max-w-[70%] p-3 rounded-lg ${\r\n+                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\r\n+              }`}\r\n+            >\r\n+              <p className=\"text-[#042637]\">{msg.text}</p>\r\n+            </div>\r\n+          ))}\r\n+          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\r\n+        </div>\r\n+        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\r\n+          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\r\n+            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n+              <Smile size={20} />\r\n+              <span className=\"sr-only\">Emojis</span>\r\n+            </button>\r\n+            <input\r\n+              type=\"text\"\r\n+              value={message}\r\n+              onChange={(e) => setMessage(e.target.value)}\r\n+              placeholder=\"Aa\"\r\n+              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\r\n+            />\r\n+            <div className=\"flex space-x-2 mr-2\">\r\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n+                <Paperclip size={20} />\r\n+                <span className=\"sr-only\">Adjuntar archivo</span>\r\n+              </button>\r\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n+                <Image size={20} />\r\n+                <span className=\"sr-only\">Adjuntar imagen</span>\r\n+              </button>\r\n+              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n+                <ThumbsUp size={20} />\r\n+                <span className=\"sr-only\">Me gusta</span>\r\n+              </button>\r\n+            </div>\r\n+            <button\r\n+              className={`p-2 rounded-full transition-colors ${\r\n+                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\r\n+              }`}\r\n+              onClick={handleSend}\r\n+              disabled={!message.trim()}\r\n+            >\r\n+              <Send size={20} />\r\n+              <span className=\"sr-only\">Enviar mensaje</span>\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  )\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731382030376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+import mongoose from 'mongoose';\r\n+\r\n+const chatSchema = new mongoose.Schema({\r\n+  participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\r\n+  lastMessage: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'Message',\r\n+  },\r\n+  unreadMessages: { type: Map, of: Number, default: {} },\r\n+  updatedAt: { type: Date, default: Date.now },\r\n+});\r\n+\r\n+const Chat = mongoose.model('Chat', chatSchema);\r\n+\r\n+export default Chat;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731391430367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,254 +1,21 @@\n import mongoose from 'mongoose';\r\n \r\n-const chatSchema = new mongoose.Schema({\r\n-  participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\r\n-  lastMessage: {\r\n+const messageSchema = new mongoose.Schema({\r\n+  sender: {\r\n     type: mongoose.Schema.Types.ObjectId,\r\n-    ref: 'Message',\r\n+    ref: 'User',  // Referencia al usuario que envió el mensaje\r\n+    required: true\r\n   },\r\n-  unreadMessages: { type: Map, of: Number, default: {} },\r\n-  updatedAt: { type: Date, default: Date.now },\r\n+  content: {\r\n+    type: String,\r\n+    required: true  // El contenido del mensaje\r\n+  },\r\n+  createdAt: {\r\n+    type: Date,\r\n+    default: Date.now  // Fecha en que se envió el mensaje\r\n+  },\r\n });\r\n \r\n-const Chat = mongoose.model('Chat', chatSchema);\r\n+const Message = mongoose.models.Message || mongoose.model('Message', messageSchema);\r\n \r\n-export default Chat;\n-'use client'\r\n-\r\n-import React, { useState, useEffect } from 'react'\r\n-import { Search, MoreHorizontal, Edit, Settings, Phone, Video, ThumbsUp, Smile, Paperclip, Image, Send, ArrowLeft } from 'lucide-react'\r\n-import io from 'socket.io-client'\r\n-\r\n-const socket = io('http://localhost:3001')\r\n-\r\n-export function FbMessengerImproved({ user }) {\r\n-  const [activeChat, setActiveChat] = useState(null)\r\n-  const [message, setMessage] = useState('')\r\n-  const [messages, setMessages] = useState([])\r\n-  const [chatPreviews, setChatPreviews] = useState([])\r\n-  const [showChatList, setShowChatList] = useState(true)\r\n-\r\n-  useEffect(() => {\r\n-    // Fetch initial chat previews\r\n-    const fetchChatPreviews = async () => {\r\n-      try {\r\n-        const res = await fetch(`http://localhost:3001/chats?userId=${user.id}`, {\r\n-          method: 'GET',\r\n-          headers: {\r\n-            'Content-Type': 'application/json'\r\n-          }\r\n-        })\r\n-        if (!res.ok) {\r\n-          throw new Error(`Error fetching chats: ${res.status} ${res.statusText}`)\r\n-        }\r\n-        const data = await res.json()\r\n-        setChatPreviews(data)\r\n-      } catch (error) {\r\n-        console.error('Error:', error)\r\n-      }\r\n-    }\r\n-\r\n-    fetchChatPreviews()\r\n-  }, [user.id])\r\n-\r\n-  useEffect(() => {\r\n-    if (activeChat) {\r\n-      // Unirse a la sala específica del usuario\r\n-      socket.emit('joinRoom', activeChat.id)\r\n-\r\n-      // Fetch initial messages for the active chat\r\n-      const fetchMessages = async () => {\r\n-        try {\r\n-          const res = await fetch(`http://localhost:3001/messages?receiverId=${activeChat.id}&senderId=${user.id}`)\r\n-          if (!res.ok) {\r\n-            throw new Error(`Error fetching messages: ${res.status} ${res.statusText}`)\r\n-          }\r\n-          const data = await res.json()\r\n-          setMessages(data)\r\n-        } catch (error) {\r\n-          console.error('Error:', error)\r\n-        }\r\n-      }\r\n-\r\n-      fetchMessages()\r\n-\r\n-      // Escuchar mensajes recibidos\r\n-      const handleReceiveMessage = (message) => {\r\n-        setMessages((prevMessages) => [...prevMessages, message])\r\n-      }\r\n-      socket.on('receiveMessage', handleReceiveMessage)\r\n-\r\n-      // Limpiar el evento cuando el componente se desmonta\r\n-      return () => {\r\n-        socket.emit('leaveRoom', activeChat.id)\r\n-        socket.off('receiveMessage', handleReceiveMessage)\r\n-      }\r\n-    }\r\n-  }, [activeChat, user.id])\r\n-\r\n-  const handleSend = () => {\r\n-    if (message.trim()) {\r\n-      const newMessage = {\r\n-        senderId: user.id,\r\n-        receiverId: activeChat.id,\r\n-        text: message,\r\n-      }\r\n-      socket.emit('sendMessage', newMessage)\r\n-      setMessages([...messages, newMessage])\r\n-      setMessage('')\r\n-    }\r\n-  }\r\n-\r\n-  const toggleChatList = () => {\r\n-    setShowChatList(!showChatList)\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"flex h-screen bg-[#ECE3D4]\">\r\n-      {/* Lista de chats */}\r\n-      <div className={`w-full md:w-[320px] lg:w-[360px] border-r border-[#D8C7A9] flex flex-col ${showChatList ? 'block' : 'hidden md:block'}`}>\r\n-        <div className=\"p-4 bg-[#D8C7A9]\">\r\n-          <div className=\"flex justify-between items-center mb-4\">\r\n-            <h1 className=\"text-2xl font-bold text-[#042637]\">Chats</h1>\r\n-            <div className=\"flex space-x-2\">\r\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-                <MoreHorizontal size={20} />\r\n-                <span className=\"sr-only\">Más opciones</span>\r\n-              </button>\r\n-              <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-                <Edit size={20} />\r\n-                <span className=\"sr-only\">Nuevo mensaje</span>\r\n-              </button>\r\n-            </div>\r\n-          </div>\r\n-          <div className=\"relative\">\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Buscar en Messenger\"\r\n-              className=\"w-full p-2 pl-8 bg-[#E1DDBF] rounded-full text-[#042637] placeholder-[#042637]/50 focus:outline-none\"\r\n-            />\r\n-            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-[#042637]/50\" size={18} />\r\n-          </div>\r\n-        </div>\r\n-        <div className=\"flex-1 overflow-y-auto\">\r\n-          {chatPreviews.map((chat) => (\r\n-            <div\r\n-              key={chat.id}\r\n-              className={`flex items-center p-3 cursor-pointer transition-colors ${\r\n-                activeChat && activeChat.id === chat.id ? 'bg-[#D8C7A9]' : 'hover:bg-[#E1DDBF]'\r\n-              }`}\r\n-              onClick={() => {\r\n-                setActiveChat(chat)\r\n-                if (window.innerWidth < 768) {\r\n-                  setShowChatList(false)\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div className=\"relative mr-3\">\r\n-                <img src={chat.avatar} alt=\"\" className=\"w-12 h-12 rounded-full\" />\r\n-                {chat.isActive && (\r\n-                  <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-[#ECE3D4]\"></div>\r\n-                )}\r\n-              </div>\r\n-              <div className=\"flex-1 min-w-0\">\r\n-                <div className=\"flex justify-between items-baseline\">\r\n-                  <h2 className=\"font-semibold text-[#042637] truncate\">{chat.name}</h2>\r\n-                  <span className=\"text-xs text-[#042637]/70 ml-2 flex-shrink-0\">{chat.time}</span>\r\n-                </div>\r\n-                <p className=\"text-sm text-[#042637]/70 truncate\">{chat.lastMessage}</p>\r\n-              </div>\r\n-              {chat.unread > 0 && (\r\n-                <div className=\"bg-[#042637] text-[#ECE3D4] rounded-full w-5 h-5 flex items-center justify-center text-xs ml-2 flex-shrink-0\">\r\n-                  {chat.unread}\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Ventana de chat activa */}\r\n-      <div className={`flex-1 flex flex-col ${!showChatList ? 'block' : 'hidden md:block'}`}>\r\n-        <div className=\"p-4 bg-[#D8C7A9] flex justify-between items-center border-b border-[#E1DDBF]\">\r\n-          <div className=\"flex items-center\">\r\n-            <button className=\"md:hidden mr-2 text-[#042637]\" onClick={toggleChatList}>\r\n-              <ArrowLeft size={20} />\r\n-              <span className=\"sr-only\">Volver a la lista de chats</span>\r\n-            </button>\r\n-            {activeChat && <img src={activeChat.avatar} alt=\"\" className=\"w-10 h-10 rounded-full mr-3\" />}\r\n-            <div>\r\n-              {activeChat && <h2 className=\"font-semibold text-[#042637]\">{activeChat.name}</h2>}\r\n-              <p className=\"text-xs text-[#042637]/70\">Activo ahora</p>\r\n-            </div>\r\n-          </div>\r\n-          <div className=\"flex space-x-2\">\r\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-              <Phone size={20} />\r\n-              <span className=\"sr-only\">Llamada de voz</span>\r\n-            </button>\r\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-              <Video size={20} />\r\n-              <span className=\"sr-only\">Videollamada</span>\r\n-            </button>\r\n-            <button className=\"text-[#042637] hover:bg-[#E1DDBF] p-2 rounded-full transition-colors\">\r\n-              <Settings size={20} />\r\n-              <span className=\"sr-only\">Configuración</span>\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-        <div className=\"flex-1 overflow-y-auto p-4 bg-[#ECE3D4]\">\r\n-          {messages.map((msg, index) => (\r\n-            <div\r\n-              key={index}\r\n-              className={`max-w-[70%] p-3 rounded-lg ${\r\n-                msg.senderId === user.id ? 'ml-auto bg-[#ECE3D4]' : 'bg-[#E1DDBF]'\r\n-              }`}\r\n-            >\r\n-              <p className=\"text-[#042637]\">{msg.text}</p>\r\n-            </div>\r\n-          ))}\r\n-          <div className=\"text-center text-[#042637]/50 mb-4\">Inicio de la conversación</div>\r\n-        </div>\r\n-        <div className=\"p-4 bg-[#D8C7A9] border-t border-[#E1DDBF]\">\r\n-          <div className=\"flex items-center bg-[#E1DDBF] rounded-full\">\r\n-            <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n-              <Smile size={20} />\r\n-              <span className=\"sr-only\">Emojis</span>\r\n-            </button>\r\n-            <input\r\n-              type=\"text\"\r\n-              value={message}\r\n-              onChange={(e) => setMessage(e.target.value)}\r\n-              placeholder=\"Aa\"\r\n-              className=\"flex-1 bg-transparent px-4 py-2 focus:outline-none text-[#042637]\"\r\n-            />\r\n-            <div className=\"flex space-x-2 mr-2\">\r\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n-                <Paperclip size={20} />\r\n-                <span className=\"sr-only\">Adjuntar archivo</span>\r\n-              </button>\r\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n-                <Image size={20} />\r\n-                <span className=\"sr-only\">Adjuntar imagen</span>\r\n-              </button>\r\n-              <button className=\"text-[#042637] p-2 rounded-full hover:bg-[#ECE3D4] transition-colors\">\r\n-                <ThumbsUp size={20} />\r\n-                <span className=\"sr-only\">Me gusta</span>\r\n-              </button>\r\n-            </div>\r\n-            <button\r\n-              className={`p-2 rounded-full transition-colors ${\r\n-                message.trim() ? 'bg-[#042637] text-[#ECE3D4] hover:bg-[#042637]/80' : 'text-[#042637]/50 cursor-not-allowed'\r\n\\ No newline at end of file\n-              }`}\r\n-              onClick={handleSend}\r\n-              disabled={!message.trim()}\r\n-            >\r\n-              <Send size={20} />\r\n-              <span className=\"sr-only\">Enviar mensaje</span>\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-}\n+export default Message;\r\n"
                },
                {
                    "date": 1731399144645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import mongoose from 'mongoose';\r\n+\r\n+const MessageSchema = new mongoose.Schema({\r\n+  content: {\r\n+    type: String,\r\n+    required: [true, 'Content is required']\r\n+  },\r\n+  senderId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'User',\r\n+    required: [true, 'Sender is required']\r\n+  },\r\n+  receiverId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'User',\r\n+    required: [true, 'Receiver is required']\r\n+  },\r\n+  createdAt: {\r\n+    type: Date,\r\n+    default: Date.now\r\n+  }\r\n+});\r\n+\r\n+export default mongoose.model('Message', MessageSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731399252051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import mongoose from 'mongoose';\r\n+\r\n+const MessageSchema = new mongoose.Schema({\r\n+  content: {\r\n+    type: String,\r\n+    required: [true, 'Content is required']\r\n+  },\r\n+  senderId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'User',\r\n+    required: [true, 'Sender is required']\r\n+  },\r\n+  receiverId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'User',\r\n+    required: [true, 'Receiver is required']\r\n+  },\r\n+  createdAt: {\r\n+    type: Date,\r\n+    default: Date.now\r\n+  }\r\n+});\r\n+\r\n+export default mongoose.model('Message', MessageSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731399574926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import mongoose from 'mongoose';\r\n+\r\n+const MessageSchema = new mongoose.Schema({\r\n+  content: {\r\n+    type: String,\r\n+    required: [true, 'Content is required']\r\n+  },\r\n+  senderId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'User',\r\n+    required: [true, 'Sender is required']\r\n+  },\r\n+  receiverId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'User',\r\n+    required: [true, 'Receiver is required']\r\n+  },\r\n+  createdAt: {\r\n+    type: Date,\r\n+    default: Date.now\r\n+  }\r\n+});\r\n+\r\n+export default mongoose.model('Message', MessageSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1731401591057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,13 @@\n     type: mongoose.Schema.Types.ObjectId,\r\n     ref: 'User',\r\n     required: [true, 'Receiver is required']\r\n   },\r\n+  chatId: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'Chat',\r\n+    required: [true, 'Chat ID is required']\r\n+  },\r\n   createdAt: {\r\n     type: Date,\r\n     default: Date.now\r\n   }\r\n"
                }
            ],
            "date": 1731016390300,
            "name": "Commit-0",
            "content": "import mongoose from 'mongoose';\r\n\r\nconst { Schema } = mongoose;\r\n\r\nconst MessageSchema = new Schema({\r\n    sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n    receiver: { type: Schema.Types.ObjectId, ref: 'Organization', required: true },\r\n    content: { type: String, required: true },\r\n    timestamp: { type: Date, default: Date.now },\r\n}, {\r\n    timestamps: true\r\n});\r\n\r\nexport default mongoose.model('Message', MessageSchema);\r\n"
        }
    ]
}