{
    "sourceFile": "src/models/user.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1731026769705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731382173376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import mongoose from 'mongoose';\r\n+import bcrypt from 'bcrypt';\r\n+\r\n+const { Schema } = mongoose;\r\n+\r\n+const UserSchema = new Schema({\r\n+  nombre: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  apellido: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  dni: {\r\n+    type: String,\r\n+    required: true,\r\n+    unique: true\r\n+  },\r\n+  email: {\r\n+    type: String,\r\n+    required: true,\r\n+    unique: true\r\n+  },\r\n+  password: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  userType: { type: String, required: true}\r\n+}, {\r\n+  timestamps: true\r\n+});\r\n+\r\n+UserSchema.pre(\"save\", async function(next) {\r\n+\r\n+const hash = await bcrypt.hash(this.password, 10);\r\n+this.password = hash;\r\n+next();\r\n+});\r\n+\r\n+\r\n+UserSchema.methods.isValidPassword = async function(password) {\r\n+    const user = this;\r\n+    const compare = await bcrypt.compare(password, user.password);\r\n+    return compare;\r\n+};\r\n+\r\n+export default mongoose.model(\"User\", UserSchema);\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                }
            ],
            "date": 1731026769705,
            "name": "Commit-0",
            "content": "import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst { Schema } = mongoose;\r\n\r\nconst UserSchema = new Schema({\r\n  nombre: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  apellido: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  dni: {\r\n    type: String,\r\n    required: true,\r\n    unique: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  userType: { type: String, required: true}\r\n}, {\r\n  timestamps: true\r\n});\r\n\r\nUserSchema.pre(\"save\", async function(next) {\r\n\r\nconst hash = await bcrypt.hash(this.password, 10);\r\nthis.password = hash;\r\nnext();\r\n});\r\n\r\n\r\nUserSchema.methods.isValidPassword = async function(password) {\r\n    const user = this;\r\n    const compare = await bcrypt.compare(password, user.password);\r\n    return compare;\r\n};\r\n\r\nexport default mongoose.model(\"User\", UserSchema);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
        }
    ]
}